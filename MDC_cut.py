# MDC cut GUI
__version__ = "7.4.2"
__release_date__ = "2025-09-30"
# Name                     Version          Build               Channel
# asteval                   1.0.6                    pypi_0    pypi
# bzip2                     1.0.8                h2bbff1b_6
# ca-certificates           2025.7.15            haa95532_0
# colorama                  0.4.6                    pypi_0    pypi
# contourpy                 1.3.3                    pypi_0    pypi
# crc32c                    2.7.1                    pypi_0    pypi
# cycler                    0.12.1                   pypi_0    pypi
# dill                      0.4.0                    pypi_0    pypi
# donfig                    0.8.1.post1              pypi_0    pypi
# expat                     2.7.1                h8ddb27b_0
# fonttools                 4.59.0                   pypi_0    pypi
# h5py                      3.14.0                   pypi_0    pypi
# kiwisolver                1.4.9                    pypi_0    pypi
# libffi                    3.4.4                hd77b12b_1
# libmpdec                  4.0.0                h827c3e9_0
# lmfit                     1.3.4                    pypi_0    pypi
# matplotlib                3.10.5                   pypi_0    pypi
# numcodecs                 0.16.1                   pypi_0    pypi
# numpy                     2.2.6                    pypi_0    pypi
# opencv-python             4.12.0.88                pypi_0    pypi
# openssl                   3.0.17               h35632f6_0
# originext                 1.2.4                    pypi_0    pypi
# originpro                 1.1.13                   pypi_0    pypi
# packaging                 25.0                     pypi_0    pypi
# pandas                    2.3.1                    pypi_0    pypi
# pillow                    11.3.0                   pypi_0    pypi
# pip                       25.1               pyhc872135_2
# psutil                    7.0.0                    pypi_0    pypi
# py-cpuinfo                9.0.0                    pypi_0    pypi
# pyparsing                 3.2.3                    pypi_0    pypi
# pyqt5                     5.15.11                  pypi_0    pypi
# pyqt5-qt5                 5.15.2                   pypi_0    pypi
# pyqt5-sip                 12.17.0                  pypi_0    pypi
# pyqtgraph                 0.13.7                   pypi_0    pypi
# python                    3.13.5          h286a616_100_cp313
# python-dateutil           2.9.0.post0              pypi_0    pypi
# python_abi                3.13                    0_cp313
# pytz                      2025.2                   pypi_0    pypi
# pywin32                   311                      pypi_0    pypi
# pyyaml                    6.0.2                    pypi_0    pypi
# scipy                     1.16.1                   pypi_0    pypi
# setuptools                78.1.1          py313haa95532_0
# six                       1.17.0                   pypi_0    pypi
# sqlite                    3.50.2               hda9a48d_1
# tk                        8.6.14               h5e9d12e_1
# tqdm                      4.67.1                   pypi_0    pypi
# typing-extensions         4.14.1                   pypi_0    pypi
# tzdata                    2025.2                   pypi_0    pypi
# ucrt                      10.0.22621.0         haa95532_0
# uncertainties             3.2.3                    pypi_0    pypi
# vc                        14.3                h2df5915_10
# vc14_runtime              14.44.35208         h4927774_10
# vs2015_runtime            14.44.35208         ha6b5a95_10
# wheel                     0.45.1          py313haa95532_0
# xarray                    2025.7.1                 pypi_0    pypi
# xz                        5.6.4                h4754444_1
# zarr                      3.1.1                    pypi_0    pypi
# zlib                      1.2.13               h8cc25b3_1
import os, inspect
import json
import tkinter as tk
from tkinter import filedialog as fd
import io
from base64 import b64decode
import queue
import threading
import warnings
import sys, shutil
from ctypes import windll
import copy
from datetime import datetime
import gc
from tkinter import messagebox, colorchooser, ttk
# import ttkbootstrap as ttk
from multiprocessing import Pool, shared_memory
import time, subprocess
cdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
app_name = os.path.basename(inspect.stack()[0].filename).removesuffix('.py')
if os.name == 'nt':  # only execute on Windows OS
    cdir = cdir[0].upper() + cdir[1:]
    import ctypes
    from ctypes import wintypes
    class APPBARDATA(ctypes.Structure):
        _fields_ = [
            ('cbSize', wintypes.DWORD),
            ('hWnd', wintypes.HWND),
            ('uCallbackMessage', wintypes.UINT),
            ('uEdge', wintypes.UINT),
            ('rc', wintypes.RECT),
            ('lParam', wintypes.LPARAM),
        ]
    ABM_GETTASKBARPOS = 0x00000005
    def get_taskbar_position():
        appbar = APPBARDATA()
        appbar.cbSize = ctypes.sizeof(APPBARDATA)
        result = ctypes.windll.shell32.SHAppBarMessage(ABM_GETTASKBARPOS, ctypes.byref(appbar))
        if not result:
            return None
        edge = appbar.uEdge
        positions = {0: 'left', 1: 'top', 2: 'right', 3: 'bottom'}
        return positions.get(edge, 'unknown')
    
    bar_pos = get_taskbar_position()

elif os.name == 'posix':
    def get_dock_position():
        script = 'tell application "System Events" to get the properties of the dock preferences'
        result = subprocess.check_output(['osascript', '-e', script])
        if b'left' in result:
            return 'left'
        elif b'bottom' in result:
            return 'bottom'
        elif b'right' in result:
            return 'right'
        else:
            return 'unknown'
    bar_pos = get_dock_position()
os.chdir(cdir)
if not os.path.exists('.MDC_cut'):
    os.makedirs('.MDC_cut')
    os.system('attrib +h +s .MDC_cut')
if os.path.exists(os.path.join(cdir, '.MDC_cut', 'cut_temp_save')):
    shutil.rmtree(os.path.join(cdir, '.MDC_cut', 'cut_temp_save'))
if os.path.exists(os.path.join(cdir, '.MDC_cut', 'cube_temp_save')):
    shutil.rmtree(os.path.join(cdir, '.MDC_cut', 'cube_temp_save'))
try:
    os.chdir(os.path.join(cdir, '.MDC_cut'))
    if os.path.exists('pip_check.txt')==0:
        try:
            subprocess.check_call([sys.executable, "-m", "pip", "--version"])
            with open('pip_check.txt', 'w', encoding = 'utf-8') as f:
                f.write('pip found')
                f.close()
        except subprocess.CalledProcessError:
            try:
                if os.name == 'nt':
                    print('pip not found\nOS: Windows\nInstalling pip...')
                    os.system('python -m ensurepip')    #install pip
                    os.system('python -W ignore::SyntaxWarning -W ignore::UserWarning "'+os.path.abspath(inspect.getfile(inspect.currentframe()))+'"')  #restart the script to ensure pip works without potential errors
                elif os.name == 'posix':
                    print('pip not found\nOS: Linux or MacOS\nInstalling pip...')
                    try:    #python3 if installed
                        os.system('python3 -m ensurepip')   #install pip
                        os.system('python3 -W ignore::SyntaxWarning -W ignore::UserWarning "'+os.path.abspath(inspect.getfile(inspect.currentframe()))+'"')   #restart the script to ensure pip works without potential errors
                    except: #python2.7(default in MacOS)
                        os.system('python -m ensurepip')
                        os.system('python -W ignore::SyntaxWarning -W ignore::UserWarning "'+os.path.abspath(inspect.getfile(inspect.currentframe()))+'"')
                with open('pip_check.txt', 'w', encoding = 'utf-8') as f:
                    f.write('pip found')
                    f.close()
            except Exception as e:
                print(f"An error occurred: {e}")
            quit()  #end the current script
except:
    pass
def restart():
    if os.name == 'nt':
        os.system('python -W ignore::SyntaxWarning -W ignore::UserWarning "'+os.path.abspath(inspect.getfile(inspect.currentframe()))+'"')
    elif os.name == 'posix':
        try:
            os.system('python3 -W ignore::SyntaxWarning -W ignore::UserWarning "'+os.path.abspath(inspect.getfile(inspect.currentframe()))+'"')
        except:
            os.system('python -W ignore::SyntaxWarning -W ignore::UserWarning "'+os.path.abspath(inspect.getfile(inspect.currentframe()))+'"')
def install(s: str):
    print('\n\n"'+s+'" Module Not Found')
    a = input('pip install '+s+' ???\nProceed (Y/n)? ')
    if a.lower() == 'y':
        try:
            subprocess.check_call([sys.executable, "-m", "pip", "install", s])
        except subprocess.CalledProcessError:
            subprocess.check_call([sys.executable, "-m", "pip3", "install", s])
    else:
        quit()
try:
    import matplotlib
except ModuleNotFoundError:
    install('matplotlib')
    import matplotlib
matplotlib.use('TkAgg')
from matplotlib.colors import LinearSegmentedColormap
from matplotlib.widgets import SpanSelector
from matplotlib.widgets import RectangleSelector
import matplotlib as mpl
from matplotlib.widgets import Cursor
from matplotlib.figure import Figure
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2Tk
import matplotlib.pyplot as plt
from matplotlib.widgets import Slider
try:
    import numpy as np
except ModuleNotFoundError:
    install('numpy')
    import numpy as np
try:
    import xarray as xr
except ModuleNotFoundError:
    install('xarray')
    import xarray as xr
try:
    import h5py
except ModuleNotFoundError:
    install('h5py')
    import h5py
try:
    from PIL import Image, ImageTk
except ModuleNotFoundError:
    install('Pillow')
    restart()
    quit()
try:
    from scipy.optimize import curve_fit
    from scipy.ndimage import gaussian_filter1d
    from scipy.signal import hilbert
    from scipy.signal import savgol_filter
    from scipy.stats import mode
    from scipy.interpolate import griddata
    from scipy import special
except ModuleNotFoundError:
    install('scipy')
    from scipy.optimize import curve_fit
    from scipy.ndimage import gaussian_filter1d
    from scipy.signal import hilbert
    from scipy.signal import savgol_filter
    from scipy.stats import mode
    from scipy.interpolate import griddata
    from scipy import special
try:
    from lmfit import Parameters, Minimizer, report_fit
except ModuleNotFoundError:
    install('lmfit')
    from lmfit import Parameters, Minimizer, report_fit
from lmfit.printfuncs import *
try:
    import tqdm
except ModuleNotFoundError:
    install('tqdm')
    import tqdm
try:
    import win32clipboard
except ModuleNotFoundError:
    install('pywin32')
    restart()
    quit()
try:
    import originpro as op
except ModuleNotFoundError:
    install('originpro')
    import originpro as op
try:
    import cv2
except ModuleNotFoundError:
    install('opencv-python')
    restart()
    quit()
try:
    import cpuinfo
except ModuleNotFoundError:
    install('py-cpuinfo')
    import cpuinfo
try:
    import psutil
except ModuleNotFoundError:
    install('psutil')
    import psutil
try:
    import zarr
except ModuleNotFoundError:
    install('zarr')
    import zarr
try:
    import PyQt5
except ModuleNotFoundError:
    install('PyQt5')
    import PyQt5
try:
    import pyqtgraph
except ModuleNotFoundError:
    install('pyqtgraph')
    import pyqtgraph

if __name__ == '__main__':
    g_mem = psutil.virtual_memory().available
warnings.filterwarnings("ignore", category=UserWarning)
warnings.filterwarnings("ignore", category=RuntimeWarning)
warnings.filterwarnings("ignore", category=matplotlib.MatplotlibDeprecationWarning)
warnings.filterwarnings("ignore", category=SyntaxWarning)
h=6.62607015*10**-34
m=9.10938356*10**-31
mp, ep, mf, ef = 1, 1, 1, 1
fk = []
fev = []

def find_window():
    # Windows系統中 可能的終端機視窗名稱
    hwnd = windll.user32.FindWindowW(None, "命令提示字元")
    if not hwnd:
        hwnd = windll.user32.FindWindowW(None, "Command Prompt")
    if not hwnd:
        hwnd = windll.user32.FindWindowW(None, "cmd")
    return hwnd

def load_txt(path_to_file: str) -> xr.DataArray:    #for BiSe txt files 
#Liu, J. N., Yang, X., Xue, H., Gai, X. S., Sun, R., Li, Y., ... & Cheng, Z. H. (2023). Surface coupling in Bi2Se3 ultrathin films by screened Coulomb interaction. Nature Communications, 14(1), 4424.
    """
    Load data from a text file and convert it into an xarray DataArray.

    Parameters:
        path_to_file (str): The path to the text file.

    Returns:
        xr.DataArray: The data loaded from the text file as an xarray DataArray.
    """
    print(path_to_file)
    with open(path_to_file, 'r') as file:
        i = 0
        a = []
        e = []
        for line in file:
            if i == 1:
                a = line.split('\t')[2::]
            if i >= 2:
                e.append(line.split('\t')[1])
            i += 1
    d = np.arange(float(len(e)*len(a))).reshape(len(e), len(a))
    with open(path_to_file, 'r') as file:
        i = 0
        for line in file:
            if i >= 2:
                d[i-2][:] = line.split('\t')[2::]
                if i == 2:
                    t = line.split('\t')[2::]
            i += 1
    e_low = np.min(np.float64(e))
    e_high = np.max(np.float64(e))
    e_num = len(e)
    e_photon = 21.2
    a_low = np.min(np.float64(a))
    a_high = np.max(np.float64(a))
    a_num = len(a)
    #   attrs
    e_mode = 'Kinetic'
    LensMode = 'Unknown'
    PassEnergy = 5
    Dwell = 'Unknown'
    CenterEnergy = np.average(np.float64(e))
    Iterations = 'Unknown'
    Step = (e_high - e_low)/(e_num - 1)
    Slit = 'Unknown'
    aq = 'Unknown'
    name = os.path.basename(path_to_file).removesuffix('.txt')
    if e_mode == 'Kinetic':
        e = np.linspace(e_low, e_high, e_num)
        CenterEnergy = str(CenterEnergy)+' eV'
        e_low = str(e_low)+' eV (K.E.)'
        e_high = str(e_high)+' eV (K.E.)'
    else:
        e = np.linspace(e_photon-e_high, e_photon-e_low, e_num)
        CenterEnergy = str(CenterEnergy)+' eV'
        e_low = str(e_low)+' eV (B.E.)'
        e_high = str(e_high)+' eV (B.E.)'

    a = np.linspace(a_low, a_high, a_num)
    # data=np.arange(float(len(e)*len(a))).reshape(len(e),len(a),1)
    # data[0:,0:,0]=d
    data = np.arange(float(len(e)*len(a))).reshape(len(e), len(a))
    data[0:, 0:] = d
    data = xr.DataArray(
        data=data,
        coords={
            'eV': e,
            'phi': a
        },
        name='Spectrum',
        attrs={
            'Name': name,
            'Acquisition': aq,
            'EnergyMode': e_mode,
            'ExcitationEnergy': str(e_photon)+' eV',
            'CenterEnergy': CenterEnergy,
            'HighEnergy': e_high,
            'LowEnergy': e_low,
            'Step': str(Step)+' eV',
            'LensMode': LensMode,
            'PassEnergy': str(PassEnergy)+' meV',
            'Slit': Slit,
            'Dwell': str(Dwell)+' s',
            'Iterations': Iterations,
            'Description': 'BiSe',
            'Path': path_to_file
        }
    )
    return data

def load_txt_sk(path_to_file: str) -> xr.DataArray:    #for sklearn txt files
    """
    Args:
        path_to_file (str): File Path

    Returns:
        xr.DataArray: shape=(len(eV), len(phi))
    """
    name = os.path.basename(path_to_file).removesuffix('.txt')
    e = np.linspace(21.2-1, 21.2+0.2, 659)    #fix BE 1~-0.2
    # e = np.linspace(21.2-2, 21.2+1, 284)     #scan BE 2~-1
    a = np.linspace(-10, 10, 494)     #A20
    description='SKNET'
    e_low = str(np.min(np.float64(e)))+ ' eV (K.E.)'
    e_high = str(np.max(np.float64(e)))+ ' eV (K.E.)'
    e_photon = 21.2
    #   attrs
    e_mode = 'Kinetic'
    LensMode = 'Unknown'
    PassEnergy = 'Unknown'
    Dwell = 'Unknown'
    CenterEnergy = str(np.average(np.float64(e)))+ ' eV (K.E.)'
    Iterations = 'Unknown'
    Step = abs(e[1]-e[0])
    Slit = 'Unknown'
    aq = 'SRNET'
    data = np.loadtxt(path_to_file).transpose()*100
    data = xr.DataArray(
        data=data,
        coords={
            'eV': e,
            'phi': a
        },
        name='Spectrum',
        attrs={
            'Name': name,
            'Acquisition': aq,
            'EnergyMode': e_mode,
            'ExcitationEnergy': str(e_photon)+' eV',
            'CenterEnergy': CenterEnergy,
            'HighEnergy': e_high,
            'LowEnergy': e_low,
            'Step': str(Step)+' eV',
            'LensMode': LensMode,
            'PassEnergy': str(PassEnergy)+' eV',
            'Slit': Slit,
            'Dwell': Dwell,
            'Iterations': Iterations,
            'Description': description,
            'Path': path_to_file
        }
    )
    return data

def load_json(path_to_file: str) -> xr.DataArray:
    """
    Load data from a JSON file and convert it into an xarray DataArray.

    Parameters:
        path_to_file (str): The path to the JSON file.

    Returns:
        xr.DataArray: The data loaded from the JSON file as an xarray DataArray.
    """
    f = json.load(open(path_to_file, 'r'))
    e_low = np.array(f['Region']['LowEnergy']['Value'])
    e_high = np.array(f['Region']['HighEnergy']['Value'])
    e_num = np.array(f['Data']['XSize']['Value'])
    e_photon = np.array(f['Region']['ExcitationEnergy']['Value'])
    a_low = np.array(f['Region']['YScaleMin']['Value'])
    a_high = np.array(f['Region']['YScaleMax']['Value'])
    a_num = np.array(f['Data']['YSize']['Value'])
    #   attrs
    e_mode = f['Region']['EnergyMode']
    LensMode = f['Region']['LensMode']
    PassEnergy = f['Region']['PassEnergy']['Value']
    Dwell = f['Region']['Dwell']['Value']
    CenterEnergy = f['Region']['CenterEnergy']['Value']
    Iterations = f['Region']['Iterations']['Value']
    Step = f['Region']['Step']['Value']
    Slit = f['Region']['Slit']
    aq = f['Region']['Acquisition']
    name = f['Region']['Name']
    description = f['Region']['Description']
    if e_mode == 'Kinetic':
        e = np.linspace(e_low, e_high, e_num)
        CenterEnergy = str(CenterEnergy)+' eV'
        e_low = str(e_low)+' eV (K.E.)'
        e_high = str(e_high)+' eV (K.E.)'
    else:
        e = np.linspace(e_photon-e_high, e_photon-e_low, e_num)
        CenterEnergy = str(CenterEnergy)+' eV'
        e_low = str(e_low)+' eV (B.E.)'
        e_high = str(e_high)+' eV (B.E.)'

    a = np.linspace(a_low, a_high, a_num)
    d = np.array(f['Spectrum']).transpose()
    # data=np.arange(float(len(e)*len(a))).reshape(len(e),len(a),1)
    # data[0:,0:,0]=d
    data = np.arange(float(len(e)*len(a))).reshape(len(e), len(a))
    data[0:, 0:] = d
    data = xr.DataArray(
        data=data,
        coords={
            'eV': e,
            'phi': a
        },
        name='Spectrum',
        attrs={
            'Name': name,
            'Acquisition': aq,
            'EnergyMode': e_mode,
            'ExcitationEnergy': str(e_photon)+' eV',
            'CenterEnergy': CenterEnergy,
            'HighEnergy': e_high,
            'LowEnergy': e_low,
            'Step': str(Step)+' eV',
            'LensMode': LensMode,
            'PassEnergy': str(PassEnergy)+' eV',
            'Slit': Slit,
            'Dwell': str(Dwell)+' s',
            'Iterations': Iterations,
            'Description': description,
            'Path': path_to_file
        }
    )
    return data

cec = None
f_npz = 0
def load_h5(path_to_file: str) -> xr.DataArray:
    """
    Load data from an HDF5 file and return it as a DataArray.

    Parameters:
        path_to_file (str): The path to the HDF5 file.

    Returns:
        xr.DataArray: The loaded data as a DataArray.

    """
    f = h5py.File(path_to_file, 'r')
    e_low = np.array(f.get('Region').get('LowEnergy').get('Value'))[0]
    e_high = np.array(f.get('Region').get('HighEnergy').get('Value'))[0]
    e_num = np.array(f.get('Data').get('XSize').get('Value'))[0]
    e_photon = np.array(f.get('Region').get(
        'ExcitationEnergy').get('Value'))[0]
    a_low = np.array(f.get('Region').get('YScaleMin').get('Value'))[0]
    a_high = np.array(f.get('Region').get('YScaleMax').get('Value'))[0]
    a_num = np.array(f.get('Data').get('YSize').get('Value'))[0]
    #   attrs
    t_e_mode = np.array(f.get('Region').get('EnergyMode'), dtype=str)
    t_LensMode = np.array(f.get('Region').get('LensMode'), dtype=str)
    PassEnergy = np.array(f.get('Region').get(
        'PassEnergy').get('Value'), dtype=str)[0]
    Dwell = np.array(f.get('Region').get('Dwell').get('Value'), dtype=str)[0]
    CenterEnergy = np.array(f.get('Region').get(
        'CenterEnergy').get('Value'), dtype=str)[0]
    Iterations = np.array(f.get('Region').get(
        'Iterations').get('Value'), dtype=str)[0]
    Step = np.array(f.get('Region').get('Step').get('Value'), dtype=str)[0]
    t_Slit = np.array(f.get('Region').get('Slit'), dtype=str)
    t_aq = np.array(f.get('Region').get('Acquisition'), dtype=str)
    try:
        flag = np.array(f.get('Region').get('Name'), dtype=str)[1]
        t_name = np.array(f.get('Region').get('Name'), dtype=str)
    except:        
        t_name = np.array(f.get('Region').get('Name'), dtype='S')  # Read as bytes
        t_name = t_name.tobytes().decode('utf-8')   # Convert to string
    try:
        flag = np.array(f.get('Region').get('Description'), dtype=str)[1]
        t_description = np.array(f.get('Region').get('Description'), dtype=str)
    except:
        t_description = np.array(f.get('Region').get('Description'), dtype='S')  # Read as bytes
        t_description = t_description.tobytes().decode('utf-8')   # Convert to string
    try:
        flag = np.array(f.get('Region').get('EnergyMode'), dtype=str)[1]
        t_e_mode = np.array(f.get('Region').get('EnergyMode'), dtype=str)
        t_LensMode = np.array(f.get('Region').get('LensMode'), dtype=str)
        t_Slit = np.array(f.get('Region').get('Slit'), dtype=str)
        t_aq = np.array(f.get('Region').get('Acquisition'), dtype=str)
    except:
        flag = 'pass_byte'
        t_e_mode = np.array(f.get('Region').get('EnergyMode'), dtype='S')  # Read as bytes
        t_e_mode = t_e_mode.tobytes().decode('utf-8')   # Convert to string
        t_LensMode = np.array(f.get('Region').get('LensMode'), dtype='S')  # Read as bytes
        t_LensMode = t_LensMode.tobytes().decode('utf-8')   # Convert to string
        t_Slit = np.array(f.get('Region').get('Slit'), dtype='S')  # Read as bytes
        t_Slit = t_Slit.tobytes().decode('utf-8')   # Convert to string
        t_aq = np.array(f.get('Region').get('Acquisition'), dtype='S')  # Read as bytes
        t_aq = t_aq.tobytes().decode('utf-8')   # Convert to string        
        
    e_mode = ''
    LensMode = ''
    Slit = ''
    aq = ''
    name = ''
    description = ''
    if flag != 'pass_byte':
        for i in range(60):  # proper length long enough
            e_mode += t_e_mode[i]
            LensMode += t_LensMode[i]
            Slit += t_Slit[i]
            aq += t_aq[i]
    else:
        e_mode = t_e_mode
        LensMode = t_LensMode
        Slit = t_Slit
        aq = t_aq
    for i in range(600):
        try:
            name += t_name[i]
        except:
            pass
        try:
            description += t_description[i]
        except:
            pass
    if e_mode == 'Kinetic':
        e = np.linspace(e_low, e_high, e_num)
        CenterEnergy = str(CenterEnergy)+' eV'
        e_low = str(e_low)+' eV (K.E.)'
        e_high = str(e_high)+' eV (K.E.)'
    else:
        e = np.linspace(e_photon-e_high, e_photon-e_low, e_num)
        CenterEnergy = str(CenterEnergy)+' eV'
        e_low = str(e_low)+' eV (B.E.)'
        e_high = str(e_high)+' eV (B.E.)'
    if aq == 'VolumeSlicer':
        global f_npz
        tlf_path = np.array(f.get('VolumeSlicer').get('path'), dtype='S')
        lf_path = [i.tobytes().decode('utf-8') for i in tlf_path]
        try:
            try:    #load path that saved in npz
                tbasename = os.path.basename(lf_path[0])
                if '.h5' in tbasename:
                    td=load_h5(lf_path[0])
                elif '.json' in tbasename:
                    td=load_json(lf_path[0])
                elif '.txt' in tbasename:
                    td=load_txt(lf_path[0])
            except: #try load file in the same folder as npz
                td = None
                tlfpath = []
                for i in lf_path:
                    tbasename = os.path.basename(i)
                    tpath = os.path.normpath(os.path.join(os.path.dirname(path_to_file), tbasename))
                    tlfpath.append(tpath)
                    try:
                        if '.h5' in tbasename:
                            td=load_h5(tpath)
                        elif '.json' in tbasename:
                            td=load_json(tpath)
                        elif '.txt' in tbasename:
                            td=load_txt(tpath)
                    except:
                        pass
            PassEnergy = td.attrs['PassEnergy']
            Dwell = td.attrs['Dwell']
            Iterations = td.attrs['Iterations']
            Slit = td.attrs['Slit']
            if __name__ == '__main__':
                if f_npz==0:
                    f_npz+=1
                    angle = np.array(f.get('VolumeSlicer').get('angle'))[0]
                    cx = np.array(f.get('VolumeSlicer').get('cx'))[0]
                    cy = np.array(f.get('VolumeSlicer').get('cy'))[0]
                    cdx = np.array(f.get('VolumeSlicer').get('cdx'))[0]
                    cdy = np.array(f.get('VolumeSlicer').get('cdy'))[0]
                    phi_offset = np.array(f.get('VolumeSlicer').get('phi_offset'))[0]
                    r1_offset = np.array(f.get('VolumeSlicer').get('r1_offset'))[0]
                    phi1_offset = np.array(f.get('VolumeSlicer').get('phi1_offset'))[0]
                    r11_offset = np.array(f.get('VolumeSlicer').get('r11_offset'))[0]
                    slim = np.array(f.get('VolumeSlicer').get('slim'))[0]
                    try:
                        '''
                        After 6.0 version, the symmetry information is added to attributes
                        '''
                        sym = np.array(f.get('VolumeSlicer').get('sym'))[0]
                    except:
                        sym = 1
                        pass
                    global cec
                    try:
                        cec=CEC(g, lf_path, mode='load')
                        cec.load(angle, cx, cy, cdx, cdy, phi_offset, r1_offset, phi1_offset, r11_offset, slim, sym, name, path_to_file)
                    except:
                        cec=CEC(g, tlfpath, mode='load')
                        cec.load(angle, cx, cy, cdx, cdy, phi_offset, r1_offset, phi1_offset, r11_offset, slim, sym, name, path_to_file)
        except Exception as ecp:
            if __name__ == '__main__':
                if f_npz==0:
                    f_npz+=1
                    # hwnd = find_window()
                    if hwnd:
                        windll.user32.ShowWindow(hwnd, 9)
                        windll.user32.SetForegroundWindow(hwnd)
                    print(f"An error occurred: {ecp}")
                    print('\033[31mPath not found:\033[34m')
                    print(lf_path)
                    print('\033[31mPlace all the raw data files listed above in the same folder as the NPZ file\nif you want to view the slicing geometry or just ignore this message if you do not need the slicing geometry.\033[0m')
                    message = f"Path not found:\n{lf_path}\nPlace all the raw data files listed above in the same folder as the NPZ file if you want to view the slicing geometry\nor just ignore this message if you do not need the slicing geometry."
                    messagebox.showwarning("Warning", message)
    
    a = np.linspace(a_low, a_high, a_num)
    d = np.array(f.get('Spectrum')).transpose()
    # data=np.arange(float(len(e)*len(a))).reshape(len(e),len(a),1)
    # data[0:,0:,0]=d
    data = np.arange(float(len(e)*len(a))).reshape(len(e), len(a))
    if flag != 'pass_byte':
        data[0:, 0:] = d
    else:
        Dwell = Dwell.removesuffix(' s')
        PassEnergy = PassEnergy.removesuffix(' eV')
        data[0:, 0:] = d.T
    data = xr.DataArray(
        data=data,
        coords={
            'eV': e,
            'phi': a
        },
        name='Spectrum',
        attrs={
            'Name': name,
            'Acquisition': aq,
            'EnergyMode': e_mode,
            'ExcitationEnergy': str(e_photon)+' eV',
            'CenterEnergy': CenterEnergy,
            'HighEnergy': e_high,
            'LowEnergy': e_low,
            'Step': str(Step)+' eV',
            'LensMode': LensMode,
            'PassEnergy': str(PassEnergy)+' eV',
            'Slit': Slit,
            'Dwell': str(Dwell)+' s',
            'Iterations': Iterations,
            'Description': description,
            'Path': path_to_file
        }
    )
    return data

def load_npz(path_to_file: str) -> xr.DataArray:
    """
    Load data from a NumPy NPZ file and convert it into an xarray DataArray.
    
    Parameters:
        path_to_file (str): The path to the NPZ file.
        
    Returns:
        xr.DataArray: The data loaded from the NPZ file as an xarray DataArray.
    """
    global f_npz
    f = np.load(path_to_file)
    lf_path = f['path']
    try:
        try:    #load path that saved in npz
            tbasename = os.path.basename(lf_path[0])
            if '.h5' in tbasename:
                td=load_h5(lf_path[0])
            elif '.json' in tbasename:
                td=load_json(lf_path[0])
            elif '.txt' in tbasename:
                td=load_txt(lf_path[0])
        except: #try load file in the same folder as npz
            td = None
            tlfpath = []
            for i in lf_path:
                tbasename = os.path.basename(i)
                tpath = os.path.normpath(os.path.join(os.path.dirname(path_to_file), tbasename))
                tlfpath.append(tpath)
                try:
                    if '.h5' in tbasename:
                        td=load_h5(tpath)
                    elif '.json' in tbasename:
                        td=load_json(tpath)
                    elif '.txt' in tbasename:
                        td=load_txt(tpath)
                except:
                    pass
        Name = os.path.basename(path_to_file).split('.npz')[0]
        PassEnergy = td.attrs['PassEnergy']
        Dwell = td.attrs['Dwell']
        Iterations = td.attrs['Iterations']
        Slit = td.attrs['Slit']
        if __name__ == '__main__':
            if f_npz==0:
                f_npz+=1
                angle = f['angle']
                cx = f['cx']
                cy = f['cy']
                cdx = f['cdx']
                cdy = f['cdy']
                phi_offset = f['phi_offset']
                r1_offset = f['r1_offset']
                phi1_offset = f['phi1_offset']
                r11_offset = f['r11_offset']
                slim = f['slim']
                try:
                    '''
                    After 6.0 version, the symmetry information is added to attributes
                    '''
                    sym = f['sym']
                except:
                    sym = 1
                    pass
                global cec
                try:
                    cec=CEC(g, lf_path, mode='load')
                    cec.load(angle, cx, cy, cdx, cdy, phi_offset, r1_offset, phi1_offset, r11_offset, slim, sym, Name, path_to_file)
                except:
                    cec=CEC(g, tlfpath, mode='load')
                    cec.load(angle, cx, cy, cdx, cdy, phi_offset, r1_offset, phi1_offset, r11_offset, slim, sym, Name, path_to_file)
    except Exception as e:
        if __name__ == '__main__':
            if f_npz==0:
                f_npz+=1
                # hwnd = find_window()
                if hwnd:
                    windll.user32.ShowWindow(hwnd, 9)
                    windll.user32.SetForegroundWindow(hwnd)
                print(f"An error occurred: {e}")
                print('\033[31mPath not found:\033[34m')
                print(lf_path)
                print('\033[31mPlace all the raw data files listed above in the same folder as the NPZ file\nif you want to view the slicing geometry or just ignore this message if you do not need the slicing geometry.\033[0m')
                message = f"Path not found:\n{lf_path}\nPlace all the raw data files listed above in the same folder as the NPZ file if you want to view the slicing geometry\nor just ignore this message if you do not need the slicing geometry."
                messagebox.showwarning("Warning", message)
        PassEnergy = 'Unknown'
        Dwell = 'Unknown'
        Iterations = 'Unknown'
        Slit = 'Unknown'
    data = f['data']
    k = f['x']
    ev = f['y']
    ExcitationEnergy = f['e_photon']
    desc = f['desc'][0]
    data = xr.DataArray(
        data=data,
        coords={
            'eV': ev,
            'phi': k
        },
        name='Spectrum',
        attrs={
            'Name': Name,
            'Acquisition': 'VolumeSlicer',
            'EnergyMode': 'Kinetic',
            'ExcitationEnergy': str(ExcitationEnergy)+' eV',
            'CenterEnergy': '%.3f'%((ev[0]+ev[-1])/2)+' eV',
            'HighEnergy': str(ev[-1])+' eV (K.E.)',
            'LowEnergy': str(ev[0])+' eV (K.E.)',
            'Step': str(ev[1]-ev[0])+' eV',
            'LensMode': 'Angular',
            'PassEnergy': PassEnergy,
            'Slit': Slit,
            'Dwell': Dwell,
            'Iterations': Iterations,
            'Description': desc,
            'Path': path_to_file
        }
    )
    return data

def g_emode():
    global gfe,fe_in,b_emode,emf,v_fe
    gfe=RestrictedToplevel(g,bg='white')
    gfe.title('Fermi Level')
    fr=tk.Frame(gfe,bg='white')
    fr.grid(row=0,column=0)
    l_in = tk.Label(fr, text='Fermi Level (eV) : ', font=('Arial', size(16), "bold"), bg='white')
    l_in.grid(row=0,column=0)
    fe_in = tk.Entry(fr, font=("Arial", size(16), "bold"), width=10, textvariable=v_fe, bd=5)
    fe_in.grid(row=0,column=1)
    fr1 = tk.Frame(gfe,bg='white')
    fr1.grid(row=1,column=0)
    b1=tk.Button(fr1,text='Confirm',command=save_fe, width=15, height=1, font=('Arial', size(14), "bold"), bg='white', bd=5)
    b1.grid(row=1,column=0)
    gfe.bind('<Return>', on_enter)
    set_center(g, gfe, 0, 0)
    gfe.focus_set()
    fe_in.focus_set()
    fe_in.icursor(tk.END)
    gfe.update()
    gfe.limit_bind()

def emode():
    global gfe,fe_in,b_emode,emf,v_fe,mfpr
    if 'gfe' in globals():
        gfe.destroy()
    mfpr=0
    if emf=='KE':
        emf='BE'
        b_emode.config(text='B.E.')
        g_emode()
    else:
        emf='KE'
        b_emode.config(text='K.E.')
        g_emode()

def save_fe():
    global gfe,fe_in,vfe
    try:
        vfe=float(fe_in.get())
        gfe.destroy()
        plot1()
        plot2()
        plot3()
    except:
        tk.messagebox.showwarning("Warning","Invalid Input\n"+str(sys.exc_info()[1]))
        gfe.destroy()
        g_emode()

def on_enter(event):
    save_fe()

def patch_origin():
    threading.Thread(target=f_patch_origin,daemon=True).start()

def f_patch_origin():
    limg.config(image=img[np.random.randint(len(img))])
########################### patching ############################
    print('Patching OriginPro...')
    st.put('Patching OriginPro...')
    exe=rf"\Origin.exe" # OriginPro Patching file
    cmd=f'start "" cmd /C "dir "{exe}" /s"'
    result = os.popen(cmd) # 返回的結果是一個<class 'os._wrap_close'>對象，需要讀取後才能處理
    context = result.read()
    for line in context.splitlines():
        if '的目錄' in line or 'Directory of' in line:
            path = line.removeprefix('Directory of ')
            path = line.removesuffix(' 的目錄')
            # print(line)
            # print(path)
            path = path.removeprefix(" ")
            path = rf"{path}"
            path = rf"{path}{exe}"
            if path.split(os.sep)[-2] != 'Crack':
                ori_temp_path = path.removesuffix(os.sep+path.split(os.sep)[-1])
                print('Origin Path: '+ori_temp_path)
                os.system(f"\"{path}\"")
    result.close()
    print('Patching OriginPro...Done')
    st.put('Patching OriginPro...Done')
########################### patching ############################

def pre_process(input):
        return str(input).replace(' ',', ').replace(', , , , ,',',').replace(', , , ,',',').replace(', , ,',',').replace(', ,',',').replace('[, ','[').replace(', ]',']')

def gui_exp_origin(*e):
    global gori,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11
    limg.config(image=img[np.random.randint(len(img))])
    if 'gori' in globals():
        gori.destroy()
    gori=RestrictedToplevel(g,bg='white')
    gori.title('Export to Origin')
    l1=tk.Label(gori,text=f"{dpath.removesuffix('.h5').removesuffix('.json').removesuffix('.txt')}.opj",font=('Arial', size(10), "bold"),bg='white',wraplength=600)
    l1.grid(row=0,column=0)
    b1=tk.Button(gori,text='Patch Origin',command=patch_origin, width=15, height=1, font=('Arial', size(18), "bold"), bg='white', bd=5)
    # b1.grid(row=1,column=0)
    fr=tk.Frame(gori,bg='white')
    fr.grid(row=2,column=0)
    pr_exp_origin()
    v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11=tk.IntVar(),tk.IntVar(),tk.IntVar(),tk.IntVar(),tk.IntVar(),tk.IntVar(),tk.IntVar(),tk.IntVar(),tk.IntVar(),tk.IntVar(),tk.IntVar()
    c1=tk.Checkbutton(fr,text='E-Phi (Raw Data)',variable=v1,font=('Arial', size(18), "bold"),bg='white')
    if npzf:c1.config(text='E-k (Sliced Data)')
    c1.grid(row=0,column=0,sticky='w')
    c2=tk.Checkbutton(fr,text='E-k (Processed Data)',variable=v2,font=('Arial', size(18), "bold"),bg='white')
    c2.grid(row=1,column=0,sticky='w')
    c3=tk.Checkbutton(fr,text='MDC Fit Position',variable=v3,font=('Arial', size(18), "bold"),bg='white')
    c3.grid(row=2,column=0,sticky='w')
    c4=tk.Checkbutton(fr,text='MDC Fit FWHM',variable=v4,font=('Arial', size(18), "bold"),bg='white')
    c4.grid(row=3,column=0,sticky='w')
    c5=tk.Checkbutton(fr,text='EDC Fit Position',variable=v5,font=('Arial', size(18), "bold"),bg='white')
    c5.grid(row=4,column=0,sticky='w')
    c6=tk.Checkbutton(fr,text='EDC Fit FWHM',variable=v6,font=('Arial', size(18), "bold"),bg='white')
    c6.grid(row=5,column=0,sticky='w')
    c7=tk.Checkbutton(fr,text='Self Energy Real Part',variable=v7,font=('Arial', size(18), "bold"),bg='white')
    c7.grid(row=6,column=0,sticky='w')
    c8=tk.Checkbutton(fr,text='Self Energy Imaginary Part',variable=v8,font=('Arial', size(18), "bold"),bg='white')
    c8.grid(row=7,column=0,sticky='w')
    c9=tk.Checkbutton(fr,text='Data plot with pos',variable=v9,font=('Arial', size(18), "bold"),bg='white')
    c9.grid(row=8,column=0,sticky='w')
    c10=tk.Checkbutton(fr,text='Data plot with pos & bare band',variable=v10,font=('Arial', size(18), "bold"),bg='white')
    c10.grid(row=9,column=0,sticky='w')
    c11=tk.Checkbutton(fr,text='Second Derivative',variable=v11,font=('Arial', size(18), "bold"),bg='white')
    c11.grid(row=10,column=0,sticky='w')
    b2=tk.Button(fr,text='Export',command=exp_origin, width=15, height=1, font=('Arial', size(18), "bold"), bg='white', bd=5)
    b2.grid(row=11,column=0)
    cl=[c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11]
    for i in range(len(cl)):
        if i in no:
            cl[i].deselect()
            cl[i].config(state='disabled')
        else:
            cl[i].config(state='normal')
            cl[i].select()
    if npzf:
        c2.deselect()
        c2.config(state='disabled')
    gori.bind('<Return>', exp_origin)
    set_center(g, gori, 0, 0)
    gori.focus_set()
    gori.limit_bind()
    
def pr_exp_origin():
    global cmdlist, no
    ex_raw,ex_ek,ex_mp,ex_mf,ex_ep,ex_ef,ex_ser,ex_sei,ex_dpp,ex_dppbb,ex_sd='','','','','','','','','','',''
    cmdlist=dict({0:f'{ex_raw}',1:f'{ex_ek}',2:f'{ex_mp}',3:f'{ex_mf}',4:f'{ex_ep}',5:f'{ex_ef}',6:f'{ex_ser}',7:f'{ex_sei}',8:f'{ex_dpp}',9:f'{ex_dppbb}',10:f'{ex_sd}'})
    no=[]
    try:
        cmdlist[0]=f'''plot2d()\n'''
    except:
        no.append(0)
    try:
        cmdlist[1]=f'''plot2d(title='E-k (Processed Data)')\n'''
    except:
        no.append(1)
    try:
        ophi = np.arcsin(rpos/(2*m*fev*1.602176634*10**-19)**0.5 /
                        10**-10*(h/2/np.pi))*180/np.pi
        pos = (2*m*fev*1.602176634*10**-19)**0.5 * \
            np.sin((np.float64(k_offset.get())+ophi)/180*np.pi)*10**-10/(h/2/np.pi)
        cmdlist[2]=rf'''plot1d(x={pre_process((vfe-fev)*1000)}, y1={pre_process(pos)}, title='MDC Fit Position', xlabel='Binding Energy', ylabel='k', xunit='meV', yunit=r"2\g(p)Å\+(-1)")
'''
    except:
        no.append(2)
    try:
        cmdlist[3]=rf'''plot1d(x={pre_process((vfe-fev)*1000)}, y1={pre_process(fwhm)}, title='MDC Fit FWHM', xlabel='Binding Energy', ylabel='k', xunit='meV', yunit=r"2\g(p)Å\+(-1)")
'''
    except:
        no.append(3)
    try:
        cmdlist[4]=rf'''plot1d(x={pre_process(fk)}, y1={pre_process((vfe-epos)*1000)}, title='EDC Fit Position', xlabel='k', ylabel='Binding Energy', xunit=r"2\g(p)Å\+(-1)", yunit='meV')
'''
    except:
        no.append(4)
    try:
        cmdlist[5]=rf'''plot1d(x={pre_process(fk)}, y1={pre_process(efwhm)}, title='EDC Fit FWHM', xlabel='k', ylabel='Binding Energy', xunit=r"2\g(p)Å\+(-1)", yunit='meV')
'''
    except:
        no.append(5)
    try:
        ophi = np.arcsin(rpos/(2*m*fev*1.602176634*10**-19)**0.5 /
                        10**-10*(h/2/np.pi))*180/np.pi
        pos = (2*m*fev*1.602176634*10**-19)**0.5 * \
            np.sin((np.float64(k_offset.get())+ophi)/180*np.pi)*10**-10/(h/2/np.pi)
        x = (vfe-fev)*1000
        y = pos
        yy = interp(pos, k*np.float64(bbk_offset.get()), be -
                    # interp x into be,k set
                    np.float64(bb_offset.get()))
        x = (vfe-fev)*1000
        rx = x
        ry = -(x+yy)
        tbe = (vfe-fev)*1000
        x = interp(tbe, -be+np.float64(bb_offset.get()),
                    k*np.float64(bbk_offset.get()))
        y = interp(x, k*np.float64(bbk_offset.get()),
                    -be+np.float64(bb_offset.get()))
        xx = np.diff(x)
        yy = np.diff(y)

        # eliminate vf in gap
        for i in range(len(yy)):
            if yy[i]/xx[i] > 20000:
                yy[i] = 0
        v = yy/xx
        # v = np.append(v, v[-1])  # fermi velocity
        v=interp(pos,x[0:-1]+xx/2,v)
        yy = np.abs(v*fwhm/2)
        xx = tbe

        ix = xx
        iy = yy
        ix=(tbe-tbe[-1])*-1
        cix=np.append(ix+ix[0],ix)
        tix=cix[0:len(cix)-1]*-1
        # kx=ix
        kx = np.append(cix,tix[::-1])
        ky = np.linspace(0, 1, len(kx))
        ciy=np.append(iy*0+np.mean(iy),iy)
        tiy=ciy[0:len(ciy)-1]
        ciy = np.append(ciy,tiy[::-1])

        #for imaginary part
        ix=(tbe-tbe[-1])*-1
        cix=np.append(ix+ix[0],ix)
        tix=cix[0:len(cix)-1]*-1
        kx = np.append(cix,tix[::-1])
        ky = np.linspace(0, 1, len(kx))
        cry=np.append(ry*0,ry)
        tcry=cry[0:len(cry)-1]*-1
        cry = np.append(cry,tcry[::-1])

        # Hilbert transform
        analytic_signal_r = hilbert(cry)
        analytic_signal_i = hilbert(ciy)
        # Reconstructed real and imaginary parts
        reconstructed_real = np.imag(analytic_signal_i)
        reconstructed_imag = -np.imag(analytic_signal_r)
        cmdlist[6]=rf'''plot1d(x={pre_process((vfe-fev)*1000)}, y1={pre_process(-1*((vfe-fev)*1000+interp(pos, k*np.float64(bbk_offset.get()), be - np.float64(bb_offset.get()))))}, y2={pre_process(reconstructed_real[len(ix):2*len(ix)]+(ry-np.mean(reconstructed_real[len(ix):2*len(ix)])))}, title='Self Energy Real Part', xlabel='Binding Energy', ylabel=r"Re \g(S)", ylabel1=r"Re \g(S)", ylabel2=r"Re \g(S)\-(KK)=KK(Im \g(S))", xunit='meV', yunit='meV')
'''
    except:
        no.append(6)
    try:
        ophi = np.arcsin(rpos/(2*m*fev*1.602176634*10**-19)**0.5 /
                        10**-10*(h/2/np.pi))*180/np.pi
        pos = (2*m*fev*1.602176634*10**-19)**0.5 * \
            np.sin((np.float64(k_offset.get())+ophi)/180*np.pi)*10**-10/(h/2/np.pi)
        x = (vfe-fev)*1000
        y = pos
        yy = interp(pos, k*np.float64(bbk_offset.get()), be -
                    # interp x into be,k set
                    np.float64(bb_offset.get()))
        x = (vfe-fev)*1000
        rx = x
        ry = -(x+yy)
        tbe = (vfe-fev)*1000
        x = interp(tbe, -be+np.float64(bb_offset.get()),
                    k*np.float64(bbk_offset.get()))
        y = interp(x, k*np.float64(bbk_offset.get()),
                    -be+np.float64(bb_offset.get()))
        xx = np.diff(x)
        yy = np.diff(y)

        # eliminate vf in gap
        for i in range(len(yy)):
            if yy[i]/xx[i] > 20000:
                yy[i] = 0
        v = yy/xx
        # v = np.append(v, v[-1])  # fermi velocity
        v=interp(pos,x[0:-1]+xx/2,v)
        yy = np.abs(v*fwhm/2)
        xx = tbe

        ix = xx
        iy = yy
        ix=(tbe-tbe[-1])*-1
        cix=np.append(ix+ix[0],ix)
        tix=cix[0:len(cix)-1]*-1
        # kx=ix
        kx = np.append(cix,tix[::-1])
        ky = np.linspace(0, 1, len(kx))
        ciy=np.append(iy*0+np.mean(iy),iy)
        tiy=ciy[0:len(ciy)-1]
        ciy = np.append(ciy,tiy[::-1])

        #for imaginary part
        ix=(tbe-tbe[-1])*-1
        cix=np.append(ix+ix[0],ix)
        tix=cix[0:len(cix)-1]*-1
        kx = np.append(cix,tix[::-1])
        ky = np.linspace(0, 1, len(kx))
        cry=np.append(ry*0,ry)
        tcry=cry[0:len(cry)-1]*-1
        cry = np.append(cry,tcry[::-1])

        # Hilbert transform
        analytic_signal_r = hilbert(cry)
        analytic_signal_i = hilbert(ciy)
        # Reconstructed real and imaginary parts
        reconstructed_real = np.imag(analytic_signal_i)
        reconstructed_imag = -np.imag(analytic_signal_r)
        cmdlist[7]=rf'''plot1d(x={pre_process((vfe-fev)*1000)}, y1={pre_process(iy)}, y2={pre_process(reconstructed_imag[len(ix):2*len(ix)]+(iy-np.mean(reconstructed_imag[len(ix):2*len(ix)])))}, title='Self Energy Imaginary Part', xlabel='Binding Energy', ylabel=r"Im \g(S)", ylabel1=r"Im \g(S)", ylabel2=r"Im \g(S)\-(KK)=KK(Re \g(S))", xunit='meV', yunit='meV')
'''
    except:
        no.append(7)
    try:
        x1 = pos
        if emf=='KE':
            y1=np.float64(fev)
        else:
            y1= vfe-np.float64(fev)
        cmdlist[8]=f'''plot2d(title='Data plot with pos')\n'''
    except:
        no.append(8)
    try:
        x2 = k*float(bbk_offset.get())
        if emf=='KE':
            y2 = (be - float(bb_offset.get()))/1000+vfe
        else:
            y2 = (-be + float(bb_offset.get()))/1000
        cmdlist[9]=f'''plot2d(title='Data plot with pos & bare band')\n'''
    except:
        no.append(9)
    try:
        cmdlist[10]=f'''plot2d(title='Second Derivative (Processed Data)')\n'''
    except:
        no.append(10)
        
def exp_origin(*e):
    origin_temp_var = f'''from {app_name} import *

npzf = {npzf}
dpath = r"{dpath}"      # Data Path
emf = r"{emf}"             # Energy Mode: KE or BE
ko = {k_offset.get()}
bbo = {bb_offset.get()}
bbk = {bbk_offset.get()}
vfe = {vfe}
im_kernel = {im_kernel}     # Gaussian Filter Kernel Size
nan = np.nan
'''
    try:
        origin_temp_var += f'''
bpath = r"{bpath}"         # Bare Band Path
be = np.float64({pre_process(be)})
k = np.float64({pre_process(k)})
'''
    except:
        origin_temp_var += f'''
bpath = None
'''
    try:
        ophi = np.arcsin(rpos/(2*m*fev*1.602176634*10**-19)**0.5 /
                        10**-10*(h/2/np.pi))*180/np.pi
        pos = (2*m*fev*1.602176634*10**-19)**0.5 * \
            np.sin((np.float64(k_offset.get())+ophi)/180*np.pi)*10**-10/(h/2/np.pi)
        origin_temp_var += f'''
fev = np.float64({pre_process(np.asarray(fev, dtype=np.float64))})
pos = np.float64({pre_process(np.asarray(pos, dtype=np.float64))})
fwhm = np.float64({pre_process(np.asarray(fwhm, dtype=np.float64))})
'''
    except: pass
    try:
        ffphi = np.float64(k_offset.get())+fphi
        fk = (2*m*epos*1.602176634*10**-19)**0.5 * \
            np.sin(ffphi/180*np.pi)*10**-10/(h/2/np.pi)
        origin_temp_var += f'''
fk = np.float64({pre_process(np.asarray(fk, dtype=np.float64))})
epos = np.float64({pre_process(np.asarray(epos, dtype=np.float64))})
efwhm = np.float64({pre_process(np.asarray(efwhm, dtype=np.float64))})
'''
    except: pass
    if '.h5' in os.path.basename(dpath):
        tload = f'''
data = load_h5(dpath)        
'''
    elif '.json' in os.path.basename(dpath):
        tload = f'''
data = load_json(dpath)
'''
    elif '.txt' in os.path.basename(dpath):
        tload = f'''
data = load_txt(dpath)
'''
    elif '.npz' in os.path.basename(dpath):
        tload = f'''
data = load_npz(dpath)
'''
    origin_temp_var += tload
    origin_temp_var += f'''
dvalue = list(data.attrs.values())
dkey = list(data.attrs.keys())
ev, phi = data.indexes.values()
ev, phi = np.float64(ev), np.float64(phi)

if emf=='KE':
    le_mode='Kinetic Energy'
    tx, ty = np.meshgrid(phi, ev)
    tev = ty.copy()
else:
    le_mode='Binding Energy'
    tx, ty = np.meshgrid(phi, vfe-ev)
    tev = vfe-ty.copy()
tz = data.to_numpy()
sdz = laplacian_filter(data.to_numpy(), im_kernel)
'''
    origin_temp_exec = r'''
op.new()
op.set_show(True)

'''
    origin_temp_save = r'''
note()
save()
'''
    cl=[v1.get(),v2.get(),v3.get(),v4.get(),v5.get(),v6.get(),v7.get(),v8.get(),v9.get(),v10.get(),v11.get()]
    gori.destroy()
    for i in cmdlist.keys():
        if cl[i]==1:
            origin_temp_exec+=cmdlist[i]
        
    with open(cdir+os.sep+'origin_temp.py', 'w', encoding='utf-8') as f:
        f.write(origin_temp_var+origin_temp_func+origin_temp_exec+origin_temp_save)
    f.close()
    def j():
        # os.system(f'code {cdir+r"\origin_temp.py"}')
        limg.config(image=img[np.random.randint(len(img))])
        print('Exporting to Origin...')
        st.put('Exporting to Origin...')
        temp=os.sep+"origin_temp.py"
        os.system(f'python -W ignore::SyntaxWarning -W ignore::UserWarning "{cdir+temp}"')
        os.system(f'del "{cdir+temp}"')
        limg.config(image=img[np.random.randint(len(img))])
        print('Exported to Origin')
        st.put('Exported to Origin')
    threading.Thread(target=j,daemon=True).start()

def new():
    global le_mode
    op.new()
    op.set_show(True)
    dvalue = list(data.attrs.values())
    dkey = list(data.attrs.keys())

    if emf=='KE':
        le_mode='Kinetic Energy'
    else:
        le_mode='Binding Energy'
    ko = k_offset.get()
    bbo = bb_offset.get()
    bbk = bbk_offset.get()
    nt=op.new_notes('Data Info')
    nt.syntax = 0   # Markdown; 0(Normal Text), 1(HTML), 2(Markdown), 3(Origin Rich Text)
    nt.view = 0    # Render Mode; 0(Text Mode), 1(Render Mode)
    nt.append(f'Region')
    nt.append(f'        File Path: {dpath}')
    for i in range(len(dkey)):
        if dkey[i] != 'Description':
            if dkey[i] == 'Path':
                pass
            else:
                nt.append(f'        {dkey[i]}: {dvalue[i]}')
        else:
            for j,k in enumerate(dvalue[i].split('\n')):
                if j == 0:
                    nt.append(f'        {dkey[i]}:')
                    nt.append(f'                {k}')
                else:
                    nt.append(f'                {k}')
    nt.append(f'\nParameters\n'+\
        f'        Energy Mode: {le_mode}\n'+\
        f'        Fermi Energy: {vfe} eV\n'+\
        f'        k offset: {ko} deg\n')
    if bpath != '':
        nt.append(f'        Bare Band Path: {bpath}\n'+\
            f'        Bare Band Offset: {bbo} meV\n'+\
            f'        Bare Band k Ratio: {bbk}\n')
    else:
        nt.append(f'        Bare Band Path: None\n')

def plot2d(x=[1,2,3], y=[1,2,3], z=[1,2,3], title='E-Phi (Raw Data)', xlabel=r"\g(f)", ylabel='Kinetic Energy', zlabel='Intensity', xunit="deg", yunit='eV', zunit='Counts'):
    if xlabel=='k':
        xunit=r"2\g(p)Å\+(-1)"
    # create a new book
    wb = op.new_book('w',title)
    # access the first sheet
    sheet = wb[0]
    # add data to the sheet
    sheet.from_list(0, x, lname=xlabel, units=xunit, axis='X')     #col, data, lname='', units='', comments='', axis='', start=0(row offset)
    sheet.from_list(1, y, lname=ylabel, units=yunit, axis='Y')
    sheet.from_list(2, z, lname=zlabel, units=zunit, axis='Z')
    gr=op.new_graph(title, 'TriContgray')
    gr[0].add_plot(sheet, 1, 0, 2)
    gr[0].rescale()
    wb.show = False

def plot1d(x=[1,2,3], y=[1,2,3], title='title', xlabel='x', ylabel='y', xunit='arb', yunit='arb'):
    # create a new book
    wb = op.new_book('w',title)
    # access the first sheet
    sheet = wb[0]
    # add data to the sheet
    sheet.from_list(0, x, lname=xlabel, units=xunit, axis='X')     #col, data, lname='', units='', comments='', axis='', start=0(row offset)
    sheet.from_list(1, y, lname=ylabel, units=yunit, axis='Y')
    gr=op.new_graph(title, 'scatter')
    gr[0].add_plot(sheet, 1, 0)
    gr[0].rescale()
    wb.show = False

def save():
    """
    Save the Origin data in .opj format.
    Can be saved in .opju format as well.
    """
    tbasename = os.path.basename(dpath)
    if '.h5' in tbasename:
        op.save(dpath.removesuffix('.h5').replace("/","\\")+'.opj')
    elif '.json' in tbasename:
        op.save(dpath.removesuffix('.json').replace("/","\\")+'.opj')
    elif '.txt' in tbasename:
        op.save(dpath.removesuffix('.txt').replace("/","\\")+'.opj')
    elif '.npz' in tbasename:
        op.save(dpath.removesuffix('.npz').replace("/","\\")+'.opj')

origin_temp_func = r'''
def note():
    nt=op.new_notes('Data Info')
    nt.syntax = 0   # Markdown; 0(Normal Text), 1(HTML), 2(Markdown), 3(Origin Rich Text)
    nt.view = 0    # Render Mode; 0(Text Mode), 1(Render Mode)
    nt.append(f'Region')
    nt.append(f'        File Path: {dpath}')
    for i in range(len(dkey)):
        if dkey[i] != 'Description':
            if dkey[i] == 'Path':
                pass
            else:
                nt.append(f'        {dkey[i]}: {dvalue[i]}')
        else:
            for j,k in enumerate(dvalue[i].split('\n')):
                if j == 0:
                    nt.append(f'        {dkey[i]}:')
                    nt.append(f'                {k}')
                else:
                    nt.append(f'                {k}')
    nt.append(f'\nParameters\n'+\
        f'        Energy Mode: {le_mode}\n'+\
        f'        Fermi Energy: {vfe} eV\n'+\
        f'        k offset: {ko} deg\n'+\
        f'        Gaussian Filter Kernel Size: {im_kernel}\n')
    if bpath is not None:
        nt.append(f'        Bare Band Path: {bpath}\n'+\
            f'        Bare Band Offset: {bbo} meV\n'+\
            f'        Bare Band k Ratio: {bbk}\n')
    else:
        nt.append(f'        Bare Band Path: None\n')

def plot2d(x=tx, y=ty, z=tz, x1=[], x2=[], y1=[], y2=[], title='E-Phi (Raw Data)', xlabel=r"\g(f)", ylabel=f'{le_mode}', zlabel='Intensity', xunit="deg", yunit='eV', zunit='Counts'):
    try:
        if title!='E-Phi (Raw Data)':
            if not npzf:
                x = (2*m*tev*1.602176634*10**-19)**0.5*np.sin((np.float64(ko)+x)/180*np.pi)*10**-10/(h/2/np.pi)
            xlabel='k'
        else:   # title == E-Phi (Raw Data)
            if npzf:
                title = 'E-k (Sliced Data)'
                xlabel='k'
        if 'Second Derivative' in title:
            z=sdz
        if 'Data plot with pos' in title:
            x1 = pos
            if emf=='KE':
                y1=fev
            else:
                y1= vfe-fev
        if title=='Data plot with pos & bare band':
            x2 = k*bbk
            if emf=='KE':
                y2 = (be - np.float64(bbo))/1000+vfe
            else:
                y2 = (-be + np.float64(bbo))/1000
        if xlabel=='k':
            xunit=r"2\g(p)Å\+(-1)"
        x,y,z = x.flatten(), y.flatten(), z.flatten()
        # create a new book
        wb = op.new_book('w',title)
        # access the first sheet
        sheet = wb[0]
        # add data to the sheet
        sheet.from_list(0, x, lname=xlabel, units=xunit, axis='X')     #col, data, lname='', units='', comments='', axis='', start=0(row offset)
        sheet.from_list(1, y, lname=ylabel, units=yunit, axis='Y')
        sheet.from_list(2, z, lname=zlabel, units=zunit, axis='Z')
        gr=op.new_graph(title, 'TriContgray')
        gr[0].add_plot(sheet, 1, 0, 2)
        if ylabel=='Binding Energy':
            ylm=gr[0].ylim
            gr[0].set_ylim(ylm[1],ylm[0])
            gr[0].set_ylim(step=-1*float(ylm[2]))
        if len(x1) != 0:
            sheet.from_list(3, x1, lname='x1', units=xunit, axis='X')
            sheet.from_list(4, y1, lname='y1', units=yunit, axis='Y')
            g1=gr[0].add_plot(sheet, 4, 3,type='s')
            g1.symbol_size = 5
            g1.symbol_kind = 2
        if len(x2) != 0:
            sheet.from_list(5, x2, lname='x2', units=xunit, axis='X')
            sheet.from_list(6, y2, lname='y2', units=yunit, axis='Y')
            g2=gr[0].add_plot(sheet, 6, 5,type='l')
            g2.symbol_size = 5
            g2.symbol_kind = 2
            g2.color = 'red'
        gr[0].rescale()
        wb.show = False
    except Exception as e:
        print(f"Error in plot2d: {e}")
        try:
            print(title)
        except:
            pass

def plot1d(x=[1,2,3], y1=[1,2,3], y2=[], title='title', xlabel='x', ylabel='y', ylabel1='y1', ylabel2='y2', xunit='arb', yunit='arb'):
    try:
        # create a new book
        wb = op.new_book('w',title)
        # access the first sheet
        sheet = wb[0]
        # add data to the sheet
        if ylabel1 == 'y1':
            ylabel1 = ylabel
        sheet.from_list(0, x, lname=xlabel, units=xunit, axis='X')     #col, data, lname='', units='', comments='', axis='', start=0(row offset)
        sheet.from_list(1, y1, lname=ylabel1, units=yunit, axis='Y')
        gr=op.new_graph(title, 'scatter')
        g1=gr[0].add_plot(sheet, 1, 0)
        g1.symbol_size = 5
        g1.symbol_kind = 2
        if len(y2) != 0:
            sheet.from_list(2, y2, lname=ylabel2, units=yunit, axis='Y')
            g2=gr[0].add_plot(sheet, 2, 0)
            g2.symbol_size = 5
            g2.symbol_kind = 2
            g2.color = 'red'
            gr[0].label('yl').text = f'{ylabel} ({yunit})'
        if xlabel=='Binding Energy':
            xlm=gr[0].xlim
            gr[0].set_xlim(xlm[1],xlm[0])
            gr[0].set_xlim(step=-1*float(xlm[2]))
        gr[0].rescale()
        wb.show = False
    except Exception as e:
        print(f"Error in plot1d: {e}")
        try:
            print(title)
        except:
            pass
def save(format='opj'):
    """
    Save the Origin data in .opj format.
    Can be saved in .opju format as well.
    """
    tbasename = os.path.basename(dpath)
    if '.h5' in tbasename:
        op.save(dpath.removesuffix('.h5').replace("/","\\")+'.'+format)
    elif '.json' in tbasename:
        op.save(dpath.removesuffix('.json').replace("/","\\")+'.'+format)
    elif '.txt' in tbasename:
        op.save(dpath.removesuffix('.txt').replace("/","\\")+'.'+format)
    elif '.npz' in tbasename:
        op.save(dpath.removesuffix('.npz').replace("/","\\")+'.'+format)
'''

def rplot(f, canvas):
    """
    Plot the raw data on a given canvas.

    Parameters
    -----
        f (Figure object): The figure object on which the plot will be created.
        canvas (Canvas object): The canvas object on which the plot will be drawn.

    Returns
    -----
        None
    """
    global data, ev, phi, value3, h0, ao, xl, yl, rcx, rcy, acb
    ao = f.add_axes([0.13, 0.1, 0.6, 0.65])
    rcx = f.add_axes([0.13, 0.78, 0.6, 0.15])
    rcy = f.add_axes([0.75, 0.1, 0.12, 0.65])
    acb = f.add_axes([0.9, 0.1, 0.02, 0.65])
    rcx.set_xticks([])
    rcx.set_yticks([])
    rcy.set_xticks([])
    rcy.set_yticks([])
    if emf=='KE':
        tx, ty = np.meshgrid(phi, ev)
    else:
        tx, ty = np.meshgrid(phi, vfe-ev)
    tz = data.to_numpy()
    # h1 = a.scatter(tx,ty,c=tz,marker='o',s=scale*scale*0.9,cmap=value3.get());
    h0 = ao.pcolormesh(tx, ty, tz, cmap=value3.get())
    f.colorbar(h0, cax=acb, orientation='vertical')
    # a.set_title('Raw Data',font='Arial',fontsize=size(16))
    rcx.set_title('            Raw Data', font='Arial', fontsize=size(16))
    if npzf:ao.set_xlabel(r'k ($\frac{2\pi}{\AA}$)', font='Arial', fontsize=size(12))
    else:ao.set_xlabel('Angle (deg)', font='Arial', fontsize=size(12))
    if emf=='KE':
        ao.set_ylabel('Kinetic Energy (eV)', font='Arial', fontsize=size(12))
    else:
        ao.set_ylabel('Binding Energy (eV)', font='Arial', fontsize=size(12))
        ao.invert_yaxis()
    xl = ao.get_xlim()
    yl = ao.get_ylim()
    np.save('raw_data.npy',tz.T/np.max(tz))
    # a.set_xticklabels(labels=a.get_xticklabels(),font='Arial',fontsize=size(10));
    # a.set_yticklabels(labels=a.get_yticklabels(),font='Arial',fontsize=size(10));
    canvas.draw()

def cexcitation_h5(s:str):
    with h5py.File(dpath, 'r+') as hf:
        # Read the dataset
        data = hf['Region']['ExcitationEnergy']['Value'][:]
        print("Original:", data)
        
        # Prepare the new data
        new_data = np.array([float(s)], dtype=float)  # Use vlen=str for variable-length strings
        
        # Delete the old dataset
        del hf['Region']['ExcitationEnergy']['Value']
        
        # Create a new dataset with the same name but with the new data
        hf.create_dataset('Region/ExcitationEnergy/Value', data=new_data, dtype=float)
        
        # Verify changes
        modified_data = hf['Region']['ExcitationEnergy']['Value'][:]
        print("Modified:", modified_data)

def cexcitation_json(s:str):
    with open(dpath, 'r') as f:
        data = json.load(f)
        print("Original:", data['Region']['ExcitationEnergy']['Value'])
    data['Region']['ExcitationEnergy']['Value'] = float(s)
    with open(dpath, 'w') as f:
        json.dump(data, f, indent=2)
        print("Modified:", data['Region']['ExcitationEnergy']['Value'])

def cexcitation_npz(s:str):
    with np.load(dpath, allow_pickle=True) as data:
        data_dict = {key: data[key] for key in data}
    data_dict['e_photon'] = float(s)
    np.savez(dpath, **data_dict)
    print(f"Modified .npz file saved to {dpath}")

def cexcitation_save_str():
    global data
    s=t_cein.get('1.0',tk.END)
    if s:
        s = s.replace('\n\n\n\n\n', '')
        s = s.replace('\n\n\n\n', '')
        s = s.replace('\n\n\n', '')
        s = s.replace('\n\n', '')
        s = s.replace('\n', '')
        tbasename = os.path.basename(dpath)
        if '.h5' in tbasename:
            cexcitation_h5(s)
            data = load_h5(dpath)  # data save as xarray.DataArray format
            pr_load(data)
        elif '.json' in tbasename:
            cexcitation_json(s)
            data = load_json(dpath)
            pr_load(data)
        elif '.npz' in tbasename:
            cexcitation_npz(s)
            data = load_npz(dpath)
            pr_load(data)
    gcestr.destroy()

def cexcitation():
    global gcestr,t_cein
    tk.messagebox.showwarning("Warning","Floats Input Only")
    if 'gcestr' in globals():
        gcestr.destroy()
    gcestr=RestrictedToplevel(g,bg='white')
    gcestr.title('Excitation Energy')
    fr=tk.Frame(gcestr,bg='white')
    fr.grid(row=0,column=0)
    t_cein = tk.Text(fr, height=1, width=60)
    t_cein.grid(row=0,column=0)
    try:
        t_cein.insert(tk.END, str(e_photon))
    except:
        t_cein.insert(tk.END, '1000.0')
    t_cein.config(font=('Arial', size(16)))
    fr1 = tk.Frame(gcestr,bg='white')
    fr1.grid(row=1,column=0)
    b1=tk.Button(fr1,text='Confirm',command=cexcitation_save_str, width=15, height=1, font=('Arial', size(14), "bold"), bg='white', bd=5)
    b1.grid(row=1,column=0)
    b2=tk.Button(fr1,text='Cancel',command=gcestr.destroy, width=15, height=1, font=('Arial', size(14), "bold"), bg='white', bd=5)
    b2.grid(row=1,column=1)
    set_center(g, gcestr, 0, 0)
    gcestr.update()
    gcestr.limit_bind()

def cname_h5(s:str):
    with h5py.File(dpath, 'r+') as hf:
        # Read the dataset
        data = hf['Region']['Name'][:]
        print("Original:", data)
        
        # Prepare the new data
        new_data = np.array([bytes(s, 'utf-8')], dtype=h5py.special_dtype(vlen=str))  # Use vlen=str for variable-length strings
        
        # Delete the old dataset
        del hf['Region']['Name']
        
        # Create a new dataset with the same name but with the new data
        hf.create_dataset('Region/Name', data=new_data, dtype=h5py.special_dtype(vlen=str))
        
        # Verify changes
        modified_data = hf['Region']['Name'][:]
        print("Modified:", modified_data)

def cname_json(s:str):
    with open(dpath, 'r') as f:
        data = json.load(f)
        print("Original:", data['Region']['Name'])
    data['Region']['Name'] = s
    with open(dpath, 'w') as f:
        json.dump(data, f, indent=2)
        print("Modified:", data['Region']['Name'])

def cname_npz(s:str):
    global dpath
    os.chdir(os.path.dirname(dpath))
    old_name = os.path.basename(dpath)
    new_name = s+'.npz'
    try:
        os.rename(old_name, new_name)
        print(f"File renamed from {old_name} to {new_name}")
        dpath = os.path.normpath(os.path.dirname(dpath)+'/'+s+'.npz')
    except FileNotFoundError:
        print(f"File {old_name} not found.")
    except PermissionError:
        print(f"Permission denied to rename {old_name}.")
    except Exception as e:
        print(f"An error occurred: {e}")

def cname_save_str():
    global data
    s=t_cin.get('1.0',tk.END)
    if s:
        s = s.replace('\n\n\n\n\n', '')
        s = s.replace('\n\n\n\n', '')
        s = s.replace('\n\n\n', '')
        s = s.replace('\n\n', '')
        s = s.replace('\n', '')
        tbasename = os.path.basename(dpath)
        if '.h5' in tbasename:
            cname_h5(s)
            data = load_h5(dpath)  # data save as xarray.DataArray format
            pr_load(data)
        elif '.json' in tbasename:
            cname_json(s)
            data = load_json(dpath)
            pr_load(data)
        elif '.npz' in tbasename:
            cname_npz(s)
            data = load_npz(dpath)
            pr_load(data)
    gcstr.destroy()
    
def cname():
    global gcstr,t_cin
    tk.messagebox.showwarning("Warning","允許中文、符號")
    if 'gcstr' in globals():
        gcstr.destroy()
    gcstr=RestrictedToplevel(g,bg='white')
    gcstr.title('Name')
    fr=tk.Frame(gcstr,bg='white')
    fr.grid(row=0,column=0)
    t_cin = tk.Text(fr, height=1, width=60, bd=5, padx=10, pady=10)
    t_cin.grid(row=0,column=0)
    t_cin.insert(tk.END, name)
    t_cin.config(font=('Arial', size(20)))
    t_cin.focus_set()
    fr1 = tk.Frame(gcstr,bg='white')
    fr1.grid(row=1,column=0)
    b1=tk.Button(fr1,text='Confirm',command=cname_save_str, width=15, height=1, font=('Arial', size(14), "bold"), bg='white', bd=5)
    b1.grid(row=1,column=0)
    b2=tk.Button(fr1,text='Cancel',command=gcstr.destroy, width=15, height=1, font=('Arial', size(14), "bold"), bg='white', bd=5)
    b2.grid(row=1,column=1)
    set_center(g, gcstr, 0, 0)
    gcstr.update()
    gcstr.limit_bind()

def desc_h5(s:str):
    with h5py.File(dpath, 'r+') as hf:
        # Read the dataset
        data = hf['Region']['Description'][:]
        print("Original:", data)
        
        # Prepare the new data
        # s1 = b'BUF : 1.68E-6 mbar'
        # s2 = b'0.50kV 100mA'
        # new_data = np.array([s1, b'\n', s2], dtype=h5py.special_dtype(vlen=str))  # Use vlen=str for variable-length strings
        
        # s='BUF : 1.68E-6 mbar\n0.50kV 100mA'
        new_data = np.array([bytes(s, 'utf-8')], dtype=h5py.special_dtype(vlen=str))  # Use vlen=str for variable-length strings
        
        # Delete the old dataset
        del hf['Region']['Description']
        
        # Create a new dataset with the same name but with the new data
        hf.create_dataset('Region/Description', data=new_data, dtype=h5py.special_dtype(vlen=str))
        
        # Verify changes
        modified_data = hf['Region']['Description'][:]
        print("Modified:", modified_data)

def desc_json(s:str):
    with open(dpath, 'r') as f:
        data = json.load(f)
        print("Original:", data['Region']['Description'])
    data['Region']['Description'] = s
    with open(dpath, 'w') as f:
        json.dump(data, f, indent=2)
        print("Modified:", data['Region']['Description'])

def desc_npz(s:str):
    with np.load(dpath, allow_pickle=True) as data:
        data_dict = {key: data[key] for key in data}
    data_dict['desc'] = [s]
    np.savez(dpath, **data_dict)
    print(f"Modified .npz file saved to {dpath}")
    
def save_str():
    global data
    s=t_in.get('1.0',tk.END)
    if s:
        s = s.replace('\n\n\n\n\n', '\n')
        s = s.replace('\n\n\n\n', '\n')
        s = s.replace('\n\n\n', '\n')
        s = s.replace('\n\n', '\n')
        tbasename = os.path.basename(dpath)
        if '.h5' in tbasename:
            desc_h5(s)
            data = load_h5(dpath)  # data save as xarray.DataArray format
            pr_load(data)
        elif '.json' in tbasename:
            desc_json(s)
            data = load_json(dpath)
            pr_load(data)
        elif '.npz' in tbasename:
            desc_npz(s)
            data = load_npz(dpath)
            pr_load(data)
    gstr.destroy()
    
def desc():
    global gstr,t_in
    tk.messagebox.showwarning("Warning","允許中文、符號")
    if 'gstr' in globals():
        gstr.destroy()
    gstr=RestrictedToplevel(g,bg='white')
    gstr.title('Description')
    fr=tk.Frame(gstr,bg='white')
    fr.grid(row=0,column=0)
    t_in = tk.Text(fr, height=10, width=50, bd=5, padx=10, pady=10)
    t_in.grid(row=0,column=0)
    t_in.insert(tk.END, description)
    t_in.config(font=('Arial', size(16)))
    t_in.focus_set()
    fr1 = tk.Frame(gstr,bg='white')
    fr1.grid(row=1,column=0)
    b1=tk.Button(fr1,text='Confirm',command=save_str, width=15, height=1, font=('Arial', size(14), "bold"), bg='white', bd=5)
    b1.grid(row=1,column=0)
    b2=tk.Button(fr1,text='Cancel',command=gstr.destroy, width=15, height=1, font=('Arial', size(14), "bold"), bg='white', bd=5)
    b2.grid(row=1,column=1)
    set_center(g, gstr, 0, 0)
    gstr.update()
    gstr.limit_bind()

def view_3d(*e):
    # path = fd.askdirectory(title="Select Zarr Folder")
    # DataViewer(master=g, path=path)
    DataViewer_PyQt5()
    

class ProgressBar(tk.Toplevel):
    def __init__(self, master):
        super().__init__(master)
        self.title("Progress")
        self.geometry("400x150")

        self.progress = ttk.Progressbar(self, orient="horizontal", length=300, mode="determinate")
        self.progress.pack(pady=20)
        self.label = tk.Label(self, text="Progress:", font=('Arial', size(16), "bold"))
        self.label.pack(pady=10)

        self.running = False

    def start(self, max_val=100):
        if not self.running:
            self.grab_set()
            self.focus_set()
            self.running = True
            self.progress["maximum"] = max_val
            self.progress["value"] = 1
    
    def add(self):
        if self.progress["value"] < self.progress["maximum"] and self.running:
            self.progress["value"] += 1
            self.label.config(text=f"Progress: {self.progress['value']}/{self.progress['maximum']}")
            self.update()
        else:
            self.running = False
            self.destroy()

def bin_data(data, axis, bin_size):
    if bin_size <= 1:
        return data
    # 計算可整除的長度
    length = (data.shape[axis] // bin_size) * bin_size
    slicer = [slice(None)] * data.ndim
    slicer[axis] = slice(0, length)
    data = data[tuple(slicer)]
    # 重新 shape
    new_shape = list(data.shape)
    new_shape[axis] = length // bin_size
    new_shape.insert(axis + 1, bin_size)
    data = data.reshape(new_shape)
    return data.mean(axis=axis + 1)

def DataViewer_PyQt5(*e):
    code = f'''import sys
import numpy as np
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QVBoxLayout, QWidget, QSlider, QLabel, QStatusBar,
    QSpinBox, QPushButton, QHBoxLayout, QLineEdit, QMenuBar, QAction, QRadioButton,
    QButtonGroup, QFileDialog, QProgressBar, QDialog
)
from PyQt5.QtCore import Qt, QTimer, QThread
from PyQt5.QtGui import QPixmap, QPainter, QFont, QColor, QTransform, QIcon, QCursor
import pyqtgraph as pg
from base64 import b64decode
import cv2, os, inspect
import h5py, time, zarr
from ctypes import windll
import gc, multiprocessing, shutil
hwnd = {hwnd}
'''
    code+=r'''
def find_window():
    # Windows系統中 可能的終端機視窗名稱
    hwnd = windll.user32.FindWindowW(None, "命令提示字元")
    if not hwnd:
        hwnd = windll.user32.FindWindowW(None, "Command Prompt")
    if not hwnd:
        hwnd = windll.user32.FindWindowW(None, "cmd")
    return hwnd

def rotate(data, angle, size):
    """
    for square data
    """
    mat = cv2.getRotationMatrix2D((size[1]/2, size[0]/2), angle, 1)
    data = cv2.warpAffine(data, mat, (size[1], size[0]), flags=cv2.INTER_NEAREST)
    return data

class ProgressDialog(QDialog):
    def __init__(self, max_val=100, qicon=None):
        super().__init__()
        self.setStyleSheet("""
            QWidget {
                background-color: #222;
                color: #EEE;
                font-family: Arial;
                font-size: 24px;
            }
        """)
        self.setWindowTitle('Progress')
        self.setWindowIcon(qicon)
        self.progress = QProgressBar(self)
        self.progress.setMinimum(0)
        self.progress.setMaximum(max_val)
        self.progress.setValue(0)
        self.label = QLabel(f"Progress: {self.progress.value()}/{self.progress.maximum()}", self)
        self.label.setAlignment(Qt.AlignCenter)
        vbox = QVBoxLayout()
        vbox.addWidget(self.progress)
        vbox.addWidget(self.label)
        self.setLayout(vbox)
        QApplication.processEvents()  # Update the GUI immediately
    
    def increaseProgress(self, text=None):
        value = self.progress.value()
        self.progress.setValue(value + 1)
        if value < self.progress.maximum()-1:
            if text:
                self.label.setText(text)
            else:
                self.label.setText(f"Progress: {self.progress.value()}/{self.progress.maximum()}")
            QApplication.processEvents()
        elif value == self.progress.maximum()-1:
            if text:
                self.label.setText(text)
            else:
                self.label.setText('Almost Done! Please Wait...')
            QApplication.processEvents()
            time.sleep(0.5)
        
class SliceBrowser(QMainWindow):
    def __init__(self, path=None):
        icon = r""
        pixmap = QPixmap()
        pixmap.loadFromData(b64decode(icon))
        qicon = QIcon(pixmap)
        self.icon = qicon
        super().__init__()
        pbar = ProgressDialog(10, self.icon)
        pbar.resize(self.width()//3, self.height()//4)
        pbar.show()
        pbar.increaseProgress('Loading Zarr Data Cube')
        print(f"Loading Zarr Data Cube from {path}")
        print('Please wait...')
        # hwnd = find_window()
        if hwnd:
            windll.user32.ShowWindow(hwnd, 9)
            windll.user32.SetForegroundWindow(hwnd)
        t=time.time()
        try:
            data = zarr.open_array(path)
            xmin,xmax = data[0, 1, -1], data[1, 1, -1]
            ymin,ymax = data[2, 1, -1], data[3, 1, -1]
            E = data[:, 0, -1]
            zpath = os.path.join(path, '__disp__.zarr')
            if not os.path.exists(zpath):
                data = data[:,:,:data.shape[2]-1]  # Remove the last attribute dimension
            else:
                shape = list(data.shape)
                shape[2] -= 1
                data = np.zeros(tuple(shape))
            self.mode = 'standard'
        except:
            try:
                data = zarr.open_group(path, mode='r+')
                xmin,xmax = data['attr_array'][0, 1], data['attr_array'][1, 1]
                ymin,ymax = data['attr_array'][2, 1], data['attr_array'][3, 1]
                E = data['attr_array'][:, 0]
                data = data['data']
                self.mode = 'display'
            except Exception as e:
                print(f"Error loading data from {path}: {e}")
                quit()
        
        pbar.increaseProgress('Loading Zarr Data Cube')
        e_size, ky_size, kx_size = data.shape
        kx = np.linspace(xmin, xmax, kx_size)
        ky = np.linspace(ymin, ymax, ky_size)
        print(data.shape)
        if path is None:
            self.path = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
        else:
            self.path = path
        pbar.increaseProgress('Loading Zarr Data Cube')
        self.raw_data = data
        print(f"Elapse time: {time.time()-t:.2f} s")
        pbar.increaseProgress('Setting QtWidgets')

        self.raw_E = E
        self.raw_kx = kx
        self.raw_ky = ky

        self.path_angle = 0
        
        # bin 設定
        self.bin_e = 1
        self.bin_kx = 1
        self.bin_ky = 1

        self.setWindowTitle("Volume Viewer")
        # self.showFullScreen()
        # geo = self.geometry()
        # self.showNormal()
        # self.resize(geo.width(), geo.height())
        # self.resize(1200, 1000)
        # self.setFixedSize(1200, 1000)
        self.setStyleSheet("""
            QWidget {
                background-color: #000;
                color: #EEE;
                font-family: Arial;
                font-size: 24px;
            }
            QStatusBar {
                background-color: #D7D7D7;
                color: #222;
                font-size: 30px;
            }
            QMenuBar, QMenu, QSlider, QSpinBox, QLineEdit, QLabel, QRadioButton {
                background-color: #000;
                color: #EEE;
            }
            QPushButton {
                background-color: #333;
                color: #EEE;
                font-family: Arial;
                font-weight: bold;
            }
            QRadioButton::indicator {
                background-color: #999;
                width: 16px;
                height: 16px;
                border-radius: 8px;
            }
            QRadioButton::indicator:checked {
                background-color: #FCFCFC;
                width: 20px;
                height: 20px;
                border-radius: 10px;
            }
            QPushButton:hover {
                background-color: #555;
                color: #FFD700;
            }
            QMenuBar::item {
                background-color: #000;
                color: #EEE;
                font-family: Arial;
            }
            QMenuBar::item:selected {
                background: #555;
                color: #FFD700;
            }
            QMenu {
                background-color: #222;
                color: #EEE;
                font-family: Arial;
            }
            QMenu::item {
                background: #222;
                color: #EEE;
                padding: 6px 24px;
                font-family: Arial;
            }
            QMenu::item:selected {
                background: #FFD700;
                color: #222;
            }
        """)
        
        
        self.setWindowIcon(qicon)
        
        
        # 主視窗
        central = QWidget()
        self.setCentralWidget(central)
        main_layout = QHBoxLayout(central)  # 主水平佈局
        
        # 左側：繪圖區
        left_layout = QVBoxLayout()
        ploty_layout = QHBoxLayout()    #plot, ylabel
        plotx_layout = QVBoxLayout()    #plot, xlabel


        pbar.increaseProgress('Setting QtWidgets')
        self.plot = pg.PlotWidget()
        self.plot.setMouseEnabled(x=True, y=True)
        self.plot.setLabel('bottom', '')
        self.plot.getAxis('bottom').setStyle(tickFont=pg.QtGui.QFont("Arial", 18))
        self.plot.setLabel('left', '')
        self.plot.getAxis('left').setStyle(tickFont=pg.QtGui.QFont("Arial", 18))
        self.plot.scene().sigMouseMoved.connect(self.on_mouse_moved)

        pbar.increaseProgress('Setting QtWidgets')
        self.menu_bar = QMenuBar()
        self.setMenuBar(self.menu_bar)
        file_menu = self.menu_bar.addMenu("File")
        act_quit = QAction("Quit", self)
        act_quit.setShortcut("Ctrl+Q")
        act_quit.triggered.connect(self.close)
        if self.mode == 'standard':
            act_save_zarr = QAction("Save as Zarr-Standard", self)
            act_save_zarr.triggered.connect(self.save_as_zarr)
        act_save_zarr_disp = QAction("Save as Zarr-Display", self)
        act_save_zarr_disp.triggered.connect(self.save_as_zarr_disp)
        if self.mode == 'standard':
            file_menu.addAction(act_save_zarr)
        file_menu.addAction(act_save_zarr_disp)
        file_menu.addAction(act_quit)
        view_menu = self.menu_bar.addMenu("View")
        act_grid = QAction("Show Grid", self)
        act_grid.setCheckable(True)
        act_grid.setChecked(False)
        act_grid.triggered.connect(self.toggle_grid)
        view_menu.addAction(act_grid)
        
        
        self.E_pixmap_x = self.make_axis_label("Kinetic Energy (eV)", font_size=18, vertical=False)
        self.kx_pixmap_x = self.make_axis_label("kx (2π/Å)", font_size=18, vertical=False)
        self.ky_pixmap_x = self.make_axis_label("ky (2π/Å)", font_size=18, vertical=False)
        self.E_pixmap_y = self.make_axis_label("Kinetic Energy (eV)", font_size=18, vertical=True)
        self.kx_pixmap_y = self.make_axis_label("kx (2π/Å)", font_size=18, vertical=True)
        self.ky_pixmap_y = self.make_axis_label("ky (2π/Å)", font_size=18, vertical=True)

        self.xlabel = QLabel()
        self.xlabel.setPixmap(self.kx_pixmap_x)
        self.xlabel.setAlignment(Qt.AlignCenter)
        self.xlabel.setContentsMargins(10, 0, 0, 0)

        self.ylabel = QLabel()
        self.ylabel.setPixmap(self.ky_pixmap_y)
        self.ylabel.setAlignment(Qt.AlignCenter)
            
        ploty_layout.addWidget(self.ylabel)
        ploty_layout.addWidget(self.plot)
        plotx_layout.addLayout(ploty_layout)
        plotx_layout.addWidget(self.xlabel)
        
        rdb_layout = QHBoxLayout()

        pbar.increaseProgress('Setting QtWidgets')
        radio1 = QRadioButton("E")
        radio1.setToolTip("Show E slice (ky-kx)")
        radio1.setChecked(True)
        radio2 = QRadioButton("kx")
        radio2.setToolTip("Show kx slice (E-ky)")
        radio3 = QRadioButton("ky")
        radio3.setToolTip("Show ky slice (E-kx)")

        group = QButtonGroup(central)
        group.addButton(radio1)
        group.addButton(radio2)
        group.addButton(radio3)

        radio1.clicked.connect(lambda: self.on_radio_button_changed("E"))
        radio2.clicked.connect(lambda: self.on_radio_button_changed("kx"))
        radio3.clicked.connect(lambda: self.on_radio_button_changed("ky"))

        rdb_layout.addWidget(radio1)
        rdb_layout.addWidget(radio2)
        rdb_layout.addWidget(radio3)
        left_layout.addWidget(self.menu_bar)
        left_layout.addLayout(rdb_layout)

        # 三個滑桿
        pbar.increaseProgress('Setting QtWidgets')
        self.slider_E = QSlider(Qt.Horizontal)
        self.slider_E.setFixedHeight(50)
        self.slider_E.setStyleSheet("""
                                    QSlider::handle:horizontal {
                                        background: #007AD9;
                                        width: 40px;      /* 控制滑塊寬度 */
                                        height: 40px;     /* 控制滑塊高度（對水平slider沒影響，但可加大垂直slider）*/
                                        margin: -10px 0;  /* 讓滑塊更突出 */
                                    }
                                    QSlider::groove:horizontal {
                                        height: 10px;     /* 控制滑道粗細 */
                                        background: #bcbcbc;
                                        border-radius: 5px;
                                    }
                                    """)
        self.slider_E.setMinimum(0)
        self.slider_E.setMaximum(len(E)-1)
        self.slider_E.setValue(0)
        self.slider_E.setTickInterval(1)
        self.slider_E.setSingleStep(1)
        self.label_E = QLabel("E Slice (ky-kx)")
        self.label_E.setAlignment(Qt.AlignCenter)
        left_layout.addWidget(self.label_E)
        left_layout.addWidget(self.slider_E)

        self.slider_kx = QSlider(Qt.Horizontal)
        self.slider_kx.setFixedHeight(50)
        self.slider_kx.setStyleSheet("""
                                    QSlider::handle:horizontal {
                                        background: #007AD9;
                                        width: 40px;      /* 控制滑塊寬度 */
                                        height: 40px;     /* 控制滑塊高度（對水平slider沒影響，但可加大垂直slider）*/
                                        margin: -10px 0;  /* 讓滑塊更突出 */
                                    }
                                    QSlider::groove:horizontal {
                                        height: 10px;     /* 控制滑道粗細 */
                                        background: #bcbcbc;
                                        border-radius: 5px;
                                    }
                                    """)
        self.slider_kx.setMinimum(0)
        self.slider_kx.setMaximum(len(kx)-1)
        self.slider_kx.setValue(0)
        self.slider_kx.setTickInterval(1)
        self.slider_kx.setSingleStep(1)
        self.label_kx = QLabel("kx Slice (E-ky)")
        self.label_kx.setAlignment(Qt.AlignCenter)
        left_layout.addWidget(self.label_kx)
        left_layout.addWidget(self.slider_kx)
        self.label_kx.setVisible(False)
        self.slider_kx.setVisible(False)

        self.slider_ky = QSlider(Qt.Horizontal)
        self.slider_ky.setFixedHeight(50)
        self.slider_ky.setStyleSheet("""
                                    QSlider::handle:horizontal {
                                        background: #007AD9;
                                        width: 40px;      /* 控制滑塊寬度 */
                                        height: 40px;     /* 控制滑塊高度（對水平slider沒影響，但可加大垂直slider）*/
                                        margin: -10px 0;  /* 讓滑塊更突出 */
                                    }
                                    QSlider::groove:horizontal {
                                        height: 10px;     /* 控制滑道粗細 */
                                        background: #bcbcbc;
                                        border-radius: 5px;
                                    }
                                    """)
        self.slider_ky.setMinimum(0)
        self.slider_ky.setMaximum(len(ky)-1)
        self.slider_ky.setValue(0)
        self.slider_ky.setTickInterval(1)
        self.slider_ky.setSingleStep(1)
        self.label_ky = QLabel("ky Slice (E-kx)")
        self.label_ky.setAlignment(Qt.AlignCenter)
        left_layout.addWidget(self.label_ky)
        left_layout.addWidget(self.slider_ky)
        self.label_ky.setVisible(False)
        self.slider_ky.setVisible(False)

        # 建立 plot + hist 水平佈局
        plot_hist_layout = QHBoxLayout()
        plot_hist_layout.setContentsMargins(0, 0, 0, 0)
        self.hist = pg.HistogramLUTWidget()
        # plot_hist_layout.addWidget(self.plot, stretch=4)
        plot_hist_layout.addLayout(plotx_layout, stretch=4)
        plot_hist_layout.addWidget(self.hist, stretch=1)

        # plot_menu_layout.addLayout(plot_hist_layout)
        left_layout.addLayout(plot_hist_layout)

        main_layout.addLayout(left_layout, stretch=4)

        # 右側：控制區
        right_layout = QVBoxLayout()
        
        # bin 控制（三軸）
        bin_layout = QVBoxLayout()
        bin_layout.addWidget(QLabel("E bin"))
        self.bin_e_spin = QSpinBox()
        self.bin_e_spin.setMinimum(1)
        self.bin_e_spin.setMaximum(50)
        self.bin_e_spin.setValue(1)
        bin_layout.addWidget(self.bin_e_spin)

        bin_layout.addWidget(QLabel("kx bin"))
        self.bin_kx_spin = QSpinBox()
        self.bin_kx_spin.setMinimum(1)
        self.bin_kx_spin.setMaximum(50)
        self.bin_kx_spin.setValue(1)
        bin_layout.addWidget(self.bin_kx_spin)

        bin_layout.addWidget(QLabel("ky bin"))
        self.bin_ky_spin = QSpinBox()
        self.bin_ky_spin.setMinimum(1)
        self.bin_ky_spin.setMaximum(50)
        self.bin_ky_spin.setValue(1)
        bin_layout.addWidget(self.bin_ky_spin)
        right_layout.addLayout(bin_layout)
        
        # 初始 binning
        pbar.increaseProgress('Initializing')

        self.apply_bin_btn = QPushButton("Apply Bin")
        right_layout.addWidget(self.apply_bin_btn)
        self.apply_bin_btn.clicked.connect(self.on_bin_change)
        self.bin_e_spin.returnPressed = self.on_bin_change
        self.bin_kx_spin.returnPressed = self.on_bin_change
        self.bin_ky_spin.returnPressed = self.on_bin_change
        for spin in [self.bin_e_spin, self.bin_kx_spin, self.bin_ky_spin]:
            spin.lineEdit().returnPressed.connect(self.on_bin_change)
        

        # xlow/xhigh 控制
        self.xlow_edit = QLineEdit(f'{min(xmin, ymin):.3f}')
        self.xhigh_edit = QLineEdit(f'{max(xmax, ymax):.3f}')
        self.xlow_label = QLabel("xlow")
        self.xhigh_label = QLabel("xhigh")
        right_layout.addWidget(self.xlow_label)
        right_layout.addWidget(self.xlow_edit)
        right_layout.addWidget(self.xhigh_label)
        right_layout.addWidget(self.xhigh_edit)

        self.xlow_edit.returnPressed.connect(self.xlim)
        self.xhigh_edit.returnPressed.connect(self.xlim)

        # 旋轉控制
        self.rotate_label = QLabel("Angle (deg)")
        self.rotate_slider = QSlider(Qt.Horizontal)
        self.rotate_slider.setFixedHeight(50)
        self.rotate_slider.setStyleSheet("""
                                    QSlider::handle:horizontal {
                                        background: #007AD9;
                                        width: 40px;      /* 控制滑塊寬度 */
                                        height: 40px;     /* 控制滑塊高度（對水平slider沒影響，但可加大垂直slider）*/
                                        margin: -10px 0;  /* 讓滑塊更突出 */
                                    }
                                    QSlider::groove:horizontal {
                                        height: 10px;     /* 控制滑道粗細 */
                                        background: #bcbcbc;
                                        border-radius: 5px;
                                    }
                                    """)
        self.rotate_slider.setMinimum(0)
        self.rotate_slider.setMaximum(3600)  # 0.1度精度
        self.rotate_slider.setValue(0)
        self.rotate_edit = QLineEdit("0.0")
        self.rotate_btn = QPushButton("Rotate Data Cube")
        right_layout.addWidget(self.rotate_label)
        right_layout.addWidget(self.rotate_slider)
        right_layout.addWidget(self.rotate_edit)
        right_layout.addWidget(self.rotate_btn)
        
        self.update_binned_data(init=True)

        # 存檔按鈕
        self.export_btn = QPushButton("Export to HDF5 File")
        # self.export_btn.setStyleSheet("""
        #     QToolTip {
        #         background-color: #222;
        #         color: #EEE;
        #         border: 1px solid black;
        #         font-size: 18pt;
        #     }
        # """)
        # self.export_btn.setToolTip("Export the current slice to an HDF5 file")
        right_layout.addWidget(self.export_btn)

        right_layout.addStretch()
        main_layout.addLayout(right_layout, stretch=1)

        # 狀態列
        self.statusbar = QStatusBar(self)
        self.setStatusBar(self.statusbar)
        right_label = QLabel(f"{self.mode.capitalize()} Mode")
        right_label.setStyleSheet("background-color: #D7D7D7; color: #000; font-weight: bold; font-size: 30px;")
        # right_label.setFocusPolicy(Qt.NoFocus)
        # right_label.setTextInteractionFlags(Qt.NoTextInteraction)
        self.statusbar.addPermanentWidget(right_label)  # 右側狀態列(有缺陷 #D7D7D7 游標殘留)

        # 綁定事件
        self.slider_E.valueChanged.connect(self.update_E_slice)
        self.slider_kx.valueChanged.connect(self.update_kx_slice)
        self.slider_ky.valueChanged.connect(self.update_ky_slice)
        self.rotate_slider.valueChanged.connect(self.sync_rotate_edit)
        self.rotate_btn.clicked.connect(self.apply_rotation)
        self.rotate_edit.editingFinished.connect(self.sync_rotate_slider)
        self.export_btn.clicked.connect(self.export_slice)

        # 預設顯示 E 切片
        self.current_mode = 'E'
        self.update_E_slice(0, init=True)
        pbar.increaseProgress('Ready')
        
        self.showMaximized()
        self.w, self.h = self.width(), self.height()

    def get_raw_data(self):
        if self.mode == 'standard':
            data = zarr.open_array(self.path)
            self.raw_data = data[:,:,:data.shape[2]-1]
        elif self.mode == 'display':
            self.raw_data = zarr.open_group(self.path, mode='r+')['data']

    def toggle_grid(self, checked):
        if checked:
            self.plot.showGrid(x=True, y=True)
        else:
            self.plot.showGrid(x=False, y=False)

    def xlim(self):
        xlow = float(self.xlow_edit.text())
        xhigh = float(self.xhigh_edit.text())
        if xlow >= xhigh:
            self.xlow_edit.setText(str(xhigh))
            self.xhigh_edit.setText(str(xlow))
        self.refresh_slice()

    def on_radio_button_changed(self, mode):
        self.current_mode = mode
        if mode == 'E':
            self.label_E.setVisible(True)
            self.slider_E.setVisible(True)
            self.label_kx.setVisible(False)
            self.slider_kx.setVisible(False)
            self.label_ky.setVisible(False)
            self.slider_ky.setVisible(False)
            self.update_E_slice(self.slider_E.value(),init=True)
        elif mode == 'kx':
            self.label_E.setVisible(False)
            self.slider_E.setVisible(False)
            self.label_kx.setVisible(True)
            self.slider_kx.setVisible(True)
            self.label_ky.setVisible(False)
            self.slider_ky.setVisible(False)
            self.update_kx_slice(self.slider_kx.value())
        elif mode == 'ky':
            self.label_E.setVisible(False)
            self.slider_E.setVisible(False)
            self.label_kx.setVisible(False)
            self.slider_kx.setVisible(False)
            self.label_ky.setVisible(True)
            self.slider_ky.setVisible(True)
            self.update_ky_slice(self.slider_ky.value())

    def make_axis_label(self, text, font_size=18, vertical=False):
        font = QFont("Arial", font_size, QFont.Bold)
        metrics = pg.QtGui.QFontMetrics(font)
        if vertical:
            w = metrics.height() + 10
            h = metrics.horizontalAdvance(text) + 10
            pixmap = QPixmap(w, h)
            pixmap.fill(Qt.transparent)
            painter = QPainter(pixmap)
            painter.setFont(font)
            painter.setPen(QColor("white"))
            painter.translate(w//2, h//2)
            painter.rotate(-90)
            painter.drawText(-h//2 + 5, w//2 - 5, text)
            painter.end()
            # label = QLabel()
            # label.setPixmap(pixmap)
            # label.setMinimumWidth(w)
            # label.setAlignment(Qt.AlignCenter)
            return pixmap
        else:
            w = metrics.horizontalAdvance(text) + 10
            h = metrics.height() + 10
            pixmap = QPixmap(w, h)
            pixmap.fill(Qt.transparent)
            painter = QPainter(pixmap)
            painter.setFont(font)
            painter.setPen(QColor("white"))
            painter.drawText(5, h - 5, text)
            painter.end()
            # label = QLabel()
            # label.setPixmap(pixmap)
            # label.setMinimumHeight(h)
            # label.setAlignment(Qt.AlignCenter)
            return pixmap

    def on_mouse_moved(self, pos):
        vb = self.plot.getViewBox()
        if vb.sceneBoundingRect().contains(pos):
            mouse_point = vb.mapSceneToView(pos)
            self.statusbar.setStyleSheet("font-size: 30px;")
            self.statusbar.showMessage(f"x={mouse_point.x():.2f}  y={mouse_point.y():.2f}")

    def rescale(self, x, y):
        # metrics = pg.QtGui.QFontMetrics(QFont("Arial", 18))
        # axis = self.plot.getAxis('left')  # 或 'left'
        # ticks = axis.tickValues(18, axis.range[0], axis.range[1])
        # # ticks 是 list，每個元素是 (scale, [tick位置list])
        # h = metrics.horizontalAdvance('')
        # for scale, tick_list in ticks:
        #     print(scale, tick_list)
        #     tick = tick_list[:]
        #     if len(tick) > 0:
        #         for t in tick:
        #             if metrics.horizontalAdvance(str(t)) > h:
        #                 h = metrics.horizontalAdvance(str(t))
        #                 mt = t
        # print('maximum ytick:',h, 'longest tick:', mt)
        # self.px, self.py = 46, 0
        # lx, ly = len(x), len(y)
        # self.x_scale = (self.w-self.px-498) / lx
        # self.y_scale = (self.h-290) / ly
        # self.dx, self.dy = lx*self.x_scale, ly*self.y_scale
        
        # self.imrect = pg.QtCore.QRectF(self.px, self.py, self.dx, self.dy)
        return

    def update_binned_data(self, save = False, indky=None, indkx=None, init=False):
        # 對整個三維資料 binning
        bin_e = self.bin_e_spin.value()
        bin_kx = self.bin_kx_spin.value()
        bin_ky = self.bin_ky_spin.value()
        arr=[]
        if init:
            if self.mode == 'standard':
                path = os.path.join(self.path, '__disp__.zarr')
                try:
                    if os.path.exists(path):
                        self.raw_data_show = zarr.open_group(path, mode='r+')['data']
                        self.path_angle = zarr.open_group(path, mode='r+')['ang'][0]
                        self.rotate_slider.setValue(int(self.path_angle*10))
                        self.rotate_edit.setText(f"{self.path_angle:.1f}")
                        self.prload = True
                    else:
                        zdata = np.asarray(self.raw_data/np.max(self.raw_data)*255, dtype=np.uint8)
                        zarr.save_group(path, data=zdata, ang=np.array([0],dtype=np.float32))
                        os.system(f'attrib +h +s "{path}"')
                        for name in os.listdir(path):
                            item_path = os.path.join(path, name)
                            if os.path.isfile(item_path):
                                os.system(f'attrib +h +s "{item_path}"')
                            elif os.path.isdir(item_path):
                                os.system(f'attrib +h +s "{item_path}"')
                        self.raw_data_show = zarr.open_group(path, mode='r+')['data']
                        self.prload = False
                except Exception as e:
                    print(e)
                    self.raw_data_show = np.asarray(self.raw_data/np.max(self.raw_data)*255, dtype=np.uint8)
                    self.prload = False
            elif self.mode == 'display':
                self.raw_data_show = self.raw_data
                self.path_angle = zarr.open_group(self.path, mode='r+')['ang'][0]
                self.rotate_slider.setValue(int(self.path_angle*10))
                self.rotate_edit.setText(f"{self.path_angle:.1f}")
                self.prload = True
            self.data_show = self.raw_data_show
            del self.raw_data
        elif not save:
            if bin_e == 1 and bin_kx == 1 and bin_ky == 1:
                self.data_show = self.raw_data_show
            else:
                self.data_show = self.bin_data(self.raw_data_show, axis=0, bin_size=bin_e)
                self.data_show = self.bin_data(self.data_show, axis=1, bin_size=bin_ky)
                self.data_show = self.bin_data(self.data_show, axis=2, bin_size=bin_kx)
        else:   #save
            self.get_raw_data()
            if bin_e == 1 and bin_kx == 1 and bin_ky == 1:
                arr = self.raw_data
                self.data_show = arr
            else:
                arr = self.bin_data(self.raw_data, axis=0, bin_size=bin_e)
                arr = self.bin_data(arr, axis=1, bin_size=bin_ky)
                arr = self.bin_data(arr, axis=2, bin_size=bin_kx)
                self.data_show = arr
            
        
        self.E = self.raw_E[:self.data_show.shape[0]*bin_e].reshape(-1, bin_e).mean(axis=1) if bin_e > 1 else self.raw_E
        self.ky = self.raw_ky[:self.data_show.shape[1]*bin_ky].reshape(-1, bin_ky).mean(axis=1) if bin_ky > 1 else self.raw_ky
        self.kx = self.raw_kx[:self.data_show.shape[2]*bin_kx].reshape(-1, bin_kx).mean(axis=1) if bin_kx > 1 else self.raw_kx
        # 更新滑桿最大值
        self.slider_E.setMaximum(len(self.E)-1)
        self.slider_kx.setMaximum(len(self.kx)-1)
        self.slider_ky.setMaximum(len(self.ky)-1)
        for i in [self.slider_E, self.slider_kx, self.slider_ky]:
            if i.value() > i.maximum():
                i.setValue(i.maximum())
        # Asign binnied value
        self.bin_e = bin_e
        self.bin_kx = bin_kx
        self.bin_ky = bin_ky
        if save:
            return arr[:, indky, indkx]
        else:
            return

    def on_bin_change(self):
        QApplication.setOverrideCursor(QCursor(Qt.WaitCursor))
        self.update_binned_data()
        self.refresh_slice()
        QApplication.restoreOverrideCursor()
    
    # def bin_data(self, arr, axis, bin_size):
    #     if bin_size <= 1:
    #         return arr
    #     shape = arr.shape
    #     new_shape = list(shape)
    #     new_shape[axis] = shape[axis] // bin_size
    #     arr = arr.take(indices=range(0, shape[axis] - shape[axis] % bin_size), axis=axis)
    #     arr = arr.reshape(*shape[:axis], -1, bin_size, *shape[axis+1:])
    #     arr = arr.mean(axis=axis+1)
    #     return arr
    
    def bin_data(self, data, axis, bin_size):
        if bin_size <= 1:
            return data
        # 計算可整除的長度
        length = (data.shape[axis] // bin_size) * bin_size
        slicer = [slice(None)] * data.ndim
        slicer[axis] = slice(0, length)
        data = data[tuple(slicer)]
        # 重新 shape
        new_shape = list(data.shape)
        new_shape[axis] = length // bin_size
        new_shape.insert(axis + 1, bin_size)
        data = data.reshape(new_shape)
        return data.mean(axis=axis + 1, dtype=np.float32)

    def update_E_slice(self, idx, init=False):
        self.current_mode = 'E'
        self.export_btn.hide()
        self.rotate_label.show()
        self.rotate_slider.show()
        self.rotate_edit.show()
        self.rotate_btn.show()
        self.xlow_edit.hide()
        self.xhigh_edit.hide()
        self.xlow_label.hide()
        self.xhigh_label.hide()
        arr = self.data_show[idx, :, :]
        kx_bin = self.kx
        ky_bin = self.ky
        # 旋轉
        if self.prload:
            self.angle = np.float32(self.rotate_edit.text()) - self.path_angle
        else:
            self.angle = np.float32(self.rotate_edit.text())
        if self.angle != 0:
            arr = self.rotate_array()
        kx_bin = self.kx[:arr.shape[1]]
        ky_bin = self.ky[:arr.shape[0]]
        self.xl, self.yl, self.xh, self.yh, self.dx, self.dy = kx_bin[0], ky_bin[0], kx_bin[-1], ky_bin[-1], kx_bin[-1] - kx_bin[0], ky_bin[-1] - ky_bin[0]
        
        if not init:
            if self.xRange != self.plot.getViewBox().viewRange()[0] or self.yRange != self.plot.getViewBox().viewRange()[1]:
                self.xRange, self.yRange = self.plot.getViewBox().viewRange()[0], self.plot.getViewBox().viewRange()[1]
        else:
            self.xRange, self.yRange = (self.xl, self.xh), (self.yl, self.yh)
        self.plot.clear()
        self.update_E_job(arr)

        self.v_cross = pg.InfiniteLine(angle=90, movable=False, pen=pg.mkPen((255, 0, 0), width=2, style=Qt.DotLine))
        self.v_cross.setZValue(10)
        self.h_cross = pg.InfiniteLine(angle=0, movable=False, pen=pg.mkPen((255, 0, 0), width=2, style=Qt.DotLine))
        self.h_cross.setZValue(10)
        self.v_cross.setValue(0)
        self.h_cross.setValue(0)
        self.plot.addItem(self.v_cross, ignoreBounds=True)
        self.plot.addItem(self.h_cross, ignoreBounds=True)
        self.v_cross.setVisible(False)
        self.h_cross.setVisible(False)

    def update_kx_slice(self, idx):
        self.current_mode = 'kx'
        self.export_btn.show()
        self.rotate_label.hide()
        self.rotate_slider.hide()
        self.rotate_edit.hide()
        self.rotate_btn.hide()
        self.xlow_edit.show()
        self.xhigh_edit.show()
        self.xlow_label.show()
        self.xhigh_label.show()
        self.xlow_label.setText("ky min")
        self.xhigh_label.setText("ky max")
        
        xlow = float(self.xlow_edit.text())
        xhigh = float(self.xhigh_edit.text())
        try:
            li = np.argwhere(self.ky-xlow <= (self.ky[1]-self.ky[0])/2)[-1][0]
        except IndexError:
            li = 0
        try:
            hi = np.argwhere(self.ky-xhigh >= (self.ky[1]-self.ky[0])/2)[0][0]
        except IndexError:
            hi = len(self.ky) - 1
        arr = self.data_show[:, li:hi+1, idx]
        E_bin = self.E
        ky_bin = self.ky[li:hi+1]
        dx, dy = ky_bin[-1] - ky_bin[0], E_bin[-1] - E_bin[0]
        
        self.plot.clear()
        img_item = pg.ImageItem(arr.T)
        img_item.setLevels(np.min(arr), np.max(arr))
        self.hist.setImageItem(img_item)
        self.plot.setAspectLocked(False)  # 鎖定比例
        self.plot.setLimits(xMin=ky_bin[0]-dx/2, xMax=ky_bin[-1]+dx/2, yMin=E_bin[0]-dy/2, yMax=E_bin[-1]+dy/2)
        self.plot.setRange(xRange=(xlow, xhigh), yRange=(E_bin[0], E_bin[-1]), padding=0)
        # self.rescale(E_bin, ky_bin)
        rect = pg.QtCore.QRectF(ky_bin[0], E_bin[0], ky_bin[-1] - ky_bin[0], E_bin[-1] - E_bin[0])  # 真實位置
        img_item.setRect(rect)
        self.plot.addItem(img_item)
        self.xlabel.setPixmap(self.ky_pixmap_x)
        self.ylabel.setPixmap(self.E_pixmap_y)
        self.statusbar.setStyleSheet("font-size: 30px;")
        self.statusbar.showMessage(f"kx index: {idx} (kx={self.kx[idx]:.3f})")
        self.label_kx.setText(f'kx Slice (E-ky) Index: {idx} (kx={self.kx[idx]:.3f})')

    def update_ky_slice(self, idx):
        self.current_mode = 'ky'
        self.export_btn.show()
        self.rotate_label.hide()
        self.rotate_slider.hide()
        self.rotate_edit.hide()
        self.rotate_btn.hide()
        self.xlow_edit.show()
        self.xhigh_edit.show()
        self.xlow_label.show()
        self.xhigh_label.show()
        self.xlow_label.setText("kx min")
        self.xhigh_label.setText("kx max")
        
        xlow = float(self.xlow_edit.text())
        xhigh = float(self.xhigh_edit.text())
        try:
            li = np.argwhere(self.kx-xlow <= (self.kx[1]-self.kx[0])/2)[-1][0]
        except IndexError:
            li = 0
        try:
            hi = np.argwhere(self.kx-xhigh >= (self.kx[1]-self.kx[0])/2)[0][0]
        except IndexError:
            hi = len(self.kx) - 1
        arr = self.data_show[:, idx, li:hi+1]
        E_bin = self.E
        kx_bin = self.kx[li:hi+1]
        dx, dy = kx_bin[-1] - kx_bin[0], E_bin[-1] - E_bin[0]

        self.plot.clear()
        img_item = pg.ImageItem(arr.T)
        img_item.setLevels(np.min(arr), np.max(arr))
        self.hist.setImageItem(img_item)
        self.plot.setAspectLocked(False)  # 鎖定比例
        self.plot.setLimits(xMin=kx_bin[0]-dx/2, xMax=kx_bin[-1]+dx/2, yMin=E_bin[0]-dy/2, yMax=E_bin[-1]+dy/2)
        self.plot.setRange(xRange=(xlow, xhigh), yRange=(E_bin[0], E_bin[-1]), padding=0)
        # self.rescale(E_bin, ky_bin)
        rect = pg.QtCore.QRectF(kx_bin[0], E_bin[0], kx_bin[-1] - kx_bin[0], E_bin[-1] - E_bin[0])  # 真實位置
        img_item.setRect(rect)
        self.plot.addItem(img_item)
        self.xlabel.setPixmap(self.kx_pixmap_x)
        self.ylabel.setPixmap(self.E_pixmap_y)
        self.statusbar.setStyleSheet("font-size: 30px;")
        self.statusbar.showMessage(f"ky index: {idx} (ky={self.ky[idx]:.3f})")
        self.label_ky.setText(f'ky Slice (E-kx) Index: {idx} (ky={self.ky[idx]:.3f})')

    def refresh_slice(self):
        if self.current_mode == 'E':
            self.update_E_slice(self.slider_E.value())
        elif self.current_mode == 'kx':
            self.update_kx_slice(self.slider_kx.value())
        elif self.current_mode == 'ky':
            self.update_ky_slice(self.slider_ky.value())

    def export_slice(self):
        # 匯出時也裁切 xlow/xhigh
        if self.current_mode == 'kx':
            self.gen_E_ky()
        elif self.current_mode == 'ky':
            self.gen_E_kx()
    
    def gen_E_kx(self, event=None):
        # hwnd = find_window()
        if hwnd:
            windll.user32.ShowWindow(hwnd, 9)
            windll.user32.SetForegroundWindow(hwnd)
        self.__md(axis="E_kx")
        v = self.ky[self.slider_ky.value()]
        self.name = f"{self.dirname}_ky_{v:.3f}"
        self.file = os.path.join(self.dir, f"{self.name}.h5")
        self.gen_h5(axis='kx')
        print(f"Save to {self.file}")
        self.statusbar.setStyleSheet("font-size: 15px;")
        self.statusbar.showMessage(f"Exported to {self.file}")

    def gen_E_ky(self, event=None):
        # hwnd = find_window()
        if hwnd:
            windll.user32.ShowWindow(hwnd, 9)
            windll.user32.SetForegroundWindow(hwnd)
        self.__md(axis="E_ky")
        v = self.kx[self.slider_kx.value()]
        self.name = f"{self.dirname}_kx_{v:.3f}"
        self.file = os.path.join(self.dir, f"{self.name}.h5")
        self.gen_h5(axis='ky')
        print(f"Save to {self.file}")
        self.statusbar.setStyleSheet("font-size: 15px;")
        self.statusbar.showMessage(f"Exported to {self.file}")
    
    def gen_h5(self, axis='kx'):
        with h5py.File(self.file, "w") as f:
            e_photon = 21.2  # deafault He I photon energy
            desc=["Sliced data"]
            y = self.E
            xlow, xhigh = self.plot.getViewBox().viewRange()[0]
            if axis == 'kx':
                try:
                    li = np.argwhere(self.kx-xlow <= (self.kx[1]-self.kx[0])/2)[-1][0]
                except IndexError:
                    li = 0
                try:
                    hi = np.argwhere(self.kx-xhigh >= (self.kx[1]-self.kx[0])/2)[0][0]
                except IndexError:
                    hi = len(self.kx) - 1
                x = self.kx[li:hi+1]
            else:
                try:
                    li = np.argwhere(self.ky-xlow <= (self.ky[1]-self.ky[0])/2)[-1][0]
                except IndexError:
                    li = 0
                try:
                    hi = np.argwhere(self.ky-xhigh >= (self.ky[1]-self.ky[0])/2)[0][0]
                except IndexError:
                    hi = len(self.ky) - 1
                x = self.ky[li:hi+1]
            xsize = np.array([len(y)], dtype=int)
            f.create_dataset('Data/XSize/Value', data=xsize, dtype=int)
            ysize = np.array([len(x)], dtype=int)
            f.create_dataset('Data/YSize/Value', data=ysize, dtype=int)
            
            acquisition = [bytes('DataCube', 'utf-8')]
            acquisition = np.array(acquisition, dtype=h5py.special_dtype(vlen=str))
            f.create_dataset('Region/Acquisition', data=acquisition, dtype=h5py.special_dtype(vlen=str))
            center_energy = np.array([(y[-1]+y[0])/2], dtype=float)
            f.create_dataset('Region/CenterEnergy/Value', data=center_energy, dtype=float)
            description = np.array([bytes(desc[0], 'utf-8')], dtype=h5py.special_dtype(vlen=str))
            f.create_dataset('Region/Description', data=description, dtype=h5py.special_dtype(vlen=str))
            dwell = np.array([bytes('Unknown', 'utf-8')], dtype=h5py.special_dtype(vlen=str))
            f.create_dataset('Region/Dwell/Value', data=dwell, dtype=h5py.special_dtype(vlen=str))
            
            energy_mode = [bytes('Kinetic', 'utf-8')]
            energy_mode = np.array(energy_mode, dtype=h5py.special_dtype(vlen=str))
            f.create_dataset('Region/EnergyMode', data=energy_mode, dtype=h5py.special_dtype(vlen=str))
            excitation_energy = np.array([e_photon], dtype=float)
            f.create_dataset('Region/ExcitationEnergy/Value', data=excitation_energy, dtype=float)
            high_energy = np.array([y[-1]], dtype=float)
            f.create_dataset('Region/HighEnergy/Value', data=high_energy, dtype=float)
            iterations = np.array([bytes('Unknown', 'utf-8')], dtype=h5py.special_dtype(vlen=str))
            f.create_dataset('Region/Iterations/Value', data=iterations, dtype=h5py.special_dtype(vlen=str))
            
            lens_mode = [bytes('Angular', 'utf-8')]
            lens_mode = np.array(lens_mode, dtype=h5py.special_dtype(vlen=str))
            f.create_dataset('Region/LensMode', data=lens_mode, dtype=h5py.special_dtype(vlen=str))
            low_energy = np.array([y[0]], dtype=float)
            f.create_dataset('Region/LowEnergy/Value', data=low_energy, dtype=float)
            name = np.array([bytes(self.name, 'utf-8')], dtype=h5py.special_dtype(vlen=str))
            f.create_dataset('Region/Name', data=name, dtype=h5py.special_dtype(vlen=str))
            y_scale_max = np.array([x[-1]], dtype=float)
            f.create_dataset('Region/YScaleMax/Value', data=y_scale_max, dtype=float)
            y_scale_min = np.array([x[0]], dtype=float)
            f.create_dataset('Region/YScaleMin/Value', data=y_scale_min, dtype=float)
            pass_energy = np.array([bytes('Unknown', 'utf-8')], dtype=h5py.special_dtype(vlen=str))
            f.create_dataset('Region/PassEnergy/Value', data=pass_energy, dtype=h5py.special_dtype(vlen=str))
            step = np.array([y[1]-y[0]], dtype=float)
            f.create_dataset('Region/Step/Value', data=step, dtype=float)
            
            slit = [bytes('Unknown', 'utf-8')]
            slit = np.array(slit, dtype=h5py.special_dtype(vlen=str))
            f.create_dataset('Region/Slit', data=slit, dtype=h5py.special_dtype(vlen=str))
            if axis == 'kx':
                arr = self.update_binned_data(save=True, indky=self.slider_ky.value(), indkx=slice(li,hi+1))
                f.create_dataset("Spectrum", data=np.array(arr))
            else:
                arr = self.update_binned_data(save=True, indky=slice(li,hi+1), indkx=self.slider_kx.value())
                f.create_dataset("Spectrum", data=np.array(arr))
            del arr
            gc.collect()

    def __path_angle(self):
        while self.path_angle < 0:
            self.path_angle += 360
        while self.path_angle >= 360:
            self.path_angle -= 360
    
    def __md(self, axis="E_kx"):
        # hwnd = find_window()
        if hwnd:
            windll.user32.ShowWindow(hwnd, 9)
            windll.user32.SetForegroundWindow(hwnd)
        self.dirname = os.path.basename(self.path).removesuffix(".zarr")
        self.__path_angle()
        self.dir = os.path.join(self.path, f"Ang_{self.path_angle:.1f}_bin_{max(1, self.bin_e)}_{max(1, self.bin_kx)}_{max(1, self.bin_ky)}", axis)
        os.makedirs(self.dir, exist_ok=True)

    def save_as_zarr(self):
        self.apply_rotation(save=True)
        
        QApplication.setOverrideCursor(QCursor(Qt.WaitCursor))
        pr_bar = ProgressDialog(4, self.icon)
        pr_bar.resize(self.w//3, self.h//4)
        pr_bar.show()
        pr_bar.increaseProgress('Preparing Main Data Array')
        
        data = self.raw_data
        xmin, xmax = self.raw_kx[0], self.raw_kx[-1]
        ymin, ymax = self.raw_ky[0], self.raw_ky[-1]
        ty = self.raw_E
        
        pr_bar.increaseProgress('Preparing Metadata for Attributes')
        attr_array = np.zeros((data.shape[0], data.shape[1], 1))
        attr_array[:, 0, 0] = ty
        attr_array[0, 1, 0] = xmin
        attr_array[1, 1, 0] = xmax
        attr_array[2, 1, 0] = ymin
        attr_array[3, 1, 0] = ymax
        pr_bar.increaseProgress('Combining Data Cube')
        zdata = np.append(data, attr_array, axis=2)
        pr_bar.increaseProgress('Done')
        os.chdir(os.path.dirname(self.path))
        QApplication.restoreOverrideCursor()
        path, _ = QFileDialog.getSaveFileName(None, "Save Zarr File", f'data_cube_Ang_{self.path_angle:.1f}.zarr', "Zarr Files (*.zarr)")
        if path == "":
            return

        QApplication.setOverrideCursor(QCursor(Qt.WaitCursor))
        pr_bar = ProgressDialog(3, self.icon)
        pr_bar.resize(self.w//3, self.h//4)
        pr_bar.show()
        pr_bar.increaseProgress('Saving data')
        zarr.save(path, zdata)
        pr_bar.increaseProgress('Setting file attributes')
        for name in os.listdir(path):
            item_path = os.path.join(path, name)
            if os.path.isfile(item_path):
                os.system(f'attrib +h +s "{item_path}"')
            elif os.path.isdir(item_path):
                os.system(f'attrib +h +s "{item_path}"')
        path = os.path.join(path, '__disp__.zarr')
        zdata = np.asarray(self.raw_data_show, dtype=np.uint8)
        zarr.save_group(path, data=zdata, ang=np.array([0],dtype=np.float32))
        os.system(f'attrib +h +s "{path}"')
        for name in os.listdir(path):
            item_path = os.path.join(path, name)
            if os.path.isfile(item_path):
                os.system(f'attrib +h +s "{item_path}"')
            elif os.path.isdir(item_path):
                os.system(f'attrib +h +s "{item_path}"')
        pr_bar.increaseProgress('Done')
        QApplication.restoreOverrideCursor()
        del data, self.raw_data
    
    def save_as_zarr_disp(self):
        self.apply_rotation()
        
        QApplication.setOverrideCursor(QCursor(Qt.WaitCursor))
        pr_bar = ProgressDialog(3, self.icon)
        pr_bar.resize(self.w//3, self.h//4)
        pr_bar.show()
        pr_bar.increaseProgress('Preparing Main Data Array')
        
        data = np.asarray(self.raw_data_show, dtype=np.uint8)
        xmin, xmax = self.raw_kx[0], self.raw_kx[-1]
        ymin, ymax = self.raw_ky[0], self.raw_ky[-1]
        ty = self.raw_E
        
        pr_bar.increaseProgress('Preparing Metadata for Attributes')
        attr_array = np.zeros((data.shape[0], 2))
        attr_array[:, 0] = ty
        attr_array[0, 1] = xmin
        attr_array[1, 1] = xmax
        attr_array[2, 1] = ymin
        attr_array[3, 1] = ymax
        pr_bar.increaseProgress('Done')
        os.chdir(os.path.dirname(self.path))
        QApplication.restoreOverrideCursor()
        path, _ = QFileDialog.getSaveFileName(None, "Save Zarr File", f'data_cube_Ang_{self.path_angle:.1f}_disp.zarr', "Zarr Files (*.zarr)")
        if path == "":
            return

        QApplication.setOverrideCursor(QCursor(Qt.WaitCursor))
        pr_bar = ProgressDialog(3, self.icon)
        pr_bar.resize(self.w//3, self.h//4)
        pr_bar.show()
        pr_bar.increaseProgress('Saving data')
        zarr.save_group(path, data=data, attr_array=attr_array, ang=np.array([0], dtype=np.float32))
        pr_bar.increaseProgress('Setting file attributes')
        for name in os.listdir(path):
            item_path = os.path.join(path, name)
            if os.path.isfile(item_path):
                os.system(f'attrib +h +s "{item_path}"')
            elif os.path.isdir(item_path):
                os.system(f'attrib +h +s "{item_path}"')
        pr_bar.increaseProgress('Done')
        QApplication.restoreOverrideCursor()
        del data

    def update_E_job(self, arr):
        img_item = pg.ImageItem(arr.T)
        img_item.setLevels(np.min(arr), np.max(arr))
        self.hist.setImageItem(img_item)
        self.plot.setLimits(xMin=self.xl-self.dx/2, xMax=self.xh+self.dx/2, yMin=self.yl-self.dy/2, yMax=self.yh+self.dy/2)
        self.plot.setRange(xRange=self.xRange, yRange=self.yRange, padding=0)

        # self.plot.enableAutoRange()
        self.plot.setAspectLocked(True)  # 鎖定比例

        # self.rescale(kx_bin, ky_bin)
        rect = pg.QtCore.QRectF(self.xl, self.yl, self.dx, self.dy)  # 真實位置
        img_item.setRect(rect)
        self.plot.addItem(img_item)
        
        self.xlabel.setPixmap(self.kx_pixmap_x)
        self.ylabel.setPixmap(self.ky_pixmap_y)
        idx = self.slider_E.value()
        self.statusbar.setStyleSheet("font-size: 30px;")
        self.statusbar.showMessage(f"E index: {idx} (E={self.E[idx]:.3f}), angle={self.angle:.1f}")
        self.label_E.setText(f'E Slice (ky-kx) Index: {idx} (E={self.E[idx]:.3f})')

    def sync_rotate_edit(self):
        value = self.rotate_slider.value()
        angle = value / 10.0
        if self.prload:
            self.angle = angle - self.path_angle
        else:
            self.angle = angle
        self.rotate_edit.setText(f"{angle:.1f}")
        self.v_cross.setVisible(True)
        self.h_cross.setVisible(True)
        arr = self.rotate_array()
        self.xRange, self.yRange = self.plot.getViewBox().viewRange()[0], self.plot.getViewBox().viewRange()[1]
        self.update_E_job(arr)
        

    def sync_rotate_slider(self):
        try:
            value = float(self.rotate_edit.text())
            while value < 0:
                value += 360
            while value >= 360:
                value -= 360
        except Exception:
            value = 0.0
        if self.prload:
            self.angle = value - self.path_angle
        else:
            self.angle = value
        self.rotate_slider.setValue(int(value * 10))
        self.v_cross.setVisible(True)
        self.h_cross.setVisible(True)
        arr = self.rotate_array()
        self.xRange, self.yRange = self.plot.getViewBox().viewRange()[0], self.plot.getViewBox().viewRange()[1]
        self.update_E_job(arr)

    def rot_raw_data(self, pr_bar):
        angle = self.path_angle
        path = os.path.join(self.path, '__disp__.zarr')
        for i in range(self.raw_data_show.shape[0]):
            surface = self.raw_data[i, :, :]
            surface = rotate(surface, -angle, surface.shape)
            self.raw_data[i, :, :] = surface
            pr_bar.increaseProgress()
        pr_bar.increaseProgress('Updating Cube')
        os.chdir(self.path)
        if os.path.exists('__disp__.zarr'):
            shutil.rmtree('__disp__.zarr')
        zdata = np.asarray(self.raw_data/np.max(self.raw_data)*255, dtype=np.uint8)
        zarr.save_group(path, data=zdata, ang=np.array([self.path_angle], dtype=np.float32))
        os.system(f'attrib +h +s "{path}"')
        for name in os.listdir(path):
            item_path = os.path.join(path, name)
            if os.path.isfile(item_path):
                os.system(f'attrib +h +s "{item_path}"')
            elif os.path.isdir(item_path):
                os.system(f'attrib +h +s "{item_path}"')
        self.raw_data_show = zarr.open_group(path, mode='r+')['data']
        self.prload = False
    
    def rot_raw_data_show(self, pr_bar):
        if self.mode == 'standard':
            path = os.path.join(self.path, '__disp__.zarr')
        elif self.mode == 'display':
            path = self.path
        raw_data_show = np.asarray(zarr.open_group(path, mode='r')['data'], dtype=np.uint8)
        for i in range(self.raw_data_show.shape[0]):
            surface = raw_data_show[i, :, :]
            surface = rotate(surface, -self.angle, surface.shape)
            raw_data_show[i, :, :] = surface
            pr_bar.increaseProgress()
        pr_bar.increaseProgress('Updating Cube')
        os.chdir(self.path)
        if self.mode == 'standard':
            if os.path.exists('__disp__.zarr'):
                shutil.rmtree('__disp__.zarr')
        elif self.mode == 'display':
            os.chdir(os.path.dirname(self.path))
            for filename in os.listdir(path):
                file_path = os.path.join(path, filename)
                if os.path.isfile(file_path) or os.path.islink(file_path):
                    os.unlink(file_path)  # 刪除檔案或符號連結
                elif os.path.isdir(file_path):
                    shutil.rmtree(file_path)  # 刪除子資料夾
        zdata = np.asarray(raw_data_show, dtype=np.uint8)
        if self.mode == 'standard':
            zarr.save_group(path, data=zdata, ang=np.array([self.path_angle], dtype=np.float32))
            os.system(f'attrib +h +s "{path}"')
        elif self.mode == 'display':
            xmin, xmax = self.raw_kx[0], self.raw_kx[-1]
            ymin, ymax = self.raw_ky[0], self.raw_ky[-1]
            ty = self.raw_E
            
            attr_array = np.zeros((zdata.shape[0], 2))
            attr_array[:, 0] = ty
            attr_array[0, 1] = xmin
            attr_array[1, 1] = xmax
            attr_array[2, 1] = ymin
            attr_array[3, 1] = ymax
            zarr.save_group(path, data=zdata, attr_array=attr_array, ang=np.array([self.path_angle], dtype=np.float32))
        os.chdir(self.path)
        for name in os.listdir(path):
            item_path = os.path.join(path, name)
            if os.path.isfile(item_path):
                os.system(f'attrib +h +s "{item_path}"')
            elif os.path.isdir(item_path):
                os.system(f'attrib +h +s "{item_path}"')
        self.raw_data_show = zarr.open_group(path, mode='r+')['data']
        self.prload = False
                
    def apply_rotation(self, save=False):
        self.sync_rotate_slider()
        
        self.path_angle += self.angle
        self.__path_angle()
        QApplication.setOverrideCursor(QCursor(Qt.WaitCursor))
        pr_bar = ProgressDialog(self.raw_data_show.shape[0]+3, self.icon)
        pr_bar.resize(self.w//3, self.h//4)
        pr_bar.show()
        pr_bar.increaseProgress('Preparing Data')
        if save:
            self.get_raw_data()
            if self.path_angle != 0:
                self.rot_raw_data(pr_bar)
            else:
                self.rot_raw_data_show(pr_bar)
        else:
            if self.angle != 0:
                self.rot_raw_data_show(pr_bar)
            
        pr_bar.increaseProgress('Initializing')
        self.rotate_edit.disconnect()
        self.rotate_slider.disconnect()
        self.rotate_edit.setText("0.0")
        self.rotate_slider.setValue(0)
        self.rotate_edit.editingFinished.connect(self.sync_rotate_slider)
        self.rotate_slider.valueChanged.connect(self.sync_rotate_edit)
        self.bin_e_spin.setValue(1)
        self.bin_kx_spin.setValue(1)
        self.bin_ky_spin.setValue(1)
        self.update_binned_data()
        pr_bar.increaseProgress()
        QApplication.restoreOverrideCursor()

    def rotate_array(self):
        surface = self.data_show[self.slider_E.value(), :, :]
        if surface.shape[0] != surface.shape[1]:
            surface = cv2.resize(surface, (max(surface.shape), max(surface.shape)), interpolation=cv2.INTER_NEAREST)
        surface = rotate(surface, -self.angle, surface.shape)
        return surface

if __name__ == "__main__":
    app = QApplication(sys.argv)
    folder = QFileDialog.getExistingDirectory(None, "Select Zarr Folder")
    if folder == "":
        sys.exit(0)
    win = SliceBrowser(folder)
    win.show()
    sys.exit(app.exec())
'''
    with open(cdir+os.sep+'DataViewer_temp.py', 'w', encoding='utf-8') as f:
        f.write(code)
    f.close()
    def j():
        temp=os.sep+"DataViewer_temp.py"
        if hwnd:
            windll.user32.ShowWindow(hwnd, 9)
            windll.user32.SetForegroundWindow(hwnd)
        os.system(f'python -W ignore::SyntaxWarning -W ignore::UserWarning "{cdir+temp}"')
        os.system(f'del "{cdir+temp}"')
    threading.Thread(target=j,daemon=True).start()
    

class DataViewer(tk.Toplevel):
    def __init__(self, master=None, path=""):
        if master is None:
            master = tk.Tk()
            global hwnd
            hwnd = None
        if len(path) == 0:
            return
        print(f"Loading Zarr Data Cube from {path}")
        print('Please wait...')
        # hwnd = find_window()
        if hwnd:
            windll.user32.ShowWindow(hwnd, 9)
            windll.user32.SetForegroundWindow(hwnd)
        t=time.time()
        try:
            data = zarr.open(path, mode='r')
        except Exception as e:
            print(f"Error loading data from {path}: {e}")
            return
        xmin,xmax = data[0, 1, -1], data[1, 1, -1]
        ymin,ymax = data[2, 1, -1], data[3, 1, -1]
        E = data[:, 0, -1]  # Assuming the last dimension contains the energy values
        data = data[:,:,:data.shape[2]-1]  # Remove the last attribute dimension
        e_size, ky_size, kx_size = data.shape
        kx = np.linspace(xmin, xmax, kx_size)
        ky = np.linspace(ymin, ymax, ky_size)
        print(data.shape)

        super().__init__(master)
        self.title("3D Data Viewer")
        self.path = path
        self.raw_data = data    #Axis: 0: E, 1: ky, 2: kx
        print(f"Elapse time: {time.time()-t:.2f} s")
        self.raw_kx = kx
        self.raw_ky = ky
        self.raw_E = E
        self.angle = 0

        self.bin_e = tk.IntVar(value=1)
        self.bin_kx = tk.IntVar(value=1)
        self.bin_ky = tk.IntVar(value=1)

        self.axis = tk.StringVar(value='E')
        self.idx = tk.IntVar(value=data.shape[0]//2)
        
        style = ttk.Style()
        style.configure('Large.TRadiobutton', font=('Arial', size(14)))
        style.configure('Large.TButton', font=('Arial', size(14)))
        # Bin size controls
        ttk.Label(self, text="Bin E:").grid(row=0, column=0)
        self.bin_e_entry = ttk.Entry(self, textvariable=self.bin_e, width=5)
        self.bin_e_entry.grid(row=0, column=1)
        ttk.Label(self, text="Bin kx:").grid(row=0, column=2)
        self.bin_kx_entry = ttk.Entry(self, textvariable=self.bin_kx, width=5)
        self.bin_kx_entry.grid(row=0, column=3)
        ttk.Label(self, text="Bin ky:").grid(row=0, column=4)
        self.bin_ky_entry = ttk.Entry(self, textvariable=self.bin_ky, width=5)
        self.bin_ky_entry.grid(row=0, column=5)
        ttk.Button(self, text="Apply Bin", command=self.apply_bin, style='Large.TButton').grid(row=0, column=6)

        # Axis selection
        ttk.Label(self, text="Slice axis:").grid(row=1, column=0)
        for i, ax in enumerate(['E', 'kx', 'ky']):
            ttk.Radiobutton(self, text=ax, variable=self.axis, value=ax, command=self.update_slider, style='Large.TRadiobutton').grid(row=1, column=i+1)
        self.slider = ttk.Scale(self, from_=0, to=data.shape[0]-1, orient='horizontal', variable=self.idx, command=self.update_plot)
        self.slider.grid(row=2, column=0, columnspan=7, sticky='ew')
        self.idx_label = ttk.Label(self, text=f"Index: {self.idx.get()}")
        self.idx_label.grid(row=3, column=0, columnspan=7)

        self.fig = plt.Figure(figsize=(14*scale, 8*scale))
        self.ax = self.fig.add_subplot(111)
        self.canvas = FigureCanvasTkAgg(self.fig, master=self)
        
        self.efig = plt.Figure(figsize=(8*scale, 8*scale))
        self.eax = self.efig.add_subplot(111)
        self.eax.set_xlabel(r'$k_x (2\pi/\AA)$', font='Arial', fontsize=size(16))
        self.eax.set_ylabel(r'$k_y (2\pi/\AA)$', font='Arial', fontsize=size(16))
        self.ecanvas = FigureCanvasTkAgg(self.efig, master=self)
        
        self.hl, = self.eax.plot([0, 0], [0, 0], color='r', linestyle='--')
        self.vl, = self.eax.plot([0, 0], [0, 0], color='r', linestyle='--')
        self.hl.set_data([], [])
        self.vl.set_data([], [])
        
        self.sl_a = tk.DoubleVar(value=self.angle)
        self.sl_a.trace_add('write', self.set_angle_sl)

        self.fr_ang = tk.Frame(self, bg='white')
        self.angle_slider = tk.Scale(
            self.fr_ang, label='Angle', from_=0, to=360, orient='horizontal',
            variable=self.sl_a, state='active', bg='white', fg='black', resolution=0.1
        )
        self.angle_slider.pack(side=tk.TOP)
        
        self.text_a = tk.StringVar()
        self.text_a.set(str(self.angle))
        self.text_a.trace_add('write', self.set_angle_tx)
        self.text_ang = tk.Entry(self.fr_ang, bg='white', textvariable=self.text_a, font=('Arial', size(14), "bold"), state='normal', width=7).pack(side=tk.TOP)
        
        self.button_rot = ttk.Button(self.fr_ang, text="Rotate Cube", command=self.rot_cube, style='Large.TButton')
        self.button_rot.pack(side=tk.TOP)

        self.fr_lim = tk.Frame(self, bg='white')
        self.fr_hlim = tk.Frame(self.fr_lim, bg='white')
        self.fr_hlim.pack(side=tk.TOP, fill=tk.X)
        self.fr_llim = tk.Frame(self.fr_lim, bg='white')
        self.fr_llim.pack(side=tk.TOP, fill=tk.X)
        self.xlow_label = tk.Label(self.fr_llim, text='kx min:', bg='white', font=('Arial', size(16)))
        self.xlow_label.pack(side=tk.LEFT)
        self.xlow = tk.StringVar(value=str('%.3f'%self.raw_kx[0]))
        self.xlow.trace_add('write', self.set_axis)
        self.xlow_entry = tk.Entry(self.fr_llim, width=7, bg='white', font=('Arial', size(16)), textvariable=self.xlow)
        self.xlow_entry.pack(side=tk.LEFT)
        self.xhigh_label = tk.Label(self.fr_hlim, text='kx max:', bg='white', font=('Arial', size(16)))
        self.xhigh_label.pack(side=tk.LEFT)
        self.xhigh = tk.StringVar(value=str('%.3f'%self.raw_kx[-1]))
        self.xhigh.trace_add('write', self.set_axis)
        self.xhigh_entry = tk.Entry(self.fr_hlim, width=7, bg='white', font=('Arial', size(16)), textvariable=self.xhigh)
        self.xhigh_entry.pack(side=tk.LEFT)


        self.b_E_k = ttk.Button(self, text="Export to HDF5 File", style='Large.TButton')
        self.b_E_k.grid(row=1, column=6)
        
        self.bind('<Return>', lambda event: self.apply_bin(init=False))
        self.protocol("WM_DELETE_WINDOW", self.on_closing)

        self.apply_bin(init=True)
        
        self.focus_set()

    def set_axis(self, *args):
        if __name__ == '__main__':
            cmap=value3.get()   # MDC_cut.py
        else:
            cmap = 'viridis'
        try:
            xlow, xhigh = float(self.xlow.get()), float(self.xhigh.get())
        except ValueError:
            return
        if xlow > xhigh:
            xlow, xhigh = xhigh, xlow
        self.ax.clear()
        if self.axis.get() == 'kx':
            if xlow < self.ky[0]:
                self.xlow.set(str(self.ky[0]))
            if xhigh > self.ky[-1]:
                self.xhigh.set(str(self.ky[-1]))
            try:
                li = np.argwhere(self.ky-xlow <= (self.ky[1]-self.ky[0])/2)[-1][0]
            except IndexError:
                li = 0
            try:
                hi = np.argwhere(self.ky-xhigh >= (self.ky[1]-self.ky[0])/2)[0][0]
            except IndexError:
                hi = len(self.ky) - 1
                
            self.im = self.ax.imshow(self.img, extent=[self.ky[li], self.ky[hi], self.E[0], self.E[-1]],
                                    aspect='auto', origin='lower', cmap=cmap)
        elif self.axis.get() == 'ky':
            if xlow < self.kx[0]:
                self.xlow.set(str(self.kx[0]))
            if xhigh > self.kx[-1]:
                self.xhigh.set(str(self.kx[-1]))
            try:
                li = np.argwhere(self.kx-xlow <= (self.kx[1]-self.kx[0])/2)[-1][0]
            except IndexError:
                li = 0
            try:
                hi = np.argwhere(self.kx-xhigh >= (self.kx[1]-self.kx[0])/2)[0][0]
            except IndexError:
                hi = len(self.kx) - 1
            self.im = self.ax.imshow(self.img, extent=[self.kx[li], self.kx[hi], self.E[0], self.E[-1]],
                                    aspect='auto', origin='lower', cmap=cmap)

    def set_angle_sl(self, *args):
        try:
            self.angle = np.float64(self.sl_a.get())
            self.text_a.set(f'%.1f'%self.angle)
            self.vl.set_data([0, 0], [self.ky[0], self.ky[-1]])
            self.hl.set_data([self.kx[0], self.kx[-1]], [0, 0])
            self.rotate_image()
        except ValueError:
            print("Invalid input for angle value")
    
    def set_angle_tx(self, *args):
        try:
            self.angle = np.float64(self.text_a.get())
            self.sl_a.set(self.angle)
            self.vl.set_data([0, 0], [self.ky[0], self.ky[-1]])
            self.hl.set_data([self.kx[0], self.kx[-1]], [0, 0])
            self.rotate_image()
        except ValueError:
            print("Invalid input for angle value")

    def apply_bin(self, init=False, *args):
        self.config(cursor="watch")
        self.update()
        bin_e = max(1, self.bin_e.get())
        bin_kx = max(1, self.bin_kx.get())
        bin_ky = max(1, self.bin_ky.get())

        # Bin data
        data_binned = bin_data(self.raw_data, 0, bin_e)
        data_binned = bin_data(data_binned, 1, bin_ky)
        data_binned = bin_data(data_binned, 2, bin_kx)
        
        
        # Bin axes
        E_binned = self.raw_E[:data_binned.shape[0]*bin_e].reshape(-1, bin_e).mean(axis=1) if bin_e > 1 else self.raw_E
        ky_binned = self.raw_ky[:data_binned.shape[1]*bin_ky].reshape(-1, bin_ky).mean(axis=1) if bin_ky > 1 else self.raw_ky
        kx_binned = self.raw_kx[:data_binned.shape[2]*bin_kx].reshape(-1, bin_kx).mean(axis=1) if bin_kx > 1 else self.raw_kx

        self.data = data_binned
        data_binned = None
        self.kx = kx_binned
        self.ky = ky_binned
        self.E = E_binned

        self.e_size, self.ky_size, self.kx_size = self.data.shape

        # Reset slider and idx if out of range
        axis = self.axis.get()
        if axis == 'kx':
            self.slider.config(to=self.kx_size-1)
            if self.idx.get() > self.kx_size-1:
                self.idx.set(self.kx_size//2)
        elif axis == 'ky':
            self.slider.config(to=self.ky_size-1)
            if self.idx.get() > self.ky_size-1:
                self.idx.set(self.ky_size//2)
        elif axis == 'E':
            self.slider.config(to=self.e_size-1)
            if self.idx.get() > self.e_size-1:
                self.idx.set(self.e_size//2)

        if __name__ == '__main__':
            cmap=value3.get()   # MDC_cut.py
        else:
            cmap = 'viridis'
            
        if init:
            self.im = self.ax.imshow(self.data[:, :, self.idx.get()], extent=[self.ky[0], self.ky[-1], self.E[0], self.E[-1]],
                                    aspect='auto', origin='lower', cmap=cmap)
            self.eim = self.eax.imshow(self.data[self.idx.get(), :, :], extent=[self.kx[0], self.kx[-1], self.ky[0], self.ky[-1]],
                                       aspect='equal', origin='lower', cmap=cmap)
            # self.colorbar = self.fig.colorbar(self.im, ax=self.ax, label='Intensity')
        self.config(cursor="")
        self.update()
        self.update_plot()

    def update_slider(self):
        axis = self.axis.get()
        if axis == 'kx':
            self.slider.config(to=self.kx_size-1)
            if self.idx.get() > self.kx_size-1:
                self.idx.set(self.kx_size//2)
        elif axis == 'ky':
            self.slider.config(to=self.ky_size-1)
            if self.idx.get() > self.ky_size-1:
                self.idx.set(self.ky_size//2)
        elif axis == 'E':
            self.slider.config(to=self.e_size-1)
            if self.idx.get() > self.e_size-1:
                self.idx.set(self.e_size//2)
        self.update_plot()

    def update_plot(self, event=None):
        axis = self.axis.get()
        idx = int(self.idx.get())
        self.idx_label.config(text=f"Index: {idx}")
        if float(self.xlow.get()) > float(self.xhigh.get()):
            low, high = float(self.xhigh.get()), float(self.xlow.get())
            self.xlow.set(str(low))
            self.xhigh.set(str(high))
        if axis == 'kx':
            if float(self.xlow.get()) < self.ky[0]:
                self.xlow.set(str(self.ky[0]))
            if float(self.xhigh.get()) > self.ky[-1]:
                self.xhigh.set(str(self.ky[-1]))
            try:
                li = np.argwhere(self.ky-float(self.xlow.get()) <= (self.ky[1]-self.ky[0])/2)[-1][0]
            except IndexError:
                li = 0
            try:
                hi = np.argwhere(self.ky-float(self.xhigh.get()) >= (self.ky[1]-self.ky[0])/2)[0][0]
            except IndexError:
                hi = len(self.ky) - 1
            self.xlow_label.config(text='ky min:')
            self.xhigh_label.config(text='ky max:')
            self.b_E_k.config(command=self.gen_E_ky)
            self.img = self.data[:, li:hi+1, idx]
            extent = [self.ky[li], self.ky[hi], self.E[0], self.E[-1]]
            # if idx == 1101:
            #     self.ax.axis('off')
            #     self.ax.set_title('')
            #     self.ax.set_xlabel('')
            #     self.ax.set_ylabel('')
            #     self.ax.set_xlim(0, self.ky[-1])
            #     self.ax.set_ylim(self.E[0], 21.08)
            #     self.fig.tight_layout()
            #     copy_to_clipboard(self.fig)
            # else:
            self.ax.axis('on')
            self.ax.set_xlabel(r'$k_y (2\pi/\AA)$', font='Arial', fontsize=size(16))
            self.ax.set_ylabel('Kinetic Energy (eV)', font='Arial', fontsize=size(16))
            self.ax.set_title(f'$k_x$ = {self.kx[idx]:.3f}', font='Arial', fontsize=size(16))
        elif axis == 'ky':
            if float(self.xlow.get()) < self.kx[0]:
                self.xlow.set(str(self.kx[0]))
            if float(self.xhigh.get()) > self.kx[-1]:
                self.xhigh.set(str(self.kx[-1]))
            try:
                li = np.argwhere(self.kx-float(self.xlow.get()) <= (self.kx[1]-self.kx[0])/2)[-1][0]
            except IndexError:
                li = 0
            try:
                hi = np.argwhere(self.kx-float(self.xhigh.get()) >= (self.kx[1]-self.kx[0])/2)[0][0]
            except IndexError:
                hi = len(self.kx) - 1
            self.xlow_label.config(text='kx min:')
            self.xhigh_label.config(text='kx max:')
            self.b_E_k.config(command=self.gen_E_kx)
            self.img = self.data[:, idx, li:hi+1]
            extent = [self.kx[li], self.kx[hi], self.E[0], self.E[-1]]
            # if idx == 1101:
            #     self.ax.axis('off')
            #     self.ax.set_title('')
            #     self.ax.set_xlabel('')
            #     self.ax.set_ylabel('')
            #     self.ax.set_xlim(0, self.kx[-1])
            #     self.ax.set_ylim(self.E[0], 21.08)
            #     self.fig.tight_layout()
            #     copy_to_clipboard(self.fig)
            # else:
            self.ax.axis('on')
            self.ax.set_xlabel(r'$k_x (2\pi/\AA)$', font='Arial', fontsize=size(16))
            self.ax.set_ylabel('Kinetic Energy (eV)', font='Arial', fontsize=size(16))
            self.ax.set_title(f'$k_y$ = {self.ky[idx]:.3f}', font='Arial', fontsize=size(16))
        elif axis == 'E':
            try:
                self.fr_lim.grid_forget()
            except:
                pass
            self.fr_ang.grid(row=4, column=7, rowspan=2)
            self.img = self.data[idx, :, :]
            extent = [self.kx[0], self.kx[-1], self.ky[0], self.ky[-1]]
            self.eax.set_title(f'E = {self.E[idx]:.3f} eV', font='Arial', fontsize=size(16))
        if axis != 'E':
            self.ecanvas.get_tk_widget().grid_forget()
            self.canvas.get_tk_widget().grid(row=4, column=0, columnspan=7)
            self.fr_ang.grid_forget()
            self.fr_lim.grid(row=4, column=7, rowspan=2)
            self.b_E_k.grid(row=1, column=6)
            self.im.set_data(self.img)
            self.im.set_extent(extent)
            self.ax.set_aspect('auto')
            # if float(self.xlow.get()) > float(self.xhigh.get()):
            #     low, high = float(self.xhigh.get()), float(self.xlow.get())
            #     self.xlow.set(str(low))
            #     self.xhigh.set(str(high))
            # self.ax.set_xlim(float(self.xlow.get()), float(self.xhigh.get()))
            self.ax.set_yticklabels(labels=self.ax.get_yticklabels(), font='Arial', fontsize=size(14))
            self.ax.set_xticklabels(labels=self.ax.get_xticklabels(), font='Arial', fontsize=size(14))
            if __name__ == '__main__':
                self.im.set_cmap(value3.get())
            self.im.set_clim(np.nanmin(self.img), np.nanmax(self.img))
            self.fig.tight_layout()
            self.canvas.draw()
        else:
            self.canvas.get_tk_widget().grid_forget()
            self.ecanvas.get_tk_widget().grid(row=4, column=0, columnspan=7)
            self.b_E_k.grid_forget()
            self.vl.set_data([], [])
            self.hl.set_data([], [])
            self.rotate_image()
            self.eim.set_extent(extent)
            self.eax.set_yticklabels(labels=self.eax.get_yticklabels(), font='Arial', fontsize=size(14))
            self.eax.set_xticklabels(labels=self.eax.get_xticklabels(), font='Arial', fontsize=size(14))
            self.eim.set_clim(np.nanmin(self.img), np.nanmax(self.img))
            self.efig.tight_layout()
            self.ecanvas.draw()
        
    def gen_E_kx(self, event=None):
        # hwnd = find_window()
        if hwnd:
            windll.user32.ShowWindow(hwnd, 9)
            windll.user32.SetForegroundWindow(hwnd)
        self.__md(axis="E_kx")
        v = self.ky[int(self.idx.get())]
        self.name = f"{self.dirname}_ky_{v:.3f}"
        self.file = os.path.join(self.dir, f"{self.name}.h5")
        self.gen_h5(axis='kx')
        print(f"Save to {self.file}")

    def gen_E_ky(self, event=None):
        # hwnd = find_window()
        if hwnd:
            windll.user32.ShowWindow(hwnd, 9)
            windll.user32.SetForegroundWindow(hwnd)
        self.__md(axis="E_ky")
        v = self.kx[int(self.idx.get())]
        self.name = f"{self.dirname}_kx_{v:.3f}"
        self.file = os.path.join(self.dir, f"{self.name}.h5")
        self.gen_h5(axis='ky')
        print(f"Save to {self.file}")

    def rot_cube(self):
        if self.angle != 0:
            self.pr_bar = ProgressBar(self)
            self.pr_bar.start(self.raw_data.shape[0])
            for i in range(self.raw_data.shape[0]):
                surface = self.raw_data[i, :, :]
                surface = rotate(surface, -self.angle, surface.shape)
                self.raw_data[i, :, :] = surface
                self.pr_bar.add()
            self.sl_a.set(0)
            self.update_plot()
            
    def rotate_image(self):
        surface = self.data[int(self.idx.get()), :, :]
        if surface.shape[0] != surface.shape[1]:
            surface = cv2.resize(surface, (max(surface.shape), max(surface.shape)), interpolation=cv2.INTER_NEAREST)
        surface = rotate(surface, -self.angle, surface.shape)
        if __name__ == '__main__':
                self.eim.set_cmap(value3.get())
        self.eim.set_data(surface)
        self.ecanvas.draw()
    
    def gen_h5(self, axis='kx'):
        with h5py.File(self.file, "w") as f:
            e_photon = 21.2  # deafault He I photon energy
            desc=["Sliced data"]
            y = self.E
            if axis == 'kx':
                try:
                    li = np.argwhere(self.kx-float(self.xlow.get()) <= (self.kx[1]-self.kx[0])/2)[-1][0]
                except IndexError:
                    li = 0
                try:
                    hi = np.argwhere(self.kx-float(self.xhigh.get()) >= (self.kx[1]-self.kx[0])/2)[0][0]
                except IndexError:
                    hi = len(self.kx) - 1
                x = self.kx[li:hi+1]
            else:
                try:
                    li = np.argwhere(self.ky-float(self.xlow.get()) <= (self.ky[1]-self.ky[0])/2)[-1][0]
                except IndexError:
                    li = 0
                try:
                    hi = np.argwhere(self.ky-float(self.xhigh.get()) >= (self.ky[1]-self.ky[0])/2)[0][0]
                except IndexError:
                    hi = len(self.ky) - 1
                x = self.ky[li:hi+1]
            xsize = np.array([len(y)], dtype=int)
            f.create_dataset('Data/XSize/Value', data=xsize, dtype=int)
            ysize = np.array([len(x)], dtype=int)
            f.create_dataset('Data/YSize/Value', data=ysize, dtype=int)
            
            acquisition = [bytes('DataCube', 'utf-8')]
            acquisition = np.array(acquisition, dtype=h5py.special_dtype(vlen=str))
            f.create_dataset('Region/Acquisition', data=acquisition, dtype=h5py.special_dtype(vlen=str))
            center_energy = np.array([(y[-1]+y[0])/2], dtype=float)
            f.create_dataset('Region/CenterEnergy/Value', data=center_energy, dtype=float)
            description = np.array([bytes(desc[0], 'utf-8')], dtype=h5py.special_dtype(vlen=str))
            f.create_dataset('Region/Description', data=description, dtype=h5py.special_dtype(vlen=str))
            dwell = np.array([bytes('Unknown', 'utf-8')], dtype=h5py.special_dtype(vlen=str))
            f.create_dataset('Region/Dwell/Value', data=dwell, dtype=h5py.special_dtype(vlen=str))
            
            energy_mode = [bytes('Kinetic', 'utf-8')]
            energy_mode = np.array(energy_mode, dtype=h5py.special_dtype(vlen=str))
            f.create_dataset('Region/EnergyMode', data=energy_mode, dtype=h5py.special_dtype(vlen=str))
            excitation_energy = np.array([e_photon], dtype=float)
            f.create_dataset('Region/ExcitationEnergy/Value', data=excitation_energy, dtype=float)
            high_energy = np.array([y[-1]], dtype=float)
            f.create_dataset('Region/HighEnergy/Value', data=high_energy, dtype=float)
            iterations = np.array([bytes('Unknown', 'utf-8')], dtype=h5py.special_dtype(vlen=str))
            f.create_dataset('Region/Iterations/Value', data=iterations, dtype=h5py.special_dtype(vlen=str))
            
            lens_mode = [bytes('Angular', 'utf-8')]
            lens_mode = np.array(lens_mode, dtype=h5py.special_dtype(vlen=str))
            f.create_dataset('Region/LensMode', data=lens_mode, dtype=h5py.special_dtype(vlen=str))
            low_energy = np.array([y[0]], dtype=float)
            f.create_dataset('Region/LowEnergy/Value', data=low_energy, dtype=float)
            name = np.array([bytes(self.name, 'utf-8')], dtype=h5py.special_dtype(vlen=str))
            f.create_dataset('Region/Name', data=name, dtype=h5py.special_dtype(vlen=str))
            y_scale_max = np.array([x[-1]], dtype=float)
            f.create_dataset('Region/YScaleMax/Value', data=y_scale_max, dtype=float)
            y_scale_min = np.array([x[0]], dtype=float)
            f.create_dataset('Region/YScaleMin/Value', data=y_scale_min, dtype=float)
            pass_energy = np.array([bytes('Unknown', 'utf-8')], dtype=h5py.special_dtype(vlen=str))
            f.create_dataset('Region/PassEnergy/Value', data=pass_energy, dtype=h5py.special_dtype(vlen=str))
            step = np.array([y[1]-y[0]], dtype=float)
            f.create_dataset('Region/Step/Value', data=step, dtype=float)
            
            slit = [bytes('Unknown', 'utf-8')]
            slit = np.array(slit, dtype=h5py.special_dtype(vlen=str))
            f.create_dataset('Region/Slit', data=slit, dtype=h5py.special_dtype(vlen=str))
            
            if axis == 'kx':
                f.create_dataset("Spectrum", data=np.array(self.data[:, int(self.idx.get()), li:hi+1]))
            else:
                f.create_dataset("Spectrum", data=np.array(self.data[:, li:hi+1, int(self.idx.get())]))
    
    def __md(self, axis="E_kx"):
        # hwnd = find_window()
        if hwnd:
            windll.user32.ShowWindow(hwnd, 9)
            windll.user32.SetForegroundWindow(hwnd)
        self.dirname = os.path.basename(self.path).removesuffix(".zarr")
        self.dir = os.path.join(self.path, f"Ang_{self.angle:.1f}_bin_{max(1, self.bin_e.get())}_{max(1, self.bin_kx.get())}_{max(1, self.bin_ky.get())}", axis)
        os.makedirs(self.dir, exist_ok=True)
        
    def on_closing(self):
        self.destroy()
        del self.raw_data, self.data, self.im, self.eim, self.ax, self.eax, self.canvas, self.ecanvas, self.fig, self.efig
        gc.collect()

class MenuIconManager:
    def __init__(self):
        self.icons = {}
        self.mini_icons = {}
        self.giant_icons = {}
        self.size = (int(30*ScaleFactor/100), int(30*ScaleFactor/100))
        self.mini_size = (int(20*ScaleFactor/100), int(20*ScaleFactor/100))
        self.giant_size = (int(60*ScaleFactor/100), int(60*ScaleFactor/100))
        self.scale = ScaleFactor/100
        if dpi is not None:
            scale = odpi/dpi
            self.scale = scale
            self.size = (int(self.size[0] * scale), int(self.size[1] * scale))
            self.mini_size = (int(self.mini_size[0] * scale), int(self.mini_size[1] * scale))
            self.giant_size = (int(self.giant_size[0] * scale), int(self.giant_size[1] * scale))
        self.create_icons()
        
    
    def gen_icon(self, icon):
        icon = Image.open(io.BytesIO(b64decode(icon))).resize(self.size)
        return ImageTk.PhotoImage(icon), ImageTk.PhotoImage(icon.resize(self.mini_size)), ImageTk.PhotoImage(icon.resize(self.giant_size))
    
    def create_icons(self):
        """創建各種圖示"""
        self.icons['raw_data'], self.mini_icons['raw_data'], self.giant_icons['raw_data'] = self.create_raw_data_icon()
        self.icons['mdc_fitted_file'], self.mini_icons['mdc_fitted_file'], self.giant_icons['mdc_fitted_file'] = self.create_mdc_fitted_file_icon()
        self.icons['edc_fitted_file'], self.mini_icons['edc_fitted_file'], self.giant_icons['edc_fitted_file'] = self.create_edc_fitted_file_icon()
        self.icons['bare_band'], self.mini_icons['bare_band'], self.giant_icons['bare_band'] = self.create_bare_band_icon()
        
        self.icons['exp_graph'], self.mini_icons['exp_graph'], self.giant_icons['exp_graph'] = self.create_exp_graph_icon()
        self.icons['exp_origin'], self.mini_icons['exp_origin'], self.giant_icons['exp_origin'] = self.create_exp_origin_icon()
        
        self.icons['spectrogram'], self.mini_icons['spectrogram'], self.giant_icons['spectrogram'] = self.create_spectrogram_icon()
        self.icons['mdc_fitter'], self.mini_icons['mdc_fitter'], self.giant_icons['mdc_fitter'] = self.create_mdc_fitter_icon()
        self.icons['edc_fitter'], self.mini_icons['edc_fitter'], self.giant_icons['edc_fitter'] = self.create_edc_fitter_icon()
        self.icons['mdc_cutter'], self.mini_icons['mdc_cutter'], self.giant_icons['mdc_cutter'] = self.create_mdc_cutter_icon()
        self.icons['edc_cutter'], self.mini_icons['edc_cutter'], self.giant_icons['edc_cutter'] = self.create_edc_cutter_icon()
        self.icons['calculator'], self.mini_icons['calculator'], self.giant_icons['calculator'] = self.create_calc_icon()
        self.icons['view_3d'], self.mini_icons['view_3d'], self.giant_icons['view_3d'] = self.create_view_3d_icon()
    
    def create_spectrogram_icon(self):
        icon = "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"
        return self.gen_icon(icon)
    
    def create_raw_data_icon(self):
        icon = ""
        return self.gen_icon(icon)
    
    def create_mdc_fitted_file_icon(self):
        icon = "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"
        return self.gen_icon(icon)
    
    def create_edc_fitted_file_icon(self):
        icon = ""
        return self.gen_icon(icon)
    
    def create_bare_band_icon(self):
        icon = ""
        return self.gen_icon(icon)
    
    # def create_file_icon(self, color):
    #     """創建立體資料夾圖示"""
    #     base_scale = 2
    #     base_size = (self.size[0] * base_scale, self.size[1] * base_scale)
        
    #     icon = Image.new('RGB', base_size, color='white')
    #     draw = ImageDraw.Draw(icon)
        
    #     # 所有座標都按比例放大
    #     scale = base_scale
        
    #     offset_x = int(self.scale * 5 * scale) # 向右偏移
    #     offset_y = int(self.scale * 5 * scale)  # 向下偏移
        
    #     # 資料夾主體 (立體效果) - 調整座標讓它更置中
    #     draw.polygon([(5*scale + offset_x, 10*scale + offset_y), 
    #                 (21*scale + offset_x, 10*scale + offset_y), 
    #                 (23*scale + offset_x, 12*scale + offset_y), 
    #                 (23*scale + offset_x, 22*scale + offset_y), 
    #                 (7*scale + offset_x, 22*scale + offset_y), 
    #                 (5*scale + offset_x, 20*scale + offset_y)], 
    #                 fill=color, outline='gray')
        
    #     # 資料夾標籤頁 - 調整座標讓它更置中
    #     draw.polygon([(5*scale + offset_x, 7*scale + offset_y), 
    #                 (13*scale + offset_x, 7*scale + offset_y), 
    #                 (15*scale + offset_x, 10*scale + offset_y), 
    #                 (5*scale + offset_x, 10*scale + offset_y)], 
    #                 fill=color, outline='gray')
        
    #     # 立體邊緣（線條寬度也要放大）
    #     draw.line([(21*scale + offset_x, 10*scale + offset_y), 
    #             (23*scale + offset_x, 12*scale + offset_y)], 
    #             fill='darkgray', width=scale)
    #     draw.line([(23*scale + offset_x, 12*scale + offset_y), 
    #             (23*scale + offset_x, 22*scale + offset_y)], 
    #             fill='darkgray', width=scale)
    #     draw.line([(5*scale + offset_x, 20*scale + offset_y), 
    #             (7*scale + offset_x, 22*scale + offset_y)], 
    #             fill='darkgray', width=scale)
        
    #     icon = icon.crop((self.scale*5*scale, self.scale*5*scale, self.size[0]*scale-self.scale*5*scale, self.size[1]*scale-self.scale*5*scale))
    #     print(icon.size)
        
    #     return ImageTk.PhotoImage(icon.resize(self.size)), ImageTk.PhotoImage(icon.resize(self.mini_size)), ImageTk.PhotoImage(icon.resize(self.giant_size))

    def create_mdc_fitter_icon(self):
        icon = "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"
        return self.gen_icon(icon)
    
    def create_edc_fitter_icon(self):
        icon = "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"
        return self.gen_icon(icon)
    
    def create_mdc_cutter_icon(self):
        icon = "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"
        return self.gen_icon(icon)

    def create_edc_cutter_icon(self):
        icon = ""
        return self.gen_icon(icon)
        
    def create_calc_icon(self):
        icon = "iVBORw0KGgoAAAANSUhEUgAAAGAAAABgBAMAAAAQtmoLAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAkUExURQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKZYAkcAAAAMdFJOUwAQj8//358g768wv6+Gb30AAAAJcEhZcwAADsMAAA7DAcdvqGQAAACDSURBVFjDY2AYBYMMMCq74ABhBVg1SLjgBO1YNaTg1uCGVUMIbg0eWDW44AGjGlA0EC08qmFUwwjQMAiz6IjUAKbRiFENQyDiRmN6NKaHTrAOQg2DMOLIiWkoh/hQGnkaBmHEDS4NJHf88HQtPbFqEMGtoQurBsYMXOq7sXePR8EAAgAJ+7eqKXMMkwAAAABJRU5ErkJggg=="
        return self.gen_icon(icon)
    
    def create_exp_graph_icon(self):
        icon = "iVBORw0KGgoAAAANSUhEUgAAAGAAAABgCAMAAADVRocKAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAD5UExURQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBd3TwAAABTdFJOUwD/BIPjhxBw72DRINPSj69AUM+A378wn5sYdKYJONZrms4xX/yTI8H2WYW7HlTxR6kMLstuaTQHpZZD4Plcf74iHbqEWPXmSpSsDzJy1Dc8TLN4S9z0LwAAAAlwSFlzAAAOwwAADsMBx2+oZAAAAu5JREFUaEPtl9d62zAMhQkPWYlbx3Fkp7vp3m3Spnuke+/3f5h+ACWSonhoVc2Vy//CFg7EQ0sQQVmpRCKRSCRWCjpkfP80QQPff2Um8NUuACcgdwA4AbkDwAnIHQBOQO4AcPLlXn8wGPZMmNnMMnwnIPc57FfRKKc1m4vjOwF5ncP1Mshyonxsk1F8JyAf4fBoGUw42LDJKL4TkIccDvXxVCc3bTaG7wRkp8jZTCdzm43hO8VlZkvniLb8TBDgBGSl1DgnoomUoVWdgROQlVIbfHeyrCCiuZ8LAZyArNQm66Pyu02dgROQdYXll8uV+OkAwAnIUuF8wUcZn7Dt55sAJyAvuMLl0yNPk8wVBTgBeU5ERdXpuM6Fd0IT4BSWRyyaysqKdpteb3TsuBNqwk5hmZuc24O2uSDOYjhBdPKUDTVBJyDz6nINvQlPnyGiszatCTqFZbkltf5QXww7HJ07754AnMJyxhWeZ2payH0fFxOleFVUi+HCRRlzqTYo6ARkqfB0wQtsS6lFQZSvjVnTF3X5ih5z9VptVMgpLEuT257wJ9Fkqr9nPJ1uetf1EKIbN91hAScgixU/+k2kdZS7hLt1C1qrSUFZ6ongOt+6XUWDO864plNYrraxMFJn2SKE3b2IE5DNNhaGm97deybcjziFZWlyMbjp3TfR+gPoBGReAlG46T18ZMLH0CksyxKIw4vvydMqevYcOIVl6TlLkB71woQHL4NOlppsn48I3PRevTbhm6CTxZXLN7llTJVSb99V0fsPAScHR5Ym1wLZ3D6a8NPnhpOLI7eosIab3he7IL82nFysLE2uHVznfRN9++451bAy74st4aa3t2vCHc+phpGjTc6Hm94PG/5sMUG8yflI0xuYsOD3fX3o+xu55SNawZcgf4Y0XBR95PvbK9iY/QVzfif7Na/47TqBCf4d4ATkDgAnIHcAOAG5A8AJyB0ATkDuAHDS8uHh+6cJGvj+KzBBIpFIJP5r/gCTlCOnhkHHQAAAAABJRU5ErkJggg=="
        return self.gen_icon(icon)
    
    def create_exp_origin_icon(self):
        icon = ""
        return self.gen_icon(icon)
    
    def create_view_3d_icon(self):
        icon = r""
        return self.gen_icon(icon)
    
    def get_icon(self, name):
        return self.icons.get(name)
    
    def get_mini_icon(self, name):
        return self.mini_icons.get(name)
    
    def get_giant_icon(self, name):
        return self.giant_icons.get(name)

class ToolTip():
    def __init__(self, widget, text: str, accelerator=None):
        self.widget = widget
        self.text = text
        self.tooltip = None
        self.icon = MenuIconManager()
        self.widget_text = self.widget.cget('text') if accelerator is None else self.widget.cget('text') + ' (' + accelerator + ')'
        
        self.dict = {'Load Raw Data': 'raw_data',
                     'Load MDC Fitted File': 'mdc_fitted_file',
                     'Load EDC Fitted File': 'edc_fitted_file',
                     'Load Bare Band File': 'bare_band',
                     'Spectrogram': 'spectrogram',
                     'MDC Fitter': 'mdc_fitter',
                     'EDC Fitter': 'edc_fitter',
                     'MDC Cutter': 'mdc_cutter',
                     'EDC Cutter': 'edc_cutter',
                     'E-k Angle Converter': 'calculator',
                     'Export Graph': 'exp_graph',
                     'Export to Origin': 'exp_origin',
                     'Volume Viewer': 'view_3d',
        }
                     
        
        self.widget.bind("<Enter>", self.show_tooltip)
        self.widget.bind("<Leave>", self.hide_tooltip)
        self.widget.bind("<Motion>", self.update_position)
    
    def show_tooltip(self, event=None):
        # 建立頂層視窗
        self.tooltip = tk.Toplevel(self.widget, background="#ffffff")
        self.tooltip.wm_overrideredirect(True)
        main_frame = tk.Frame(self.tooltip, background="#ffffff", relief="raised", bd=2)
        main_frame.grid(row=0, column=0)
    
        # 顯示標籤
        label_icon = tk.Label(main_frame, image=self.icon.get_giant_icon(self.dict[self.widget.cget('text')]), background="#ffffff")
        label_icon.grid(row=0, column=0)
        label_title = tk.Label(main_frame, text=self.widget_text, font=("Arial", scaled_font_size, "bold"), background="#ffffff")
        label_title.grid(row=0, column=1, sticky="w")
        label = tk.Label(main_frame, text=self.text, font=("Arial", scaled_font_size), background="#ffffff", wraplength=300, justify="left")
        label.grid(row=1, column=1, sticky="w")
        
        self.tooltip.update_idletasks()  # 更新以獲取實際大小
        
        # 計算位置並設定
        self._position_tooltip(event.x_root, event.y_root)
    
    def _position_tooltip(self, mouse_x, mouse_y):
        if not self.tooltip:
            return
        scale = windll.shcore.GetScaleFactorForDevice(0)/100
        # 取得螢幕和提示框大小
        screen_width = self.widget.winfo_screenwidth()
        screen_height = self.widget.winfo_screenheight()
        scw = windll.user32.GetSystemMetrics(0)
        sch = windll.user32.GetSystemMetrics(1)
        tooltip_width = self.tooltip.winfo_width()
        tooltip_height = self.tooltip.winfo_height()
        
        # 定義螢幕區域的邊界閾值（分為四個象限）
        right_zone = screen_width * 0.7  # 右側區域起點
        bottom_zone = screen_height * 0.7  # 下方區域起點
        
        # 根據滑鼠位置決定提示框位置
        # print(f"Mouse Position: ({mouse_x}, {mouse_y})")
        # print('scw, sch:', scw, sch)
        if mouse_x > scw:
            mouse_x -= int(scw * scale)
            x_offset = int(scw * scale)
            right_zone += scw  # 右側區域起點
            bottom_zone += sch  # 下方區域起點
        else:
            x_offset = 0
        if mouse_y > sch:
            mouse_y -= int(sch * scale)
            y_offset = int(sch * scale)
            right_zone += scw  # 右側區域起點
            bottom_zone += sch  # 下方區域起點
        else:
            y_offset = 0
        
            
        if mouse_x > right_zone and mouse_y < bottom_zone:
            # 右上角：顯示在左下方
            x = mouse_x + x_offset - tooltip_width - 10
            y = mouse_y + y_offset + 10
        elif mouse_x < right_zone and mouse_y > bottom_zone:
            # 左下角：顯示在右上方
            x = mouse_x + x_offset + 10
            y = mouse_y + y_offset - tooltip_height - 10
        elif mouse_x > right_zone and mouse_y > bottom_zone:
            # 右下角：顯示在左上方
            x = mouse_x + x_offset - tooltip_width - 10
            y = mouse_y + y_offset - tooltip_height - 10
        else:
            # 預設（左上或中間區域）：顯示在右下方
            x = mouse_x + x_offset + 10
            y = mouse_y + y_offset + 10
        
        # 確保提示框不會超出螢幕
        # print(tooltip_width)
        # print(int(2*sch*scale) - tooltip_height - 5, y)
        if x_offset == 0:
            x = max(5 + x_offset, min(scw - tooltip_width - 5, x))
        else:
            x = max(5 + x_offset, min(int(2*scw*scale) - tooltip_width - 5, x))
        if y_offset == 0:
            y = max(5 + y_offset, min(sch - tooltip_height - 5, y))
        else:
            y = min(5 + y_offset, min(int(2*sch*scale) - tooltip_height - 5, y))
        # print(f"Tooltip Position: ({x}, {y})")
        self.tooltip.wm_geometry(f"+{x}+{y}")
    
    def update_position(self, event=None):
        if self.tooltip:
            self._position_tooltip(event.x_root, event.y_root)
    
    def hide_tooltip(self, event=None):
        if self.tooltip:
            self.tooltip.destroy()
            self.tooltip = None

def set_window_background(g):
    """設定視窗背景圖片"""
    try:
        # 載入圖片
        bg_image = Image.open(io.BytesIO(b64decode(icon)))
        bg_image = bg_image.resize((800, 600), Image.Resampling.LANCZOS)
        bg_photo = ImageTk.PhotoImage(bg_image)
        
        # 創建背景 Label
        bg_label = tk.Label(g, image=bg_photo)
        bg_label.place(x=0, y=0, relwidth=1, relheight=1)
        bg_label.image = bg_photo  # 保持引用
        
        return bg_label
    except Exception as e:
        print(f"Fail to load background image: {e}")
        return None

class Button(tk.Button):
    """自定義按鈕類別，增加背景顏色"""
    def __init__(self, master=None, **kwargs):
        super().__init__(master, **kwargs)
        self.config(bg="white")

def poly_smooth(x, y, order=6,xx=None):
    """
    Polynomial fitting and smoothing.
    
    Parameters
    ----------
        x (array-like): 1D array
        y (array-like): 1D array
        order (int): default=6
        xx (array-like): 1D array, interpolation points, default: None
    Returns
    -------
        y (np.ndarray) : Smoothed or interpolated y values.
    """
    coeffs = np.polyfit(x, y, order)
    if xx is None:
        y = np.polyval(coeffs, x)
    else:
        y = np.polyval(coeffs, xx)
    return y

def smooth(x,l=20,p=3):
    """
    Using Savitzky-Golay filter to smooth the data.
    
    Parameters
    ------
    x : 1D array
        data to be smoothed
    l : int, default: 20
        window length
    p : int, default: 3
        polynomial order
    """
    x=savgol_filter(x, l, p)
    # for i in range(len(x)):
    #     if i>=l//2 and i+1<len(x)-l//2:
    #         x[i]=np.mean(x[i-l//2:i+l//2])
    return x

def show_info():
    # 創建自定義窗口
    info_window = tk.Toplevel()
    info_window.title("Information")
    
    # 添加信息標籤
    l = tk.Label(info_window, text="Graph copied to clipboard", font=("Arial", size(30), "bold"),fg='red')
    l.pack(pady=5)
    label = tk.Label(info_window, text="window closed in 3 second", font=("Arial", size(20)))
    label.pack(pady=5)

    info_window.update()
    w= info_window.winfo_reqwidth()
    h= info_window.winfo_reqheight()
    info_window.geometry(f"{w}x{h}+{screen_width//2-w//2}+{screen_height//2-h//2}")
    
    # 設置計時器，3 秒後自動關閉窗口
    info_window.update()
    info_window.after(1000, label.config(text="window closed in 2 second"))
    info_window.update()
    info_window.after(1000, label.config(text="window closed in 1 second"))
    info_window.update()
    info_window.after(1000, label.config(text="window closed in 0 second"))
    info_window.update()
    info_window.destroy()
    
def f_copy_to_clipboard():
    copy_to_clipboard(ff=fig)
    if value.get() != '---Plot1---' or value1.get() != '---Plot2---' or value2.get() != '---Plot3---':
        st.put('Copied to clipboard')
        
def copy_to_clipboard(ff) -> None:
    """
    Copies the given figure to the clipboard as a bitmap image.
    
    Parameters
    -----------
        ff (matplotlib.figure.Figure) : The figure to be copied to the clipboard.
    
    Returns
    -----------
        None
    """
    try:
        limg.config(image=img[np.random.randint(len(img))])
    except:
        pass
    buf = io.BytesIO()
    ff.savefig(buf, format='png')
    buf.seek(0)
    image = Image.open(buf)
    output = io.BytesIO()
    
    image.convert("RGB").save(output, "BMP")
    data = output.getvalue()[14:]
    output.close()
    send_to_clipboard(win32clipboard.CF_DIB, data)
    
def send_to_clipboard(clip_type, data):
    win32clipboard.OpenClipboard()
    win32clipboard.EmptyClipboard()
    win32clipboard.SetClipboardData(clip_type, data)
    win32clipboard.CloseClipboard()

class spectrogram:
    """A class to plot the spectrogram data in a new Tkinter Toplevel window.
    This class creates a new Tkinter Toplevel window and populates it with
    various widgets to display the spectrogram data and related information.
    It includes two matplotlib figures for plotting, text widgets for displaying
    file paths and additional information, labels for displaying energy, cursor,
    and data values, and buttons for exporting data and copying images to the clipboard.
    
    Attributes
    ------------
        g (Tk): The Tkinter root window.
        data (xarray.DataArray): The spectrogram data.
        cmap (str): The colormap for plotting.
        tp_cf (bool): The flag to check if the top window is closed.
        dvalue (list): The list of data attributes.
        tst (str): The string of data attributes.
        lst (list): The list of lengths of the data attributes.
        x (array-like): The x-axis data.
        y (array-like): The y-axis data.
        s_exp (str): The name of the exported data file.
        s_exp_casa (str): The name of the exported data file for CASA.
        s_yl (str): The y-axis label for the exported data file.
        type (str): The type of data.
    """
    def __init__(self, data=[], path=[]) -> None:   # should input path in main function
        self.lfs = None
        self.npzf = False
        if len(path) > 0:
            self.lfs = loadfiles(path)
            self.data = self.lfs.data[0]
            if self.lfs.f_npz[0]:self.npzf = True
        else:
            self.data = data
        self.__preload(self.data)
        self.rr1 = self.phi[0]
        self.rr2 = self.phi[-1]
            
    def __preload(self, data=[]) -> None:
        """Initialize the spectrogram class.
        
        Args
        -----------
        g : object
            A graphical user interface object.
        data : xr.DataArray
            The spectrogram data.
        cmap : str
            The colormap used for plotting.
        
        Returns
        -----------
        None
        """
        self.data = data
        self.tp_cf = True
        dvalue = list(self.data.attrs.values())
        self.dvalue = dvalue
        st=''
        lst=[]
        for _ in self.data.attrs.keys():
            if _ == 'Description':
                ts=str(self.data.attrs[_])
                ts=ts.replace('\n\n\n','\n')
                ts=ts.replace('\n\n','\n')
                t=ts.split('\n')
                st+=str(_)+' : '+str(self.data.attrs[_]).replace('\n','\n                     ')
                # st+=str(_)+' : '+str(self.data.attrs[_]).replace('\n','\n                         ')
                lst.append(len(' : '+t[0]))
                for i in range(1,len(t)):
                    lst.append(len('              '+t[i]))
            elif _ == 'Path':
                pass
            else:
                st+=str(_)+' : '+str(self.data.attrs[_])+'\n'
                lst.append(len(str(_)+' : '+str(self.data.attrs[_])))
        tst=st
        ev, phi = self.data.indexes.values()
        self.ev = np.float64(ev)
        self.phi = np.float64(phi)
        self.name = dvalue[0]
        self.e_photon = np.float64(dvalue[3].split(' ')[0])
        self.lensmode = dvalue[8]
        self.e_mode = dvalue[2]
        self.rdd = dvalue[14]
        self.desc = dvalue[13]
        self.desc=self.desc.replace('\n\n\n\n\n','\n')
        self.desc=self.desc.replace('\n\n\n\n','\n')
        self.desc=self.desc.replace('\n\n\n','\n')
        self.desc=self.desc.replace('\n\n','\n')
        self.desc=self.desc.replace('\n','; ')
        self.tst = tst
        self.lst = lst
        self.x = ev
        self.y = np.sum(self.data.to_numpy().transpose(),axis=0)
        if os.path.basename(self.rdd).split('.')[-1] != 'txt':
            self.s_exp=self.name+'.txt'
        else:
            self.s_exp=self.name+'_txt.txt'
        self.s_exp_casa=self.name+'_Casa.vms'
        self.s_yl='Intensity (Counts)'
        self.type='raw'
        self.fr1 = False
        self.fr2 = False
        self.fr3 = False
        self.fx1 = False
        self.fx2 = False
        self.fx3 = False
    
    def __change_file(self, *args):
        name = self.namevar.get()
        for i, j, k in zip(self.lfs.name, self.lfs.data, self.lfs.f_npz):
            if name == i:
                self.data = j
                if k:self.npzf = True
                else:self.npzf = False
        self.__preload(self.data)
        self.l_path.config(width=max(self.lst)+2, state='normal')
        self.l_path.delete(1.0, tk.END)
        self.l_path.insert(tk.END,self.rdd)
        self.l_path.see(1.0)
        self.l_path.config(state='disabled')
        self.info.config(height=len(self.tst.split('\n')), width=max(self.lst)+2, state='normal')
        self.info.delete(1.0, tk.END)
        self.info.insert(tk.END, self.tst)
        self.info.see(1.0)
        self.info.config(state='disabled')
        try:self.s3.remove()
        except: pass
        self.__tp_a1_plot()
        self.__tp_a2_plot(self.oxl[0],self.oxl[1])
        self.__tp_rga_plot()
        self.rpo.draw()
        self.tpo.draw()
        self.rgo.draw()
    
    def __sel_y(self):
        phi_max = max([self.rr1, self.rr2])
        phi_min = min([self.rr1, self.rr2])
        i = (self.phi<=phi_max) & (self.phi>=phi_min)
        x = self.x
        if self.type=='raw':
            y = np.sum(self.data.to_numpy()[:,i], 1)
        elif self.type=='smooth':
            y=smooth(np.sum(self.data.to_numpy()[:,i].transpose(),axis=0),l=13)
        elif self.type=='fd':
            y=smooth(np.sum(self.data.to_numpy()[:,i].transpose(),axis=0),l=13)
            y=np.diff(y)/np.diff(self.ev)
        else:
            y = self.y
        return x, y
    
    def near(self, data, value):
        if len(data) == 1:
            return data[0]
        else:
            if max(data) >= value >= min(data):
                return data[np.argwhere(abs(data-value)<=abs(data[1]-data[0])/2)[0][0]]
            elif value < min(data):
                return min(data)
            elif value > max(data):
                return max(data)
                
    def update_plot(self, *args):
        self.plot_spectrum(self.selected_fit.get())
        self.update_input_fields(self.selected_fit.get())
    
    def create_input_row(self, label_text, variable, row, frame, col_start=0):
        label = tk.Label(frame, text=label_text, font=('Arial', size(18), 'bold'))
        label.grid(row=row, column=col_start, sticky='e')
        entry = tk.Entry(frame, textvariable=variable, font=('Arial', size(18), 'bold'))
        entry.grid(row=row, column=col_start + 1, sticky='w')
        return label, entry
    
    def update_input_fields(self, fit_type):
        # 隱藏所有輸入框
        try:
            for widget in self.inputs_frame.winfo_children():
                widget.grid_remove()
        except:
            pass
        
        # 根據選擇的擬合方式顯示相應的輸入框
        if fit_type == "Fermi-Dirac Fitting":
            self.emin_label.grid()
            self.emax_label.grid()
            self.emin_entry.grid()
            self.emax_entry.grid()
        elif fit_type == "Linear Fits":
            self.fL_min_label.grid()
            self.fL_max_label.grid()
            self.fF_min_label.grid()
            self.fF_max_label.grid()
            self.fR_min_label.grid()
            self.fR_max_label.grid()
            self.fL_min_entry.grid()
            self.fL_max_entry.grid()
            self.fF_min_entry.grid()
            self.fF_max_entry.grid()
            self.fR_min_entry.grid()
            self.fR_max_entry.grid()
        elif fit_type == "ERFC Fit":
            self.eminc_label.grid()
            self.emaxc_label.grid()
            self.eminc_entry.grid()
            self.emaxc_entry.grid()
        self.root.update()
        w = self.root.winfo_reqwidth()
        h = self.root.winfo_reqheight()
        w = int(12*dpi*scale+w)
        h = int(6*dpi*scale+h)
        self.root.geometry(f'{w}x{h}')
        self.root.update()
    
    def fit_press(self, event):
        if event.button == 1 and event.inaxes:
            self.fx1 = False
            self.fx2 = False
            self.fx3 = False
            self.fox = event.xdata
            if self.selected_fit.get() == "ERFC Fit":
                self.omin = self.eminc_val.get()
                self.omax = self.emaxc_val.get()
                if abs(self.eminc_val.get()-event.xdata) < abs(self.tr_a1.get_xlim()[1]-self.tr_a1.get_xlim()[0])*1/100:
                    self.fx1 = True
                    self.eminc_val.set(event.xdata)
                elif abs(self.emaxc_val.get()-event.xdata) < abs(self.tr_a1.get_xlim()[1]-self.tr_a1.get_xlim()[0])*1/100:
                    self.fx2 = True
                    self.emaxc_val.set(event.xdata)
                elif self.eminc_val.get() < event.xdata < self.emaxc_val.get():
                    self.fx3 = True
            elif self.selected_fit.get() == "Fermi-Dirac Fitting":
                self.omin = self.emin_val.get()
                self.omax = self.emax_val.get()
                if abs(self.emin_val.get()-event.xdata) < abs(self.tr_a1.get_xlim()[1]-self.tr_a1.get_xlim()[0])*1/100:
                    self.fx1 = True
                    self.emin_val.set(event.xdata)
                elif abs(self.emax_val.get()-event.xdata) < abs(self.tr_a1.get_xlim()[1]-self.tr_a1.get_xlim()[0])*1/100:
                    self.fx2 = True
                    self.emax_val.set(event.xdata)
                elif self.emin_val.get() < event.xdata < self.emax_val.get():
                    self.fx3 = True
            self.update_fit()
                
    def fit_move(self, event):
        if self.fx1 or self.fx2 or self.fx3:
            if self.selected_fit.get() == "ERFC Fit":
                if self.fx1:
                    self.eminc_val.set(event.xdata)
                elif self.fx2:
                    self.emaxc_val.set(event.xdata)
                elif self.fx3:
                    self.eminc_val.set(self.omin+(event.xdata-self.fox))
                    self.emaxc_val.set(self.omax+(event.xdata-self.fox))
            elif self.selected_fit.get() == "Fermi-Dirac Fitting":
                if self.fx1:
                    self.emin_val.set(event.xdata)
                elif self.fx2:
                    self.emax_val.set(event.xdata)
                elif self.fx3:
                    self.emin_val.set(self.omin+(event.xdata-self.fox))
                    self.emax_val.set(self.omax+(event.xdata-self.fox))
            self.update_fit()
        
            
    def fit_release(self, event):
        self.fx1, self.fx2, self.fx3 = False, False, False
        self.update_fit()
    
    def update_fit(self, *args):
        e = self.ev
        x, ss = self.__sel_y()
        fit_type = self.selected_fit.get()
        if fit_type == "Fermi-Dirac Fitting":
            try:
                self.fl1.remove()
                self.fl2.remove()
                self.fl3.remove()
                self.flg.remove()
            except:
                pass
            emin = self.emin_val.get()
            emax = self.emax_val.get()
            self.fl1 = self.a1.axvline(emin, color='r', linestyle='--')
            self.fl2 = self.a1.axvline(emax, color='r', linestyle='--')
            mask = (e > emin) & (e < emax)
            
            x = e[mask]
            y = ss[mask]
            
            def fermi_dirac(E, EF, T, A, B):
                k_B = 8.617333262145e-5  # Boltzmann constant in eV/K
                return A / (np.exp((E - EF) / (k_B * T)) + 1) + B
            
            try:
                initial_guess = [self.e_photon, 300.0, np.max(y), np.min(y)]
                popt, pcov = curve_fit(fermi_dirac, x, y, p0=initial_guess)
                k_B = 8.617333262145e-5
                EF = popt[0]
                T = popt[1]
                self.fl3, = self.a1.plot(x, fermi_dirac(x, *popt), 'r-', label=f'Fermi-Dirac Fit: EF = {EF:.2f} eV, T = {T:.2f} K, $k_bT={k_B*T:.2f}$')
                self.flg = self.a1.legend()
            except:
                EF = None
                T = None
                pass
        
        elif fit_type == "ERFC Fit":
            try:
                self.fl1.remove()
                self.fl2.remove()
                self.fl3.remove()
                self.flg.remove()
            except:
                pass
            eminc = self.eminc_val.get()
            emaxc = self.emaxc_val.get()
            self.fl1 = self.a2.axvline(eminc, color='r', linestyle='--')
            self.fl2 = self.a2.axvline(emaxc, color='r', linestyle='--')
            mask = (e > eminc) & (e < emaxc)
            
            x = e[mask]
            y = ss[mask]
            
            def erfc_fit(E, E0, sigma, A, B):
                return A * special.erfc((E - E0) / sigma) + B
            try:
                initial_guess = [self.e_photon, 0.1, np.max(y), np.min(y)]
                popt, pcov = curve_fit(erfc_fit, x, y, p0=initial_guess)
                
                EF = popt[0]
                E0 = popt[0]
                sigma = popt[1]
                
                self.fl3, = self.a2.plot(x, erfc_fit(x, *popt), 'r-', label=f'ERFC Fit: E0 = {E0:.2f} eV, sigma = {sigma:.2f}')
                self.flg = self.a2.legend()
            except:
                EF = None
                E0 = None
                sigma = None
                pass
        try:
            if EF is not None:
                self.ef_label.config(text=f"Fermi Level (EF): {EF:.2f} eV")
            else:
                self.ef_label.config(text="Fermi Level (EF): N/A")
        except:
            pass
        self.canvas.draw()
    
    
    def plot_spectrum(self, fit_type):
        e = self.ev
        x, ss = self.__sel_y()
        # Smooth the data using Gaussian smoothing
        smoothed_ss = gaussian_filter1d(ss, sigma=2)

        # 清空先前的畫布
        try:
            for widget in self.frame.winfo_children():
                widget.destroy()
        except:
            pass
        
        def plot_base_spectrum(ax, x, y, title, xlabel, ylabel):
            ax.scatter(x, y, s=scale*scale*1, c='k', alpha=0.8)
            ax.set_title(title, fontsize=size(20))
            ax.set_xlabel(xlabel, fontsize=size(18))
            ax.set_ylabel(ylabel, fontsize=size(18))
            ax.set_xlim(self.tr_a2.get_xlim())

        def add_canvas(fig):
            try:
                self.canvas = FigureCanvasTkAgg(fig, master=self.frame)
                self.canvas.draw()
                self.canvas.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=True)
                if fit_type in ["Fermi-Dirac Fitting", "ERFC Fit"]:
                    self.canvas.mpl_connect('button_press_event', self.fit_press)
                    self.canvas.mpl_connect('motion_notify_event', self.fit_move)
                    self.canvas.mpl_connect('button_release_event', self.fit_release)
                self.toolbar = NavigationToolbar2Tk(self.canvas, self.frame)
                self.toolbar.update()
                self.canvas.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=True)
                self.root.update()
            except:
                pass

        EF = None

        if fit_type == "Raw Data":
            fig = Figure(figsize=(12*scale, 6*scale))
            ax = fig.add_subplot(111)
            plot_base_spectrum(ax, e, ss, 'Raw Data', 'Kinetic Energy (eV)', 'Intensity (counts)')
            add_canvas(fig)
        
        elif fit_type == "Smooth Data":
            fig = Figure(figsize=(12*scale, 6*scale))
            ax = fig.add_subplot(111)
            plot_base_spectrum(ax, e, smoothed_ss, 'Smooth Data', 'Kinetic Energy (eV)', 'Intensity (counts)')
            add_canvas(fig)

        elif fit_type == "Fermi-Dirac Fitting":
            fig1 = Figure(figsize=(12*scale, 6*scale))
            self.a1 = fig1.add_subplot(111)
            plot_base_spectrum(self.a1, e, ss, 'Raw Data with Fermi-Dirac Fitting', 'Kinetic Energy (eV)', 'Intensity (counts)')

            emin = self.emin_val.get()
            emax = self.emax_val.get()
            self.fl1 = self.a1.axvline(emin, color='r', linestyle='--')
            self.fl2 = self.a1.axvline(emax, color='r', linestyle='--')
            mask = (e > emin) & (e < emax)
            
            x = e[mask]
            y = ss[mask]
            
            def fermi_dirac(E, EF, T, A, B):
                k_B = 8.617333262145e-5  # Boltzmann constant in eV/K
                return A / (np.exp((E - EF) / (k_B * T)) + 1) + B
            
            try:
                initial_guess = [self.e_photon, 300.0, np.max(y), np.min(y)]
                popt, pcov = curve_fit(fermi_dirac, x, y, p0=initial_guess)
                k_B = 8.617333262145e-5
                EF = popt[0]
                T = popt[1]
                self.fl3, = self.a1.plot(x, fermi_dirac(x, *popt), 'r-', label=f'Fermi-Dirac Fit: EF = {EF:.2f} eV, T = {T:.2f} K, $k_bT={k_B*T:.2f}$')
                self.flg = self.a1.legend()
            except:
                EF = None
                T = None
                pass
            add_canvas(fig1)
        
        elif fit_type == "ERFC Fit":
            fig2 = Figure(figsize=(12*scale, 6*scale))
            self.a2 = fig2.add_subplot(111)
            plot_base_spectrum(self.a2, e, ss, 'Raw Data with ERFC Fit', 'Kinetic Energy (eV)', 'Intensity (counts)')
            
            eminc = self.eminc_val.get()
            emaxc = self.emaxc_val.get()
            self.fl1 = self.a2.axvline(eminc, color='r', linestyle='--')
            self.fl2 = self.a2.axvline(emaxc, color='r', linestyle='--')
            mask = (e > eminc) & (e < emaxc)
            
            x = e[mask]
            y = ss[mask]
            
            def erfc_fit(E, E0, sigma, A, B):
                return A * special.erfc((E - E0) / sigma) + B
            try:
                initial_guess = [self.e_photon, 0.1, np.max(y), np.min(y)]
                popt, pcov = curve_fit(erfc_fit, x, y, p0=initial_guess)
                
                EF = popt[0]
                E0 = popt[0]
                sigma = popt[1]
                
                self.fl3, = self.a2.plot(x, erfc_fit(x, *popt), 'r-', label=f'ERFC Fit: E0 = {E0:.2f} eV, sigma = {sigma:.2f}')
                self.flg = self.a2.legend()
            except:
                EF = None
                E0 = None
                sigma = None
                pass
            add_canvas(fig2)

        elif fit_type == "Linear Fits":
            fig3 = Figure(figsize=(12*scale, 6*scale))
            a3 = fig3.add_subplot(111)
            plot_base_spectrum(a3, e, ss, 'Raw Data with Linear Fits', 'Kinetic Energy (eV)', 'Intensity (counts)')

            fL_min = self.fL_min_val.get()
            fL_max = self.fL_max_val.get()
            fF_min = self.fF_min_val.get()
            fF_max = self.fF_max_val.get()
            fR_min = self.fR_min_val.get()
            fR_max = self.fR_max_val.get()

            mask_L = (e > fL_min) & (e < fL_max)
            mask_F = (e > fF_min) & (e < fF_max)
            mask_R = (e > fR_min) & (e < fR_max)

            xL, yL = e[mask_L], ss[mask_L]
            xF, yF = e[mask_F], ss[mask_F]
            xR, yR = e[mask_R], ss[mask_R]

            # 进行线性拟合
            def linear_fit(x, a, b):
                return a * x + b
            try:
                popt_L, _ = curve_fit(linear_fit, xL, yL)
                popt_F, _ = curve_fit(linear_fit, xF, yF)
                popt_R, _ = curve_fit(linear_fit, xR, yR)

                a3.plot(xL, linear_fit(xL, *popt_L), 'r-', label='Left Fit')
                a3.plot(xF, linear_fit(xF, *popt_F), 'g-', label='Flat Fit')
                a3.plot(xR, linear_fit(xR, *popt_R), 'b-', label='Right Fit')

                a3.legend()
            except:
                pass
            add_canvas(fig3)

        elif fit_type == "First Derivative":
            fig4 = Figure(figsize=(12*scale, 6*scale))
            a4 = fig4.add_subplot(111)
            plot_base_spectrum(a4, e, np.gradient(ss), 'First Derivative', 'Kinetic Energy (eV)', 'dIntensity / dE')
            add_canvas(fig4)

        elif fit_type == "Second Derivative":
            fig5 = Figure(figsize=(12*scale, 6*scale))
            a5 = fig5.add_subplot(111)
            plot_base_spectrum(a5, e, np.gradient(np.gradient(ss)), 'Second Derivative', 'Kinetic Energy (eV)', 'd²Intensity / dE²')
            add_canvas(fig5)
            
        elif fit_type == "Smooth Data with First Derivative":
            fig6 = Figure(figsize=(12*scale, 6*scale))
            a6 = fig6.add_subplot(111)
            plot_base_spectrum(a6, e, np.gradient(smoothed_ss), 'Smoothed Data with First Derivative', 'Kinetic Energy (eV)', 'd(Smoothed Intensity) / dE')
            add_canvas(fig6)
            
        elif fit_type == "Segmented Tangents":
            fig7 = Figure(figsize=(12*scale, 6*scale))
            a7 = fig7.add_subplot(111)
            plot_base_spectrum(a7, e, smoothed_ss, 'Smooth Data with Segmented Tangents', 'Kinetic Energy (eV)', 'Intensity (counts)')

            diff = np.gradient(smoothed_ss, e)
            for i in range(len(e) - 1):
                x_segment = [e[i], e[i+1]]
                y_segment = [smoothed_ss[i], smoothed_ss[i] + diff[i] * (e[i+1] - e[i])]
                a7.plot(x_segment, y_segment, 'r-')

            add_canvas(fig7)
        try:
            if EF is not None:
                self.ef_label.config(text=f"Fermi Level (EF): {EF:.2f} eV")
            else:
                self.ef_label.config(text="Fermi Level (EF): N/A")
        except:
            pass
        
    def __ups(self):
        self.root = tk.Toplevel(self.g,bg='white')
        self.root.title('UPS spectrum')
        
        # OptionMenu 設定
        fit_options = ["Raw Data", "Smooth Data", "Fermi-Dirac Fitting", "Linear Fits", "ERFC Fit", "First Derivative", "Second Derivative", "Smooth Data with First Derivative", "Segmented Tangents"]
        self.selected_fit = tk.StringVar(self.root)
        self.selected_fit.set(fit_options[4])  # 初始選項

        option_menu = tk.OptionMenu(self.root, self.selected_fit, *fit_options, command=self.update_plot)
        option_menu.config(font=('Arial', size(18), 'bold'))
        option_menu.grid(row=0, column=0)

        # emax 和 emin 的初始值
        self.emin_val = tk.DoubleVar(value=self.e_photon-0.2)
        self.emax_val = tk.DoubleVar(value=self.e_photon+0.3)

        # emaxc 和 eminc 的初始值
        self.eminc_val = tk.DoubleVar(value=self.e_photon-0.2)
        self.emaxc_val = tk.DoubleVar(value=self.e_photon+0.3)

        # Linear Fits 的上下界初始值
        self.fL_min_val = tk.DoubleVar(value=self.e_photon-0.4)
        self.fL_max_val = tk.DoubleVar(value=self.e_photon-0.35)
        self.fF_min_val = tk.DoubleVar(value=self.e_photon-0.2)
        self.fF_max_val = tk.DoubleVar(value=self.e_photon-0.02)
        self.fR_min_val = tk.DoubleVar(value=self.e_photon)
        self.fR_max_val = tk.DoubleVar(value=self.e_photon+0.8)

        # 創建輸入框
        self.inputs_frame = tk.Frame(self.root)
        self.inputs_frame.grid(row=1, column=0, columnspan=5, sticky='w')

        # 創建輸入框，並預設隱藏
        self.emin_label, self.emin_entry = self.create_input_row("emin:", self.emin_val, 0, self.inputs_frame)
        self.emax_label, self.emax_entry = self.create_input_row("emax:", self.emax_val, 0, self.inputs_frame, col_start=2)

        self.eminc_label, self.eminc_entry = self.create_input_row("eminc:", self.eminc_val, 1, self.inputs_frame)
        self.emaxc_label, self.emaxc_entry = self.create_input_row("emaxc:", self.emaxc_val, 1, self.inputs_frame, col_start=2)

        self.fL_min_label, self.fL_min_entry = self.create_input_row("fL min:", self.fL_min_val, 2, self.inputs_frame)
        self.fL_max_label, self.fL_max_entry = self.create_input_row("fL max:", self.fL_max_val, 2, self.inputs_frame, col_start=2)

        self.fF_min_label, self.fF_min_entry = self.create_input_row("fF min:", self.fF_min_val, 3, self.inputs_frame)
        self.fF_max_label, self.fF_max_entry = self.create_input_row("fF max:", self.fF_max_val, 3, self.inputs_frame, col_start=2)

        self.fR_min_label, self.fR_min_entry = self.create_input_row("fR min:", self.fR_min_val, 4, self.inputs_frame)
        self.fR_max_label, self.fR_max_entry = self.create_input_row("fR max:", self.fR_max_val, 4, self.inputs_frame, col_start=2)

        # 添加顯示EF值的區塊
        self.ef_label = tk.Label(self.root, text="Fermi Level (EF): N/A", font=('Arial', size(18), 'bold'))
        self.ef_label.grid(row=2, column=4, rowspan=2, padx=20)

        # 創建可滾動畫布
        self.canvas_frame = tk.Frame(self.root)
        self.canvas_frame.grid(row=8, column=0, columnspan=5, sticky='nsew')

        self.canvas = tk.Canvas(self.canvas_frame)
        self.canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

        self.frame = tk.Frame(self.canvas)
        self.canvas.create_window((0, 0), window=self.frame, anchor='nw')

        # 讓主窗口和 canvas_frame 自動擴展
        self.root.grid_rowconfigure(8, weight=1)
        self.root.grid_columnconfigure(0, weight=1)
        self.canvas_frame.grid_rowconfigure(0, weight=1)
        self.canvas_frame.grid_columnconfigure(0, weight=1)

        self.update_input_fields(self.selected_fit.get())  # 初始化輸入框顯示
        self.update_plot()
        self.root.bind("<Return>", self.update_plot)
        self.root.update()
    
    def _select_all(self, event):
        event.widget.tag_add(tk.SEL, "1.0", tk.END)
        event.widget.mark_set(tk.INSERT, "1.0")
        event.widget.see(tk.INSERT)
        return 'break'
    
    def __copy_to_clipboard(self):
        buf1 = io.BytesIO()
        buf2 = io.BytesIO()
        self.rpf.savefig(buf1, format='png')
        self.tpf.savefig(buf2, format='png')
        buf1.seek(0)
        buf2.seek(0)
        image1 = Image.open(buf1)
        Image2 = Image.open(buf2)
        image = Image.new('RGB', (image1.width, image1.height + Image2.height))
        image.paste(image1, (0, 0))
        image.paste(Image2, (0, image1.height))
        output = io.BytesIO()
        
        image.convert("RGB").save(output, "BMP")
        data = output.getvalue()[14:]
        output.close()
        send_to_clipboard(win32clipboard.CF_DIB, data)
        
        # image.save(output, format='PNG')
        # data = output.getvalue()[14:]
        # output.close()

        # self.g.clipboard_clear()
        # self.g.clipboard_append(data)
        # self.g.update()  # now it stays on the clipboard after the window is closed
    
    def setdata(self, x, y, dtype='raw', unit='Counts'):
        """Set the data for plotting.
        
        Args
        -----------
            x (list or array-like): The x-axis data.
            y (list or array-like): The y-axis data.
            dtype (str, optional): The type of data. Defaults to 'raw'.
            unit (str, optional): The unit of the y-axis data. Defaults to 'Counts'.
            
        Raises
        -----------
            ValueError : If the length of x and y are not the same.
        """
        self.x=x
        self.y=y
        self.type=dtype
        if len(x)!=len(y):
            print('len(x):',len(x),'len(y):',len(y))
            raise ValueError('The length of x and y must be the same.')
        if dtype=='raw':
            self.s_yl='Intensity (Counts)'
            if os.path.basename(self.rdd).split('.')[-1]!='txt':
                self.s_exp=self.name+'.txt'
            else:
                self.s_exp=self.name+'_txt'+'.txt'
            self.s_exp_casa=self.name+'_Casa.vms'
        else:
            self.s_yl='Intensity ('+unit+')'
            if os.path.basename(self.rdd).split('.')[-1]!='txt':
                self.s_exp=self.name+'.txt'
            else:
                self.s_exp=self.name+'_txt'+'.txt'
            self.s_exp_casa=self.name+'_'+dtype+'_Casa.vms'
    
    def __scroll(self, event):
        if event.delta>0:
            self.__cf_up()
        elif event.delta<0:
            self.__cf_down()
    
    def __cf_up(self, *args):
        now = self.namevar.get()
        for i, j in enumerate(self.lfs.name):
            if now == j:
                if i == 0:
                    self.namevar.set(self.lfs.name[-1])
                else:
                    self.namevar.set(self.lfs.name[i-1])
        self.__change_file()

    def __cf_down(self, *args):
        now = self.namevar.get()
        for i, j in enumerate(self.lfs.name):
            if now == j:
                if i == len(self.lfs.name)-1:
                    self.namevar.set(self.lfs.name[0])
                else:
                    self.namevar.set(self.lfs.name[i+1])
        self.__change_file()
    
    
    def plot(self, g=None, cmap='viridis'):
        """Plot the spectrogram data in a new Tkinter Toplevel window.
        This method creates a new Tkinter Toplevel window and populates it with
        various widgets to display the spectrogram data and related information.
        It includes two matplotlib figures for plotting, text widgets for displaying
        file paths and additional information, labels for displaying energy, cursor,
        and data values, and buttons for exporting data and copying images to the clipboard.
        
        .. Widgets:
        --------
            - Toplevel window with title 'Spectrogram: <name>'
            - Fitting utility button for Fermi level fitting
            - Two matplotlib figures for plotting spectrogram data
            - Text widget for displaying the file path
            - Text widget for displaying additional information
            - Labels for displaying energy, cursor, and data values
            - Buttons for exporting raw data and copying images to the clipboard
            
        .. Event Bindings:
        --------
            - Motion notify event for matplotlib figures
            - Button press event for matplotlib figures
            - Button release event for matplotlib figures
            - FocusIn event for the additional information text widget
            
        .. Methods Called:
        --------
            - __ups
            - __export
            - __export_casa
            - __copy_to_clipboard
            - __trans_plot_job
            
        Note:
        --------
            The method uses the Tkinter library for GUI components and matplotlib for plotting.
        
        """
        # global tpf,tpo,rpf,rpo,l_cx,l_cy,l_dy
        self.cmap = cmap
        if g is None:
            ScaleFactor = windll.shcore.GetScaleFactorForDevice(0)
            t_sc_w, t_sc_h = windll.user32.GetSystemMetrics(0), windll.user32.GetSystemMetrics(1)   # Screen width and height
            t_sc_h-=int(40*ScaleFactor/100)
            if bar_pos == 'top':    #taskbar on top
                sc_y = int(40*ScaleFactor/100)
            else:
                sc_y = 0
            self.tpg = tk.Tk()
            self.g = self.tpg
            odpi=self.tpg.winfo_fpixels('1i')
            # prfactor = 1.03 if ScaleFactor <= 100 else 1.2 if ScaleFactor <= 125 else 0.9 if ScaleFactor <= 150 else 0.55
            prfactor = 1
            ScaleFactor /= prfactor*(ScaleFactor/100*1890/96*odpi/t_sc_w) if 1890/t_sc_w >= (954)/t_sc_h else prfactor*(ScaleFactor/100*(954)/96*odpi/t_sc_h)
            self.tpg.tk.call('tk', 'scaling', ScaleFactor/100)
            global scale, dpi
            dpi = self.tpg.winfo_fpixels('1i')
            windll.shcore.SetProcessDpiAwareness(1)
            scale = odpi / dpi * ScaleFactor / 100
            self.tpg.config(bg='white')
            base_font_size = 14
            scaled_font_size = int(base_font_size * scale)

            plt.rcParams['font.family'] = 'Arial'
            plt.rcParams['font.size'] = int(plt.rcParams['font.size'] * scale)
            plt.rcParams['lines.linewidth'] = plt.rcParams['lines.linewidth'] * scale
            plt.rcParams['lines.markersize'] = plt.rcParams['lines.markersize'] * scale * scale
            plt.rcParams['figure.figsize'] = (plt.rcParams['figure.figsize'][0] * scale, plt.rcParams['figure.figsize'][1] * scale)
                
            # 設定預設字體
            default_font = ('Arial', scaled_font_size)
            self.tpg.option_add('*Font', default_font)
        else:
            self.g = g
            ScaleFactor = windll.shcore.GetScaleFactorForDevice(0)
            t_sc_w, t_sc_h = windll.user32.GetSystemMetrics(0), windll.user32.GetSystemMetrics(1)   # Screen width and height
            t_sc_h-=int(40*ScaleFactor/100)
            if bar_pos == 'top':    #taskbar on top
                sc_y = int(40*ScaleFactor/100)
            else:
                sc_y = 0
            self.tpg = tk.Toplevel(g, bg='white')
            tx = int(t_sc_w*ScaleFactor/100) if g.winfo_x()+g.winfo_width()/2 > t_sc_w else 0
            self.tpg.geometry(f"1900x1000+{tx}+{sc_y}")
        self.tpg.title('Spectrogram: '+self.name)
        
        fr_fig=tk.Frame(self.tpg,bg='white',bd=0)
        fr_fig.grid(row=0,column=0,sticky='nsew')
        
        self.rpf = Figure(figsize=(15*scale, 4.75*scale), layout='constrained')
        self.rpo = FigureCanvasTkAgg(self.rpf, master=fr_fig)
        self.rpo.get_tk_widget().grid(row=0, column=0)
        self.rpo.mpl_connect('motion_notify_event', self.__rp_move)
        self.rpo.mpl_connect('button_press_event', self.__rp_press)
        self.rpo.mpl_connect('button_release_event', self.__rp_release)
        
        self.tpf = Figure(figsize=(15*scale, 4.75*scale), layout='constrained')
        self.tpo = FigureCanvasTkAgg(self.tpf, master=fr_fig)
        self.tpo.get_tk_widget().grid(row=1, column=0)
        self.tpo.mpl_connect('motion_notify_event', self.__tp_move)
        self.tpo.mpl_connect('button_press_event', self.__tp_press)
        self.tpo.mpl_connect('button_release_event', self.__tp_release)
        
        self.rgf = Figure(figsize=(0.25*scale, 4.75*scale), layout='constrained')
        self.rgo = FigureCanvasTkAgg(self.rgf, master=fr_fig)
        self.rgo.get_tk_widget().grid(row=0, column=1)
        self.rgo.mpl_connect('motion_notify_event', self.__rg_move)
        self.rgo.mpl_connect('button_press_event', self.__rg_press)
        self.rgo.mpl_connect('button_release_event', self.__rg_release)
        
        self.fr_info=tk.Frame(self.tpg,bg='white',bd=5)
        self.fr_info.grid(row=0,column=1)
        try:
            if len(self.lfs.name)>1:
                nlist = self.lfs.name
                self.namevar = tk.StringVar(value=nlist[0])
                self.l_name = tk.OptionMenu(self.fr_info, self.namevar, *nlist, command=self.__change_file)
                self.l_name.config(font=('Arial', size(13), 'bold'))
                self.l_name.grid(row=0, column=0, sticky='ew')
        except:
            pass
        self.l_path = tk.Text(self.fr_info, wrap='word', font=("Arial", size(11), "bold"), bg="white", fg="black", state='disabled',height=3,width=30)
        self.l_path.grid(row=1, column=0)
        self.l_path.config(width=max(self.lst)+2, state='normal')
        self.l_path.delete(1.0, tk.END)
        self.l_path.insert(tk.END,self.rdd)
        self.l_path.see(1.0)
        self.l_path.config(state='disabled')
        
        self.info = tk.Text(self.fr_info, wrap='none', font=("Arial", size(11), "bold"), bg="white", fg="black", state='disabled', height=10, width=30)
        self.info.grid(row=2, column=0)
        self.info.bind("<FocusIn>", self._select_all)
        self.info.config(height=len(self.tst.split('\n')), width=max(self.lst)+2, state='normal')
        self.info.insert(tk.END, self.tst)
        self.info.see(1.0)
        self.info.config(state='disabled')
        
        self.l_cx=tk.Label(self.fr_info,text='%9s'%'Energy : ',fg='green',font=('Arial', size(18)),bg='white',width=20,anchor='w')
        self.l_cx.grid(row=3,column=0)
        
        self.l_cy=tk.Label(self.fr_info,text='%10s'%'Cursor : ',font=('Arial', size(18)),bg='white',width=20,anchor='w')
        self.l_cy.grid(row=4,column=0)
        
        self.l_dy=tk.Label(self.fr_info,text='%11s'%'Data : ',fg='red',font=('Arial', size(18)),bg='white',width=20,anchor='w')
        self.l_dy.grid(row=5,column=0)
        
        if self.type != 'fd':
            self.b_ups = tk.Button(self.fr_info, text='Fermi Level Fitting', command=self.__ups, width=30, height=1, font=('Arial', size(12), "bold"), bg='white', bd=5)
            self.b_ups.grid(row=6, column=0)
        
        self.b_exp = tk.Button(self.fr_info, text='Export Data ( .txt )', command=self.__export, width=30, height=1, font=('Arial', size(12), "bold"), bg='white', bd=5)
        self.b_exp.grid(row=7, column=0)
        
        if self.lfs is not None:
            text_casa = 'Export All Data ( _Casa.vms )'
        else:
            text_casa = 'Export Data ( _Casa.vms )'
        self.b_exp_casa = tk.Button(self.fr_info, text=text_casa, command=self.__export_casa, width=30, height=1, font=('Arial', size(12), "bold"), bg='white', bd=5)
        self.b_exp_casa.grid(row=8, column=0)
        
        self.copy_button = tk.Button(self.fr_info, text="Copy Image to Clipboard", width=30, height=1, font=('Arial', size(12), "bold"), bg='white', fg='red', bd=5, command=self.__copy_to_clipboard)
        self.copy_button.grid(row=9, column=0)
        
        self.__trans_plot_job()
        # self.tpg.update()
        self.tpg.bind("<Return>", self.__rg_entry)
        if self.lfs is not None:
            self.tpg.bind('<Up>', self.__cf_up)
            self.tpg.bind('<Down>', self.__cf_down)
            self.tpg.bind('<MouseWheel>', self.__scroll)
        if g is not None:
            self.tpg.update()
            screen_width = self.tpg.winfo_reqwidth()
            screen_height = self.tpg.winfo_reqheight()
            tx = int(t_sc_w*ScaleFactor/100) if g.winfo_x()+g.winfo_width()/2 > t_sc_w else 0
            self.tpg.geometry(f"{screen_width}x{screen_height}+{tx}+{sc_y}")
            self.tpg.focus_force()
        else:
            self.tpg.update()
            screen_width = self.tpg.winfo_reqwidth()
            screen_height = self.tpg.winfo_reqheight()
            self.tpg.geometry(f"{screen_width}x{screen_height}+{0}+{sc_y}")
            self.tpg.mainloop()
    
    def __export(self):
        # os.chdir(self.rdd.removesuffix(self.rdd.split('/')[-1]))
        os.chdir(os.path.dirname(self.rdd))
        x, y = self.__sel_y()
        f = open(self.s_exp, 'w', encoding='utf-8')  # tab 必須使用 '\t' 不可"\t"
        f.write('Kinetic Energy'+'\t'+'Intensity'+'\n')
        for i in range(len(x)):
            f.write('%-6e' % x[i]+'\t'+'%-6e' % y[i]+'\n')
        f.close()
    
    # def __export_casa(self):
    # Casa.txt format simple version
    #     os.chdir(self.rdd.removesuffix(self.rdd.split('/')[-1]))
    #     x,y=self.e_photon-self.x,self.y
    #     f = open(self.s_exp_casa, 'w', encoding='utf-8')  # tab 必須使用 '\t' 不可"\t"
    #     f.write('#Wave Vector'+'\t'+'#Intensity'+'\n')
    #     for i in range(len(x)):
    #         f.write('%-6e' % x[i]+'\t'+'%-6e' % y[i]+'\n')
    #     f.close()
    def gen_casa_body(self):
        x, y = self.__sel_y()
        name = f'''{self.name}
Spectrum
'''
        current_date = datetime.now().strftime("%Y_%m_%d_%H_%M_%S_")
        date = current_date.replace('_','\n')+'1\n'+str(len(self.tst.split('\n'))+5)+'\n'
        info = rf'''Casa Info Follows
0
0
0
0
{self.tst}'''
        if self.e_photon == 21.2:
            source = 'He I'
        elif self.e_photon == 40.8:
            source = 'He II'
        elif self.e_photon == 1253.6:
            source = 'Mg'
        elif self.e_photon == 1486.6:
            source = 'Al'
        elif self.e_photon == 3000.0:
            source = 'ES40'
        else:
            source = 'Sync'
        if '_' in self.name:
            n1, n2 = self.name.split('_')[0], ''
        else:
            n1, n2 = self.name, ''
        params = rf'''
XPS
0
{source}
{self.e_photon}
0
0
0
54
0
FAT
{self.dvalue[9].replace(' eV','')}
1e+037
0
0
1e+037
1e+037
1e+037
1e+037
{n1}
{n2}
-1
Kinetic Energy
eV
{np.max(self.ev)}
{self.dvalue[7].replace(' eV','')}
1
Intensity
d
pulse counting
{self.dvalue[11].replace(' s','')}
{self.dvalue[12]}
0
0.0
0.0
0.0
0
{len(x)}
0
1
'''
        data = ''
        for i in range(len(x)):
            data += f'{int(y[i])}\n'
        return name+date+info+params+data
        
    def __export_casa(self):
    # Casa.vms format complete version
        if self.lfs is not None:
            path = fd.asksaveasfilename(title="Save as", filetypes=(("VMS files", "*.vms"),), initialdir=self.lfs.path[0], initialfile=self.lfs.name[0], defaultextension='.vms')
            if path.split('.')[-1] != 'vms':
                path += '.vms'
            if path != '':
                # os.chdir(path.removesuffix(path.split('/')[-1]))
                os.chdir(os.path.dirname(path))
                f = open(path, 'w', encoding='utf-8')
                head = rf'''VAMAS Surface Chemical Analysis Standard Data Transfer Format 1988 May 4
    Not Specified
    PREVAC EA15
    2D Lab
    Not Specified
    3
    Casa Info Follows CasaXPS Version 2.3.18PR1.0
    0
    Number of Regions={len(self.lfs.name)}
    NORM
    REGULAR
    0
    1
    Data Set
    d
    0
    0
    0
    0
    {len(self.lfs.name)}
    '''     
                body = ''
                for i in self.lfs.data:
                    s=spectrogram(i)
                    s.rr1, s.rr2 = self.rr1, self.rr2
                    body+=s.gen_casa_body()
                f.write(head+body+'end of experiment\n')
        else:
            # os.chdir(self.rdd.removesuffix(self.rdd.split('/')[-1]))
            os.chdir(os.path.dirname(self.rdd))
            f = open(self.s_exp_casa, 'w', encoding='utf-8')  # tab 必須使用 '\t' 不可"\t"
            head = r'''VAMAS Surface Chemical Analysis Standard Data Transfer Format 1988 May 4
Not Specified
PREVAC EA15
2D Lab
Not Specified
3
Casa Info Follows CasaXPS Version 2.3.18PR1.0
0
Number of Regions=1
NORM
REGULAR
0
1
Data Set
d
0
0
0
0
1
'''
# 1: Number of Regions

            f.write(head+self.gen_casa_body()+'end of experiment\n')
        f.close()
    
    # def __export_casa(self):
    # # Casa.txt format more complete version
    #     os.chdir(self.rdd.removesuffix(self.rdd.split('/')[-1]))
    #     x, y = self.__sel_y()
    #     f = open(self.s_exp_casa, 'w', encoding='utf-8')  # tab 必須使用 '\t' 不可"\t"
    #     f.write(f'[Info]\n'+
    #         f'Number of Regions=1\n'+
    #         f'[Region 1]\n'+
    #         f'Region Name={self.name}\n'+
    #         f'Dimension 1 name=Kinetic Energy [eV]\n'+
    #         f'Dimension 1 size={len(x)}\n'+
    #         f'Dimension 1 scale=')
    #     for i,v in enumerate(x):
    #         if i!=len(x)-1:
    #             f.write(f'{v} ')
    #         else:
    #             f.write(f'{v}\n')
    #     f.write(f'[Info 1]\n')
    #     key=['Region Name','Acquisition Mode','Energy Scale','Excitation Energy','Center Energy','High Energy','Low Energy','Energy Step','Lens Mode','Pass Energy','Slit','Step Time','Number of Sweeps','Description']
    #     for i in range(len(key)):
    #         if i<len(key)-1:
    #             if key[i]=='Step Time':
    #                 f.write(f"{key[i]}={int(float(self.dvalue[i].replace(' s',''))*1000)}\n")
    #             elif key[i]=='Pass Energy':
    #                 f.write(f"{key[i]}={int(float(self.dvalue[i].replace(' eV','')))}\n")
    #             elif key[i]=='Energy Scale' and self.e_mode=='Binding':
    #                 f.write(f"{key[i]}=Kinetic\n")
    #             elif key[i]=='Low Energy' and self.e_mode=='Binding':
    #                 f.write(f"{key[i]}={21.2-float(self.dvalue[5].replace(' eV','').replace(' (B.E.)',''))}\n")
    #             elif key[i]=='High Energy' and self.e_mode=='Binding':
    #                 f.write(f"{key[i]}={21.2-float(self.dvalue[6].replace(' eV','').replace(' (B.E.)',''))}\n")
    #             else:
    #                 f.write(f"{key[i]}={self.dvalue[i].replace(' eV','').replace(' (K.E.)','')}\n")
    #         else:
    #             f.write(f"{key[i]}={self.dvalue[i]}\n") 
    #     f.write(f'Detector First X-Channel=0\n'+
    #             f'Detector Last X-Channel=0\n'+
    #             f'Detector First Y-Channel=0\n'+
    #             f'Detector Last Y-Channel=0\n'+
    #             f'Number of Slices={len(self.phi)}\n'+
    #             f'spectrum Name={self.name}\n'+
    #             f'Comments={self.desc}; Slit: {self.dvalue[10]};\n')
    #     f.write(f'[Run Mode Information 1]\n'+
    #             f'Name=Normal\n')
    #     f.write(f'[Data1]\n')
    #     for i in range(len(x)):
    #         f.write('%-6e' % i+' '+'%-6e' % y[i]+'\n')
    #     f.close()
    
    def __rg_entry(self, *args):
        self.grg=RestrictedToplevel(self.tpg, bg='white')
        self.grg.title('Data Range')
        
        fr=tk.Frame(self.grg,bg='white')
        fr.pack(side=tk.TOP, padx=5, pady=5)
        
        self.v_r1=tk.DoubleVar(value=self.rr1)
        l_rr1in1 = tk.Label(fr, text='From', font=('Arial', size(16), "bold"), bg='white')
        self.rr1_in = tk.Entry(fr, font=("Arial", size(16), "bold"), width=10, textvariable=self.v_r1, bd=5)
        if self.lensmode == 'Transmission':
            l_rr1in2 = tk.Label(fr, text='mm', font=('Arial', size(16), "bold"), bg='white')
        else:
            l_rr1in2 = tk.Label(fr, text='deg', font=('Arial', size(16), "bold"), bg='white')
        l_rr1in1.grid(row=0,column=0)
        self.rr1_in.grid(row=0,column=1)
        l_rr1in2.grid(row=0,column=2)
        
        self.v_r2=tk.DoubleVar(value=self.rr2)
        l_rr2in1 = tk.Label(fr, text='To', font=('Arial', size(16), "bold"), bg='white')
        self.rr2_in = tk.Entry(fr, font=("Arial", size(16), "bold"), width=10, textvariable=self.v_r2, bd=5)
        if self.lensmode == 'Transmission':
            l_rr2in2 = tk.Label(fr, text='mm', font=('Arial', size(16), "bold"), bg='white')
        else:
            l_rr2in2 = tk.Label(fr, text='deg', font=('Arial', size(16), "bold"), bg='white')
        l_rr2in1.grid(row=1,column=0)
        self.rr2_in.grid(row=1,column=1)
        l_rr2in2.grid(row=1,column=2)
        
        fr1 = tk.Frame(self.grg,bg='white')
        fr1.pack(side=tk.TOP, padx=5, pady=5)
        b1=tk.Button(self.grg,text='Confirm',command=self.__save_rg, width=15, height=1, font=('Arial', size(14), "bold"), bg='white', bd=5)
        b1.pack(side=tk.TOP, padx=5, pady=5)
        
        self.grg.bind('<Return>', self.__save_rg)
        self.grg.focus_set()
        self.rr1_in.focus_set()
        self.rr1_in.select_range(0,tk.END)
        self.rr1_in.icursor(tk.END)
        self.grg.update()
        w = self.grg.winfo_reqwidth()
        h = self.grg.winfo_reqheight()
        self.grg.geometry(f"{int(w*1.4)}x{h}")  # Adjust height to fit the buttons
        set_center(self.tpg, self.grg, 0, 0)
        self.grg.update()
        self.grg.limit_bind()

    def __save_rg(self, *args):
        try:
            tmax = max([self.v_r1.get(), self.v_r2.get()])
            tmin = min([self.v_r1.get(), self.v_r2.get()])
            if tmin < min(self.phi) or tmax > max(self.phi):
                tk.messagebox.showwarning("Warning","Invalid Input\nThe range must be within the data range.")
                self.tpg.focus_set()
                self.grg.destroy()
                self.__rg_entry()
            else:
                self.rr1, self.rr2 = tmin, tmax
                self.grg.destroy()
                try:
                    self.r1.remove()
                    self.r2.remove()
                    self.s3.remove()
                except: pass
                self.s3,=self.tr_rga.plot([0, 0],[self.rr1, self.rr2],c='lightgreen',marker='<',markersize=scale*20,markerfacecolor='r',linewidth=scale*20)
                self.r1 = self.tr_a1.axhline(self.rr1, c='r')
                self.r2 = self.tr_a1.axhline(self.rr2, c='r')
                self.__tp_a2_plot(self.tr_a1.get_xlim()[0],self.tr_a1.get_xlim()[1])
                self.tpo.draw()
                self.rgo.draw()
                self.rpo.draw()
        except:
            tk.messagebox.showwarning("Warning","Invalid Input\n"+str(sys.exc_info()[1]))
            self.tpg.focus_set()
            self.grg.destroy()
            self.__rg_entry()
    
    def __rg_move(self, event):
        if event.inaxes:
            y = self.near(self.phi, event.ydata)
            if self.fr1==True:
                try:
                    # self.r1.remove()
                    self.s3.remove()
                except: pass
                self.rr1 = y
                self.s3,=self.tr_rga.plot([0, 0],[self.rr1, self.rr2],c='lightgreen',marker='<',markersize=scale*20,markerfacecolor='r',linewidth=scale*20)
                # self.r1 = self.tr_a1.axhline(self.rr1, c='r')
            elif self.fr2==True:
                try:
                    # self.r2.remove()
                    self.s3.remove()
                except: pass
                self.rr2 = y
                self.s3,=self.tr_rga.plot([0, 0],[self.rr1, self.rr2],c='lightgreen',marker='<',markersize=scale*20,markerfacecolor='r',linewidth=scale*20)
                # self.r2 = self.tr_a1.axhline(self.rr2, c='r')
            elif self.fr3==True:
                try:
                    # self.r1.remove()
                    # self.r2.remove()
                    self.s3.remove()
                except: pass
                if y-self.roy+self.romin < min(self.phi):
                    self.rr1 = min(self.phi)
                    self.rr2 = min(self.phi)+(self.romax-self.romin)
                elif y-self.roy+self.romax > max(self.phi):
                    self.rr2 = max(self.phi)
                    self.rr1 = max(self.phi)-(self.romax-self.romin)
                else:
                    self.rr1 = y-self.roy+self.romin
                    self.rr2 = y-self.roy+self.romax
                
                # self.r1 = self.tr_a1.axhline(self.rr1, c='r')
                # self.r2 = self.tr_a1.axhline(self.rr2, c='r')
                self.s3,=self.tr_rga.plot([0, 0],[self.rr1, self.rr2],c='lightgreen',marker='<',markersize=scale*20,markerfacecolor='r',linewidth=scale*20)
        self.__tp_a2_plot(self.tr_a1.get_xlim()[0],self.tr_a1.get_xlim()[1])
        self.tpo.draw()
        # self.rpo.draw()
        self.rgo.draw()
    
    def __rg_press(self, event):
        if event.button == 1 and event.inaxes:
            y = self.near(self.phi, event.ydata)
            self.fr1 = False
            self.fr2 = False
            self.fr3 = False
            self.roy = self.near(self.phi, event.ydata)
            self.rr1, self.rr2 = sorted([self.near(self.phi, self.rr1), self.near(self.phi, self.rr2)])
            self.romin = self.rr1
            self.romax = self.rr2
            if abs(self.rr1-y) < (self.phi[1]-self.phi[0])*len(self.phi)*1/40:
                try:
                    # self.r1.remove()
                    self.s3.remove()
                except: pass
                self.fr1 = True
                self.rr1 = y
                
            elif abs(self.rr2-y) < (self.phi[1]-self.phi[0])*len(self.phi)*1/40:
                try:
                    # self.r2.remove()
                    self.s3.remove()
                except: pass
                self.fr2 = True
                self.rr2 = y
            elif self.rr1 < y < self.rr2:
                try:
                    # self.r1.remove()
                    # self.r2.remove()
                    self.s3.remove()
                except: pass
                self.fr3 = True
        elif event.button == 3 and event.inaxes:
            self.__rg_entry()
        self.rgo.draw()
        self.rpo.draw()
        
    def __rg_release(self, event):
        self.fr1 = False
        self.fr2 = False
        self.fr3 = False
        self.__re_tr_a1_plot(self.tr_a1.get_xlim()[0],self.tr_a1.get_xlim()[1])
        self.rpo.draw()
        
    
    def __rp_move(self, event):
        # global rpf, rpo, tpf, tpo, tr_a1, tr_a2, xx2, yy2, aa1, aa2, cur, l_cx, l_cy, l_dy
        self.rpf.canvas.get_tk_widget().config(cursor="")
        if event.inaxes:
            self.rpf.canvas.get_tk_widget().config(cursor="tcross")
            self.out = False
            try:
                # self.xx1.remove()
                self.xx2.remove()
                self.yy2.remove()
                self.cur.remove()
                # self.aa1.remove()
                self.aa2.remove()
            except:
                pass
            if self.lensmode == 'Transmission':
                unit=' mm'
            else:
                if self.npzf:unit=' 2pi/A'
                else:unit = ' deg'
            if event.xdata>self.ev[-1]:
                cxdata = self.ev[-1]
            elif event.xdata<self.ev[0]:
                cxdata = self.ev[0]
            else:
                cxdata = event.xdata
            cydata = event.ydata
            self.tx = cxdata
            xf = (cxdata > self.oxl[0] and cxdata < self.oxl[1])
            yf = (cydata > self.tr_a1.get_ylim()[0] and cydata < self.tr_a1.get_ylim()[1])
            if xf and yf:
                tz = self.data.to_numpy().transpose()
                x = self.x
                y = self.y
                yy = self.phi
                xi = 0
                yi = 0
                
                if cxdata < x[0]:
                    xi=0
                elif cxdata > x[-1]:
                    xi=len(x)-1
                else:
                    xi=np.argwhere(abs(x-cxdata) <= (x[1]-x[0])/2)[0][0]
                if cydata < yy[0]:
                    yi=0
                elif cydata > yy[-1]:
                    yi=len(yy)-1
                else:
                    yi=np.argwhere(abs(yy-cydata) <= (yy[1]-yy[0])/2)[0][0]
                    
                try:
                    self.l_cx.config(text='%9s%8.3f%3s'%('Energy : ',cxdata,' eV'))
                    self.l_cy.config(text='%10s%11.4g%4s'%('Cursor : ',cydata,unit))
                    self.l_dy.config(text='%11s%11.4g'%('Data : ',tz[yi][xi]))
                except:
                    pass
                # self.xx1.set_data([cxdata,cxdata], self.oy1)
                # self.xx1=self.tr_a1.axvline(cxdata,color='g')
                self.xx2=self.tr_a2.axvline(cxdata,color='g')
                self.yy2=self.tr_a2.axhline(-max(y),color='grey')
                
                x, y = self.__sel_y()
                    
                x,y=x[xi],y[xi]
                self.cur=self.tr_a2.scatter(x,y,c='r',marker='o',s=scale*scale*30)
                self.tr_a2.set_ylim(self.oy2)
                if not self.tp_cf:
                    # self.aa1=self.tr_a1.fill_between([self.ox,cxdata],self.oy1[0],self.oy1[1],color='g',alpha=0.2)
                    self.aa2=self.tr_a2.fill_between([self.ox,cxdata],self.oy2[0],self.oy2[1],color='g',alpha=0.2)
                    self.tr_a2.set_ylim(self.oy2)
        else:
            try:
                self.l_cx.config(text='%9s'%'Energy : ')
                self.l_cy.config(text='%10s'%'Cursor : ')
                self.l_dy.config(text='%11s'%'Data : ')
                # self.xx1.remove()
                self.xx2.remove()
                self.yy2.remove()
                self.cur.remove()
                # self.xx2.remove()
                # self.yy2.remove()
                # self.cur.remove()
                # self.aa1.remove()
                # self.aa2.remove()
            except:
                pass
        # self.rpo.draw()
        self.tpo.draw()

    def __rp_press(self, event):
        # global tp_cf, rpf, rpo ,tpf, tpo , tr_a1, tr_a2 , x1 , x2 , ox, aa1, aa2
        if event.button == 1 and self.tp_cf:
            self.tp_cf = False
            self.out=True
            # self.x1 = self.tr_a1.axvline(event.xdata, color='g')
            # self.x1.set_data([event.xdata,event.xdata], self.oy1)
            self.x2 = self.tr_a2.axvline(event.xdata, color='g')
            self.tr_a2.set_ylim(self.oy2)
            self.ox=event.xdata

        elif event.button == 3:
            self.rpf.canvas.get_tk_widget().config(cursor="watch")
            self.tp_cf = True
            self.__tp_a1_plot()
            self.__tp_a2_plot(self.oxl[0],self.oxl[1])
            self.rpo.draw()
            self.rpf.canvas.get_tk_widget().config(cursor="tcross")
        
        self.tpo.draw()
        

    def __rp_release(self, event):
        # global tp_cf, rpf, rpo ,tpf, tpo , tr_a1, tr_a2, x1, x2 , ox, aa1, aa2
        if event.button == 1 and not self.tp_cf:
            self.rpf.canvas.get_tk_widget().config(cursor="watch")
            self.tp_cf = True
            try:
                # self.x1.remove()
                # self.x1.set_data([],[])
                self.x2.remove()
                # self.aa1.remove()
                self.aa2.remove()
            except:
                pass
            if self.out == False:
                self.__re_tr_a1_plot(sorted([self.ox, self.tx])[0],sorted([self.ox, self.tx])[1])
                self.__tp_a2_plot(sorted([self.ox, self.tx])[0],sorted([self.ox, self.tx])[1])
            else:
                self.__re_tr_a1_plot(self.oxl[0],self.oxl[1])
                self.__tp_a2_plot(self.oxl[0],self.oxl[1])
            self.rpo.draw()
            self.tpo.draw()
            self.rpf.canvas.get_tk_widget().config(cursor="tcross")
        
    def __tp_move(self, event):
        # global tpf, tpo, tr_a1, tr_a2, tpf, xx2, yy2, aa1, aa2, cur, l_cx, l_cy, l_dy
        self.tpf.canvas.get_tk_widget().config(cursor="")
        if event.inaxes:
            self.out = False
            try:
                self.xx2.remove()
                self.yy2.remove()
                self.cur.remove()
                # self.aa1.remove()
                self.aa2.remove()
            except:
                pass
            self.tpf.canvas.get_tk_widget().config(cursor="tcross")
            if event.xdata>self.ev[-1]:
                cxdata = self.ev[-1]
            elif event.xdata<self.ev[0]:
                cxdata = self.ev[0]
            else:
                cxdata = event.xdata
            cydata = event.ydata
            self.tx = cxdata
            xf = (cxdata >= self.oxl[0] and cxdata <= self.oxl[1])
            yf = (cydata >= self.tr_a2.get_ylim()[0] and cydata <= self.tr_a2.get_ylim()[1])
            if xf and yf:
                y = self.y
                x = self.x
                xi = 0
                
                if cxdata < x[0]:
                    xi=0
                elif cxdata > x[-1]:
                    xi=len(x)-1
                else:
                    xi=np.argwhere(abs(x-cxdata) <= (x[1]-x[0])/2)[0][0]
                
                x, y = self.__sel_y()
                    
                x,y=x[xi],y[xi]
                try:
                    self.l_cx.config(text='%9s%8.3f%3s'%('Energy : ',cxdata,' eV'))
                    self.l_cy.config(text='%10s%11.4g'%('Cursor : ',cydata))
                    self.l_dy.config(text='%11s%11.4g'%('Data : ',y))
                except:
                    pass
                self.xx2=self.tr_a2.axvline(cxdata,color='g')
                self.yy2=self.tr_a2.axhline(cydata,color='grey')
                self.cur=self.tr_a2.scatter(x,y,c='r',marker='o',s=scale*scale*30)
                self.tr_a2.set_ylim(self.oy2)
                if not self.tp_cf:
                    # self.aa1=self.tr_a1.fill_between([self.ox,cxdata],self.oy1[0],self.oy1[1],color='g',alpha=0.2)
                    self.aa2=self.tr_a2.fill_between([self.ox,cxdata],self.oy2[0],self.oy2[1],color='g',alpha=0.2)
                    self.tr_a2.set_ylim(self.oy2)
        else:
            try:
                self.l_cx.config(text='%9s'%'Energy : ')
                self.l_cy.config(text='%10s'%'Cursor : ')
                self.l_dy.config(text='%11s'%'Data : ')
                self.xx2.remove()
                self.yy2.remove()
                self.cur.remove()
                # self.xx2.remove()
                # self.yy2.remove()
                # self.cur.remove()
                # self.aa1.remove()
                # self.aa2.remove()
            except:
                pass
        # self.rpo.draw()
        self.tpo.draw()


    def __tp_press(self, event):
        # global tp_cf, rpf, rpo ,tpf, tpo , tr_a1, tr_a2 , x1 , x2 , ox, aa1, aa2
        if event.button == 1 and self.tp_cf:
            self.tp_cf = False
            self.out=True
            # self.x1 = self.tr_a1.axvline(event.xdata, color='g')
            self.x2 = self.tr_a2.axvline(event.xdata, color='g')
            self.tr_a2.set_ylim(self.oy2)
            self.ox=event.xdata

        elif event.button == 3:
            self.tpf.canvas.get_tk_widget().config(cursor="watch")
            self.tp_cf = True
            self.__tp_a1_plot()
            self.__tp_a2_plot(self.oxl[0],self.oxl[1])
            self.rpo.draw()
            self.tpf.canvas.get_tk_widget().config(cursor="tcross")
        
        self.tpo.draw()
        
        
    def __tp_release(self, event):
        # global tp_cf, rpf, rpo ,tpf, tpo , tr_a1, tr_a2, x1, x2 , ox, aa1, aa2
        if event.button == 1 and not self.tp_cf:
            self.tpf.canvas.get_tk_widget().config(cursor="watch")
            self.tp_cf = True
            try:
                # self.x1.remove()
                self.x2.remove()
                # self.aa1.remove()
                self.aa2.remove()
            except:
                pass
            if self.out == False:
                self.__re_tr_a1_plot(sorted([self.ox, self.tx])[0],sorted([self.ox, self.tx])[1])
                self.__tp_a2_plot(sorted([self.ox, self.tx])[0],sorted([self.ox, self.tx])[1])
            else:
                self.__re_tr_a1_plot(self.oxl[0],self.oxl[1])
                self.__tp_a2_plot(self.oxl[0],self.oxl[1])
            self.rpo.draw()
            self.tpo.draw()
            self.tpf.canvas.get_tk_widget().config(cursor="tcross")
            
    def __re_tr_a1_plot(self,xx1,xx2):
        z = self.data.to_numpy().transpose()
        # self.tr_a1.scatter(self.ev, np.sum(tz,axis=0), c='k', marker='o', s=scale*scale*0.9)
        x = self.ev
        xi=[]
        x1, x2 = sorted([xx1, xx2])
        xx1, xx2 = self.near(x, xx1), self.near(x, xx2)
        for i,v in enumerate(x):
            if v>=xx1 and v<=xx2:
                xi.append(i)
        x = x[xi]
        tx, ty = np.meshgrid(x, self.phi)
        tz = tx*0
        tz[0:, 0:] = z[0:, xi]
        # ttx = np.linspace(min(x),max(x),len(x)*4)
        # tx, ty = np.meshgrid(ttx, self.phi)
        # x, y = np.meshgrid(x, self.phi)
        # tz = griddata((x.flatten(), y.flatten()), tz.flatten(), (tx, ty), method='cubic')
        self.tr_a1.clear()
        self.tr_a1.pcolormesh(tx,ty,tz,cmap=self.cmap)
        self.r1=self.tr_a1.axhline(self.rr1, c='r')
        self.r2=self.tr_a1.axhline(self.rr2, c='r')
        if self.lensmode=='Transmission':
            self.tr_a1.set_ylabel('Position (mm)', font='Arial', fontsize=size(16))
        else:
            if self.npzf:self.tr_a1.set_ylabel(r'k ($\frac{2\pi}{\AA}$)', font='Arial', fontsize=size(16))
            else:self.tr_a1.set_ylabel('Angle (deg)', font='Arial', fontsize=size(16))
                
        self.tr_a1.set_xticks([])
        self.tr_a1.set_yticklabels(labels=self.tr_a1.get_yticklabels(), font='Arial', fontsize=size(14))
        self.tr_a1.set_xlim([x1, x2])
        self.tr_a1.set_ylim(self.oy1)
        
    def __tp_a1_plot(self):
        # global tr_a2, oy2
        tx, ty = np.meshgrid(self.ev, self.phi)
        tz = self.data.to_numpy().transpose()
        # self.tr_a1.scatter(self.ev, np.sum(tz,axis=0), c='k', marker='o', s=scale*scale*0.9)
        self.tr_a1.clear()
        self.tr_a1.pcolormesh(tx,ty,tz,cmap=self.cmap)
        self.r1=self.tr_a1.axhline(self.rr1, c='r')
        self.r2=self.tr_a1.axhline(self.rr2, c='r')
        if self.lensmode=='Transmission':
            self.tr_a1.set_ylabel('Position (mm)', font='Arial', fontsize=size(16))
        else:
            if self.npzf:self.tr_a1.set_ylabel(r'k ($\frac{2\pi}{\AA}$)', font='Arial', fontsize=size(16))
            else:self.tr_a1.set_ylabel('Angle (deg)', font='Arial', fontsize=size(16))
        self.tr_a1.set_xticks([])
        self.tr_a1.set_yticklabels(labels=self.tr_a1.get_yticklabels(), font='Arial', fontsize=size(14))
        # self.tr_a1.set_xlim(self.tr_a1.get_xlim())
        # self.x1, = self.tr_a1.plot([],[],'g-')
        # self.xx1, = self.tr_a1.plot([],[],'g-')
        self.tr_a1.set_xlim([sorted([self.ev[0], self.ev[-1]])[0]-abs(self.ev[-1]-self.ev[0])/50, sorted([self.ev[0], self.ev[-1]])[1]+abs(self.ev[-1]-self.ev[0])/50])
        self.tr_a1.set_ylim([sorted([self.phi[0], self.phi[-1]])[0]-abs(self.phi[-1]-self.phi[0])/20, sorted([self.phi[0], self.phi[-1]])[1]+abs(self.phi[-1]-self.phi[0])/20])
        self.oxl=self.tr_a1.get_xlim()
        self.oy1=self.tr_a1.get_ylim()
    
    def __tp_a2_plot(self,xx1,xx2):
        # global tr_a2, oy2
        x, y = self.__sel_y()
        xi=[]
        for i,v in enumerate(x):
            if v>=xx1 and v<=xx2:
                xi.append(i)
        x = x[xi]
        y = y[xi]
        self.tr_a2.clear()
        if self.type=='fd':
            self.tr_a2.plot(x,y, color='k')
        else:
            if abs(xx1-xx2)>abs(self.oxl[1]-self.oxl[0])/2:
                self.tr_a2.scatter(x,y, c='k', marker='o', s=scale*scale*0.9)
            elif abs(xx1-xx2)>abs(self.oxl[1]-self.oxl[0])/4:
                self.tr_a2.scatter(x,y, c='k', marker='o', s=scale*scale*10)
            else:
                self.tr_a2.scatter(x,y, c='k', marker='o', s=scale*scale*30)
        self.tr_a2.ticklabel_format(style='plain', axis='y', scilimits=(0,0))
        self.tr_a2.set_xlim(self.tr_a1.get_xlim())
        self.tr_a2.set_xlabel('Kinetic Energy (eV)', font='Arial', fontsize=size(16))
        self.tr_a2.set_ylabel(self.s_yl, font='Arial', fontsize=size(16))
        self.tr_a2.set_xticklabels(labels=self.tr_a2.get_xticklabels(), font='Arial', fontsize=size(14))
        self.tr_a2.set_yticklabels(labels=self.tr_a2.get_yticklabels(), font='Arial', fontsize=size(14))
        self.oy2=self.tr_a2.get_ylim()

    def __tp_rga_plot(self):
        self.s3,=self.tr_rga.plot([0, 0],[self.rr1, self.rr2],c='lightgreen',marker='<',markersize=scale*20,markerfacecolor='r',linewidth=scale*20)
        self.tr_rga.set_ylim([sorted([self.phi[0], self.phi[-1]])[0]-abs(self.phi[-1]-self.phi[0])/20, sorted([self.phi[0], self.phi[-1]])[1]+abs(self.phi[-1]-self.phi[0])/20])
        self.tr_rga.set_xticks([])
        self.tr_rga.set_yticks([])
    
    def __trans_plot_job(self):
        # global rpf,rpo,tpf,tpo,tr_a1,tr_a2,oxl,oy1
        self.tr_a1=self.rpf.add_axes([0.1, 0.05, 0.88, 0.9])
        self.tr_a1.set_facecolor('lightblue')
        self.tr_a2=self.tpf.add_axes([0.1, 0.15, 0.88, 0.82])
        self.tr_rga=self.rgf.add_axes([0, 0.05, 1, 0.9])
        self.tr_rga.set_facecolor('lightblue')
        self.__tp_a1_plot()
        self.__tp_a2_plot(self.oxl[0],self.oxl[1])
        self.__tp_rga_plot()
        # self.rpf.tight_layout()
        # self.tpf.tight_layout()
        self.rpo.draw()
        self.tpo.draw()
        self.rgo.draw()
            
def trans_plot(*e):
    global gtp
    gtp=RestrictedToplevel(g)
    gtp.title('Spectrogram')
    b_raw = tk.Button(gtp, text='Raw', command=raw_plot, width=15, height=1, font=('Arial', size(14), "bold"), bg='white', bd=5)
    b_raw.grid(row=0, column=0)
    b_smooth = tk.Button(gtp, text='Smooth', command=smooth_plot, width=15, height=1, font=('Arial', size(14), "bold"), bg='white', bd=5)
    b_smooth.grid(row=0, column=1)
    b_fd = tk.Button(gtp, text='First Derivative', command=fd_plot, width=15, height=1, font=('Arial', size(14), "bold"), bg='white', bd=5)
    b_fd.grid(row=0, column=2)
    set_center(g, gtp, 0, 0)
    gtp.focus_set()
    gtp.bind('<Return>', raw_plot)
    gtp.limit_bind()

def raw_plot(*args):
    gtp.destroy()
    cmap=value3.get()
    s=spectrogram(data)
    s.plot(g, cmap)

def smooth_plot():
    gtp.destroy()
    cmap=value3.get()
    y=smooth(np.sum(data.to_numpy().transpose(),axis=0),l=13)
    s=spectrogram(data)
    s.setdata(ev, y, dtype='smooth', unit='Counts')
    s.plot(g, cmap)

def fd_plot():
    gtp.destroy()
    cmap=value3.get()
    y=smooth(np.sum(data.to_numpy().transpose(),axis=0),l=13)
    s=spectrogram(data)
    s.setdata(ev[0:-1]+(ev[1]-ev[0])/2, np.diff(y)/np.diff(ev), dtype='fd', unit='dN/dE')
    s.plot(g, cmap)

def o_cal(*e):
    r"""
    Calculate the angle in degrees based on the given values of calk and cale.

    Parameters
    ----------
        \*e (event) : For tkinter event input, not used in this function.

    Returns
    -------
        float : The calculated angle in degrees.

    """
    global calk, cale
    if '' == calk.get():
        calk.set('0')
        calken.select_range(0, 1)
    if '' == cale.get():
        cale.set('0')
        caleen.select_range(0, 1)
    ans = np.arcsin(np.float64(calk.get())/(2*m*np.float64(cale.get())
                    * 1.602176634*10**-19)**0.5/10**-10*(h/2/np.pi))*180/np.pi
    caldeg.config(text='Deg = '+'%.5f' % ans)

def cal(*e):
    t = threading.Thread(target=o_cal)
    t.daemon = True
    t.start()

def calculator(*e):
    global calf, caldeg, calk, cale, calken, caleen
    try:
        calf.destroy()
    except:
        pass
    calf = tk.Toplevel(g, bg='white')
    calf.resizable(False, False)
    calf.title('E-k Angle Converter')
    fr = tk.Frame(calf, bg='white')
    fr.pack(side=tk.TOP, fill=tk.X, padx=10, pady=10)
    
    calkl = tk.Label(fr, text='delta k (to 0)', font=(
        "Arial", size(18), "bold"), bg="white", fg="black")
    calkl.grid(row=1, column=0)
    calel = tk.Label(fr, text='Kinetic Energy', font=(
        "Arial", size(18), "bold"), bg="white", fg="black")
    calel.grid(row=2, column=0)

    calk = tk.StringVar()
    calk.set('0')
    calk.trace_add('write', cal)
    cale = tk.StringVar()
    cale.set('0')
    cale.trace_add('write', cal)
    calken = tk.Entry(fr, font=("Arial", size(18), "bold"),
                    width=15, textvariable=calk, bd=9)
    calken.grid(row=1, column=1)
    caleen = tk.Entry(fr, font=("Arial", size(18), "bold"),
                    width=15, textvariable=cale, bd=9)
    caleen.grid(row=2, column=1)
    
    caldeg = tk.Label(calf, text='Deg = 0', font=(
        "Arial", size(18), "bold"), bg="white", fg="black")
    caldeg.pack(side=tk.TOP, fill=tk.X)
    
    set_center(g, calf, 0, 0)
    calf.focus_set()

def scroll(event):
    if len(lfs.name) >1:
        if event.delta>0:
            cf_up()
        elif event.delta<0:
            cf_down()

def cf_up(*args):
    global namevar
    now = namevar.get()
    for i, j in enumerate(lfs.name):
        if now == j:
            if i == 0:
                namevar.set(lfs.name[-1])
            else:
                namevar.set(lfs.name[i-1])
    change_file()

def cf_down(*args): 
    global namevar
    now = namevar.get()
    for i, j in enumerate(lfs.name):
        if now == j:
            if i == len(lfs.name)-1:
                namevar.set(lfs.name[0])
            else:
                namevar.set(lfs.name[i+1])
    change_file()

npzf = False
def change_file(*args):
    global data, rdd, npzf
    name = namevar.get()
    if len(name) >20:
        l_name.config(font=('Arial', size(12), "bold"))
    else:
        l_name.config(font=('Arial', size(14), "bold"))
    for i, j, k, l in zip(lfs.name, lfs.data, lfs.path, lfs.f_npz):
        if name == i:
            data = j
            pr_load(j)
            rdd = k
            if l:
                npzf = True
                koffset.config(state='normal')
                k_offset.set('0')
                koffset.config(state='disabled')
            else:
                npzf = False
                koffset.config(state='normal')
                try:
                    k_offset.set(ko)
                except:
                    k_offset.set('0')
    st.put(name)
    if value.get() != '---Plot1---':
        o_plot1()
    
def tools(*args):
    def spec(*args):
        s = spectrogram(path=lfs.path)
        s.plot(g, value3.get())
        toolg.destroy()
        
    def exp_casa():
        lfs.export_casa()
        toolg.destroy()
        
    def kplane():
        CEC(g, lfs.path)
        toolg.destroy()
        
    global toolg
    if 'toolg' in globals():
        toolg.destroy()
    toolg = RestrictedToplevel(g)
    toolg.title('Batch Master')
    b_spec = tk.Button(toolg, text='Spectrogram', command=spec, width=15, height=1, font=('Arial', size(14), "bold"), bg='white', bd=5)
    b_spec.grid(row=0, column=0)
    if lfs.sort != 'no':
        b_kplane = tk.Button(toolg, text='k-Plane', command=kplane, width=15, height=1, font=('Arial', size(14), "bold"), bg='white', bd=5)
        b_kplane.grid(row=0, column=1)
    b_exp_casa = tk.Button(toolg, text='Export to Casa', command=exp_casa, width=15, height=1, font=('Arial', size(14), "bold"), bg='white', bd=5)
    b_exp_casa.grid(row=0, column=2)
    toolg.bind('<Return>', spec)
    set_center(g, toolg, 0, 0)
    toolg.focus_set()
    toolg.limit_bind()
    
class RestrictedToplevel(tk.Toplevel):
    def __init__(self, parent, **kwargs):
        super().__init__(parent, **kwargs)
        set_center(parent, self, 0, 0)
        self.parent = parent
        self.width = parent.winfo_reqwidth()
        self.height = parent.winfo_reqheight()
        
    def limit_bind(self):
        # 綁定配置變化事件
        self.bind('<Configure>', self.on_configure)
        
    def on_configure(self, event):
        # 只處理視窗位置變化（不是大小變化）
        if event.widget == self:
            x = self.winfo_x()
            y = self.winfo_y()
            self.x_min = int(self.parent.geometry().split('+')[1])
            self.y_min = int(self.parent.geometry().split('+')[2])
            self.x_max = self.x_min + self.width or self.winfo_screenwidth()
            self.y_max = self.y_min + self.height or self.winfo_screenheight()
            # 限制移動範圍
            new_x = max(self.x_min, min(x, self.x_max - self.winfo_width()))
            new_y = max(self.y_min, min(y, self.y_max - self.winfo_height()))
            
            # 如果位置超出範圍，重新設定
            if x != new_x or y != new_y:
                self.geometry(f"+{new_x}+{new_y}")
                
def def_cmap():
    global CE
    if 'CE' in globals():
        CE.destroy()
    CE = ColormapEditor()
    set_center(g, CE, 0, 0)
    CE.update()

class ColormapEditor(tk.Toplevel):
    def __init__(self):
        super().__init__()
        set_center(g, self, 0, 0)
        self.title("Colormap Editor")
        self.colors = ['#0000ff', '#00ff00', '#ff0000']  # default three colors
        self.scales = [0, 0.5, 1]
        self.entries = []
        self.scale_entries = []
        self.vmin = tk.DoubleVar(value=0.0)
        self.vmax = tk.DoubleVar(value=1.0)
        self.colormap_name = tk.StringVar(value="custom_cmap")
        self._draw_ui()

    def _draw_ui(self):
        for widget in self.winfo_children():
            widget.destroy()
        self.entries.clear()
        self.scale_entries.clear()
        n = len(self.colors)

        # Frame for color buttons and - + buttons
        colorbar = tk.Frame(self)
        colorbar.grid(row=0, column=0, columnspan=10, pady=5)

        # - button (left)
        if n > 2:
            btn_minus = tk.Button(colorbar, font=('Arial', size(15)), text=" - ", command=self.remove_node)
            btn_minus.pack(side=tk.LEFT, padx=4)
        else:
            btn_minus = None

        # Color buttons and Entry vertically stacked
        for i, (color, scale) in enumerate(zip(self.colors, self.scales)):
            btn_frame = tk.Frame(colorbar)
            btn_frame.pack(side=tk.LEFT, padx=4)
            btn = tk.Button(btn_frame, bg=color, width=10, font=("Arial", size(15)), command=lambda i=i: self.pick_color(i))
            btn.pack(side=tk.TOP)
            self.entries.append(btn)
            scale_entry = tk.Entry(btn_frame, font=("Arial", size(15)), width=5, justify='center')
            scale_entry.insert(0, str(scale))
            # 讓第0個和最後一個Entry為readonly
            if i == 0 or i == n - 1:
                scale_entry.config(state='readonly')
            scale_entry.pack(side=tk.TOP, pady=(2, 0))
            self.scale_entries.append(scale_entry)

        # + button (right)
        btn_plus = tk.Button(colorbar, font=("Arial", size(15)), text=" + ", command=self.add_node)
        btn_plus.pack(side=tk.LEFT, padx=4)

        # Other widgets
        tk.Label(self, font=("Arial", size(15)), text="vmin:").grid(row=3, column=0, sticky='e')
        tk.Entry(self, font=("Arial", size(15)), textvariable=self.vmin, width=7).grid(row=3, column=1, sticky='w')
        tk.Label(self, font=("Arial", size(15)), text="vmax:").grid(row=3, column=2, sticky='e')
        tk.Entry(self, font=("Arial", size(15)), textvariable=self.vmax, width=7).grid(row=3, column=3, sticky='w')
        tk.Label(self, font=("Arial", size(15)), text="Colormap Name:").grid(row=4, column=0, sticky='e')
        tk.Entry(self, font=("Arial", size(15)), textvariable=self.colormap_name, width=15).grid(row=4, column=1, columnspan=2, sticky='w')
        tk.Button(self, font=("Arial", size(15)), text="Show Colormap", command=self.show_colormap_toplevel).grid(row=5, column=0, columnspan=max(3, len(self.colors)), pady=5)
        tk.Button(self, font=("Arial", size(15)), text="Register & Save", command=self.register_and_save).grid(row=6, column=0, columnspan=2, pady=5)
        tk.Button(self, font=("Arial", size(15)), text="Load Colormap", command=self.load_colormap).grid(row=6, column=2, columnspan=2, pady=5)
    
    def pick_color(self, idx):
        color = colorchooser.askcolor(title="Pick a color")[1]
        if color:
            self.colors[idx] = color
            self.entries[idx].config(bg=color)
        self.focus_set()

    def add_node(self):
        if len(self.colors) >= 10:
            return
        mid = len(self.colors) // 2
        self.colors.insert(mid, '#ffffff')
        # 重新等分 scale
        n = len(self.colors)
        self.scales = [round(i/(n-1), 4) for i in range(n)]
        self._draw_ui()

    def remove_node(self):
        if len(self.colors) > 2:
            self.colors.pop(-2)
            # 重新等分 scale
            n = len(self.colors)
            self.scales = [round(i/(n-1), 4) for i in range(n)]
            self._draw_ui()

    def get_colormap(self):
        try:
            self.scales = [float(e.get()) for e in self.scale_entries]
        except ValueError:
            messagebox.showerror("Error", "Please enter valid scale values.")
            return None
        if not (all(0 <= s <= 1 for s in self.scales) and all(self.scales[i] < self.scales[i+1] for i in range(len(self.scales)-1))):
            messagebox.showerror("Error", "Scales must be increasing and between 0 and 1.")
            return None
        from matplotlib.colors import LinearSegmentedColormap
        cmap = LinearSegmentedColormap.from_list(self.colormap_name.get(), list(zip(self.scales, self.colors)))
        return cmap

    def show_colormap_toplevel(self):
        cmap = self.get_colormap()
        if cmap is None:
            return
        arr = np.linspace(self.vmin.get(), self.vmax.get(), 100).reshape(1, -1)
        top = tk.Toplevel(self)
        top.title(f"Colormap Preview: {self.colormap_name.get()}")
        fig, ax = plt.subplots(figsize=(5*scale, 3*scale))
        im = ax.imshow(arr, aspect='auto', cmap=cmap, vmin=self.vmin.get(), vmax=self.vmax.get())
        ax.set_xticks([])
        ax.set_yticks([])
        fig.colorbar(im, ax=ax, orientation='horizontal')
        canvas = FigureCanvasTkAgg(fig, master=top)
        fig.tight_layout()
        canvas.draw()
        canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)
        # Release resources when closing
        def on_close():
            plt.close(fig)
            top.destroy()
        top.protocol("WM_DELETE_WINDOW", on_close)

    def register_and_save(self):
        global optionList3, value3, setcmap
        cmap = self.get_colormap()
        if cmap is None:
            return
        name = self.colormap_name.get()
        # Register to matplotlib colormap
        matplotlib.colormaps.register(cmap, name=name, force=True)
        messagebox.showinfo("Colormap", f"Colormap '{name}' has been registered to matplotlib.")
        if colormap_name:
            optionList3 = [name, 'prevac_cmap', colormap_name, 'terrain', 'custom_cmap1', 'custom_cmap2', 'custom_cmap3', 'custom_cmap4', 'viridis', 'turbo', 'inferno', 'plasma', 'copper', 'grey', 'bwr']
        else:
            optionList3 = [name, 'prevac_cmap', 'terrain', 'custom_cmap1', 'custom_cmap2', 'custom_cmap3', 'custom_cmap4', 'viridis', 'turbo', 'inferno', 'plasma', 'copper', 'grey', 'bwr']
        setcmap.grid_forget()
        value3.set(name)
        setcmap = tk.OptionMenu(cmlf, value3, *optionList3)
        setcmap.grid(row=0, column=1)
        g.update()
        # Save file
        data = {
            "colors": np.array(self.colors),
            "scales": np.array(self.scales),
            "vmin": self.vmin.get(),
            "vmax": self.vmax.get(),
            "name": name
        }
        save_path = fd.asksaveasfilename(
            title="Save custom colormap",
            defaultextension=".npz",
            filetypes=[("NumPy zip", "*.npz")],
            initialdir=cdir,
            initialfile=f"{name}.npz"
        )
        np.savez(save_path, **data)
        np.savez(os.path.join(cdir,".MDC_cut","colormaps.npz"), **data)
        if save_path:
            messagebox.showinfo("Colormap", f"Colormap has been saved to:\n{save_path}")

    def load_colormap(self):
        global optionList3, value3, setcmap
        # Load npz file
        load_dir = cdir
        file_path = fd.askopenfilename(
            title="Select custom colormap file",
            filetypes=[("NumPy zip", "*.npz")],
            initialdir=load_dir if os.path.exists(load_dir) else "."
        )
        if not file_path:
            return
        try:
            data = np.load(file_path, allow_pickle=True)
            self.colors = list(data["colors"])
            self.scales = list(data["scales"])
            self.vmin.set(float(data["vmin"]))
            self.vmax.set(float(data["vmax"]))
            self.colormap_name.set(str(data["name"]))
            self._draw_ui()
            messagebox.showinfo("Colormap", f"Colormap loaded: {self.colormap_name.get()}")
            cmap = self.get_colormap()
            if cmap is None:
                return
            name = self.colormap_name.get()
            # Register to matplotlib colormap
            matplotlib.colormaps.register(cmap, name=name, force=True)
            optionList3.append(name)
            setcmap.grid_forget()
            value3.set(name)
            setcmap = tk.OptionMenu(cmlf, value3, *optionList3)
            setcmap.grid(row=0, column=1)
            g.update()
            np.savez(os.path.join(cdir,".MDC_cut","colormaps.npz"), **data)
            
        except Exception as e:
            messagebox.showerror("Error", f"Failed to load: {e}")

class loadfiles():
    """
    A class to handle loading and organizing multiple file types for analysis.
    It supports h5, json, txt, and npz files, and organizes them based on R1 and R2 values.
    
    Parameters
    ----------
        files (list, tuple or string) : File paths to be loaded. It can include h5, json, txt, and npz files.
    
    Attributes
    ----------
        data (list): List of loaded data from files.
        path (list): List of file paths.
        name (list): List of file names without extensions.
        r1 (list): List of R1 values extracted from file names.
        r2 (list): List of R2 values extracted from file names.
        f_npz (list): Boolean list indicating if the corresponding file is a npz file
        n (list): Indices of files that are npz or VolumeSlicer h5 files.
    """
    def __init__(self, files: list[str] | tuple[str, ...] | str):
        if isinstance(files, str):
            files = [files] # Convert string to list ensuring compatibility
        self.f_npz = [False for i in files]
        self.n = []
        for i, v in enumerate(files):
            tf=False
            try:
                if load_h5(v).attrs['Acquisition'] in ['VolumeSlicer', 'DataCube']:
                    tf=True
            except: pass
            if '.npz' in os.path.basename(v) or tf:
                self.f_npz[i] = True
                self.n.append(i)
        self.opath = [f for f in files]
        self.oname = [os.path.basename(f).split('#id#')[0].split('#d#')[0].split('id')[0].replace('.h5', '').replace('.json', '').replace('.txt', '').replace('.npz', '') for f in self.opath]
        self.r1s = ['R1_', 'R1 ', 'R1', 'r1_', 'r1 ', 'r1']
        self.r2s = ['R2_', 'R2 ', 'R2', 'r2_', 'r2 ', 'r2']
        self.sep = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z',
                    'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',
                    ',','!','@','#','$','%','^','&','*','(',')','_','-','+','=','[',']','{','}','|','\\',';',':','\'','"',
                    ' ','.txt','.TXT']
        self.__set_r1_r2()
        self.__set_data()
        
    def __set_data(self):
        self.data = []
        for i in self.path:
            tbasename = os.path.basename(i)
            if '.h5' in tbasename:
                self.data.append(load_h5(i))
            elif '.json' in tbasename:
                self.data.append(load_json(i))
            elif '.txt' in tbasename:
                self.data.append(load_txt(i))
            elif '.npz' in tbasename:
                self.data.append(load_npz(i))
            else:
                self.data.append([])
    
    def __set_r1_r2(self):
        def __sort_r1_r2():
            self.or2 = self.gen_r2(self.oname, self.r1_splitter, self.r2_splitter)
            self.or1 = self.gen_r1(self.oname, self.r1_splitter, self.r2_splitter)
            self.path1 = []
            self.r11 = []
            tpath = []
            tr1 = []
            tr2 = []
            self.r2 = []
            r2 = sorted(set(self.or2))
            for i in r2:
                for j,k,l in zip(self.opath, self.or1, self.or2):
                    if i == l:
                        tpath.append(j)
                        tr1.append(k)
                        tr2.append(l)
                self.path1.append(tpath)
                self.r11.append(tr1)
                self.r2.append(tr2)
                tpath = []
                tr1 = []
                tr2 = []
            self.path = []
            self.r1 = []
            t = 0
            for i in self.path1:
                opath = [f for f in i]
                path = res(self.r11[t], opath)
                r1 = res(self.r11[t], self.r11[t])
                for j,v in enumerate(path):
                    self.path.append(v)
                    self.r1.append(r1[j])
                t+=1
            self.name = [os.path.basename(f).split('#id#')[0].split('#d#')[0].split('id')[0].replace('.h5', '').replace('.json', '').replace('.txt', '') for f in self.path]
            self.name = self.check_repeat(self.name)
            
        def __sort_r1():
            self.or1 = self.gen_r1(self.oname, self.r1_splitter, self.r2_splitter)
            self.path = res(self.or1, self.opath)
            self.r1 = res(self.or1, self.or1)
            self.name = [os.path.basename(f).split('#id#')[0].split('#d#')[0].split('id')[0].replace('.h5', '').replace('.json', '').replace('.txt', '') for f in self.path]
            self.name = self.check_repeat(self.name)
            
        self.r1_splitter , self.r2_splitter= [], []
        r1s = self.r1s
        r2s = self.r2s
        for i in self.oname:
            tj, tk = False, False
            for j,k in zip(r1s, r2s):
                if j in i and tj == False:
                    self.r1_splitter.append(j)
                    tj = True
                if k in i and tk == False:
                    self.r2_splitter.append(k)
                    tk = True
            if not tj:
                self.r1_splitter.append('No_r1')
            if not tk:
                self.r2_splitter.append('No_r2')
        
        try:
            f = True
            t=0
            for i in self.oname:
                if len(i.split(self.r1_splitter[t]))<=1 or len(i.split(self.r2_splitter[t]))<=1:
                    f = False
                t+=1
            if f:   # r1 and r2 exist
                __sort_r1_r2()
                self.sort = 'r1r2'
                if __name__ == '__main__':
                    print('Sort by r1 and r2\n')
            elif len(self.oname[0].split(self.r1_splitter[0]))>1:   # only r1 exist
                __sort_r1()
                self.sort = 'r1'
                if __name__ == '__main__':
                    print('Sort by r1\n') 
            else:   # no r1 and r2
                if self.r1s[0] == 'X_':
                    self.r1s, self.r2s = ['R1_', 'R1 ', 'R1', 'r1_', 'r1 ', 'r1'], ['R2_', 'R2 ', 'R2', 'r2_', 'r2 ', 'r2']
                    self.path = self.opath
                    self.name = self.check_repeat(self.oname)
                    self.sort = 'no'
                    if __name__ == '__main__':
                        print('No Sort\n')
                else:
                    self.r1s, self.r2s = ['X_', 'X ', 'X', 'x_', 'x ', 'x'], ['Z_', 'Z ', 'Z', 'z_', 'z ', 'z']
                    self.__set_r1_r2()
        except:
            self.r1s, self.r2s = ['R1_', 'R1 ', 'R1', 'r1_', 'r1 ', 'r1'], ['R2_', 'R2 ', 'R2', 'r2_', 'r2 ', 'r2']
            self.path = self.opath
            self.name = self.check_repeat(self.oname)
            self.sort = 'no'
            if __name__ == '__main__':
                print('No Sort (Exception)\n')
        
    def check_repeat(self, name):
        fl = False
        tname = [f for f in name]
        if len(name) != len(set(name)):
            fl = True
        if fl:
            t = 0
            while t < len(tname):
                fj = False
                tt = False
                tj = t
                for j in range(t+1, len(name)):
                    if name[t] == name[j]:
                        if not tt:
                            tname[t] = tname[t]+'#id#'+str(t)
                            tt = True
                        tname[j] = tname[j]+'#id#'+str(j)
                        fj = True
                        tj = j
                if fj:
                    t = tj
                t+=1
        return tname
        
    def gen_r1(self, name, r1_splitter, r2_splitter):
            try:
                r1 = []
                for i,v in enumerate(name):
                    tf=True
                    t=v.split(r1_splitter[i])[1].split(r2_splitter[i])[0].split(' ')[0].split('_')[0]
                    while tf:
                        try:
                            a=float(t)
                            tf=False
                        except:
                            for j in self.sep:
                                if j in t:
                                    t=t.split(j)[0]
                    r1.append(a)
                return np.float64(r1)
            except:
                print('Error in loadfiles().gen_r1')
                print(sys.exc_info())
                return name
    
    def gen_r2(self, name, r1_splitter, r2_splitter):
            try:
                r2 = []
                for i,v in enumerate(name):
                    tf=True
                    t=v.split(r2_splitter[i])[1].split(r1_splitter[i])[0].split(' ')[0].split('_')[0]
                    while tf:
                        try:
                            a=float(t)
                            tf=False
                        except:
                            for j in self.sep:
                                if j in t:
                                    t=t.split(j)[0]
                    r2.append(a)
                return np.float64(r2)
            except:
                print('Error in loadfiles().gen_r2')
                print(sys.exc_info())
                return name
            
    def export_casa(self):
        path = fd.asksaveasfilename(title="Save as", filetypes=(("VMS files", "*.vms"),), initialdir=self.path[0], initialfile=self.name[0], defaultextension='.vms')
        if path.split('.')[-1] != 'vms':
            path += '.vms'
        if path != '.vms':
            # os.chdir(path.removesuffix(path.split('/')[-1]))
            os.chdir(os.path.dirname(path))
            f = open(path, 'w', encoding='utf-8')
            head = rf'''VAMAS Surface Chemical Analysis Standard Data Transfer Format 1988 May 4
    Not Specified
    PREVAC EA15
    2D Lab
    Not Specified
    3
    Casa Info Follows CasaXPS Version 2.3.18PR1.0
    0
    Number of Regions={len(self.name)}
    NORM
    REGULAR
    0
    1
    Data Set
    d
    0
    0
    0
    0
    {len(self.name)}
    '''     
            body = ''
            for i in self.data:
                s=spectrogram(i)
                body+=s.gen_casa_body()
            f.write(head+body+'end of experiment\n')
            f.close()
            
def cut_job_y(args):
    i, angle, phi_offset, r1_offset, phi1_offset, r11_offset, self_x, self_volume, cdensity, xmax, xmin, ymax, ymin, z, x, self_z, self_y, ev, e_photon, sym = args
    # print(i)
    # shm_dtype = np.dtype(shm_dtype)
    # existing_shm = shared_memory.SharedMemory(name=shm_name)
    # self_volume = np.ndarray(shm_shape, dtype=shm_dtype, buffer=existing_shm.buf)
    g=VolumeSlicer()
    g.ev = ev
    g.y = self_y
    g.z = self_z
    g.cdensity = cdensity
    g.type = 'reciprocal'
    g.xmin = xmin
    g.xmax = xmax
    g.ymin = ymin
    g.ymax = ymax
    g.ox = self_x
    g.phi_offset = phi_offset
    g.r1_offset = r1_offset
    g.phi1_offset = phi1_offset
    g.r11_offset = r11_offset
    g.e_photon = e_photon
    g.angle = angle
    g.slice_index = i
    g.sym = sym
    surface = g.slice_data(i, angle, self_x, self_volume, x, z)
    td = surface[int(cdensity/(xmax-xmin)*(min(z)-xmin)):int(cdensity/(xmax-xmin)*(max(z)-xmin)), int(cdensity/(ymax-ymin)*(min(x)-ymin)):int(cdensity/(ymax-ymin)*(max(x)-ymin))]
    td = cv2.resize(td, (cdensity, td.shape[1]), interpolation=cv2.INTER_CUBIC)
    result = td.mean(axis=0)
    del td
    gc.collect()
    path_cut = os.path.join('cut_temp_save', f'cut_{i}.zarr')
    path_cube = os.path.join('cube_temp_save', f'cube_{i}.zarr')
    zarr.save(path_cut, result)
    zarr.save(path_cube, surface)
    return i, result, surface

def cut_job_x(args):
    i, angle, phi_offset, r1_offset, phi1_offset, r11_offset, self_x, self_volume, cdensity, xmax, xmin, ymax, ymin, z, x, self_z, self_y, ev, e_photon, sym = args
    # print(i)
    # shm_dtype = np.dtype(shm_dtype)
    # existing_shm = shared_memory.SharedMemory(name=shm_name)
    # self_volume = np.ndarray(shm_shape, dtype=shm_dtype, buffer=existing_shm.buf)
    g=VolumeSlicer()
    g.ev = ev
    g.y = self_y
    g.z = self_z
    g.cdensity = cdensity
    g.type = 'reciprocal'
    g.xmin = xmin
    g.xmax = xmax
    g.ymin = ymin
    g.ymax = ymax
    g.ox = self_x
    g.phi_offset = phi_offset
    g.r1_offset = r1_offset
    g.phi1_offset = phi1_offset
    g.r11_offset = r11_offset
    g.e_photon = e_photon
    g.angle = angle
    g.slice_index = i
    g.sym = sym
    surface = g.slice_data(i, angle, self_x, self_volume, x, z)
    td = surface[int(cdensity/(xmax-xmin)*(min(z)-xmin)):int(cdensity/(xmax-xmin)*(max(z)-xmin)), int(cdensity/(ymax-ymin)*(min(x)-ymin)):int(cdensity/(ymax-ymin)*(max(x)-ymin))]
    td = cv2.resize(td, (td.shape[0], cdensity), interpolation=cv2.INTER_CUBIC)
    result = td.mean(axis=1)
    del td
    gc.collect()
    path_cut = os.path.join('cut_temp_save', f'cut_{i}.zarr')
    path_cube = os.path.join('cube_temp_save', f'cube_{i}.zarr')
    zarr.save(path_cut, result)
    zarr.save(path_cube, surface)
    return i, result, surface

def set_entry_value(entry, value):
    entry.delete(0, tk.END)
    entry.insert(0, value)

def mesh(x, y):
    """
    Create a meshgrid from x and y arrays.
    
    Args
    ------
        x (np.ndarray) : 2D array for x-coordinates.
        y (np.ndarray) : 2D array for y-coordinates.
        
    Returns
    -------
        (X1, Y1, X2, Y2) (tuple) : Meshgrid arrays for x and y coordinates.
    """
    x1, y1 = x.T.copy(), y.T.copy()
    for i in range(x.shape[0]):
        if i % 2 == 0:
            x[i] = x[i][::-1]
            y[i] = y[i][::-1]
    for i in range(y1.shape[0]):
        if i % 2 == 0:
            x1[i] = x1[i][::-1]
            y1[i] = y1[i][::-1]
    return x, y, x1, y1

def rotate(data, angle, size):
    """
    for square data
    """
    mat = cv2.getRotationMatrix2D((size[1]/2, size[0]/2), angle, 1)
    data = cv2.warpAffine(data, mat, (size[1], size[0]), flags=cv2.INTER_NEAREST)
    return data

class g_cut_plot(tk.Toplevel):
    def __init__(self, master, data_cut, cx, cy, cdx, cdy, cdensity, ty, z, x, angle, phi_offset, r1_offset, phi1_offset, r11_offset, stop_event, pool, path, e_photon, slim, sym, xmin, xmax, ymin, ymax, cube):
        super().__init__(master, background='white')
        self.cx_cut = cx
        self.cy_cut = cy
        self.cdx_cut = cdx
        self.cdy_cut = cdy
        self.phi_offset = phi_offset
        self.r1_offset = r1_offset
        self.phi1_offset = phi1_offset
        self.r11_offset = r11_offset
        self.slim_cut = slim
        self.sym_cut = sym
        self.data_cut = data_cut
        self.cdx = cdx
        self.cdy = cdy
        self.cdensity = cdensity
        self.ty = ty
        self.z = z
        self.x = x
        self.angle = angle
        self.e_photon = e_photon
        self.stop_event = stop_event
        self.pool = pool
        self.path = path
        self.cube = cube
        self.xmin = xmin
        self.xmax = xmax
        self.ymin = ymin
        self.ymax = ymax
        self.save_cube()
        self.create_window()

    def create_window(self):
        self.title('Cut Plot')
        self.protocol("WM_DELETE_WINDOW", self.on_closing)

        fig = plt.Figure(figsize=(8*scale, 8*scale), constrained_layout=True)
        ax = fig.add_subplot(111)
        ax.set_xlabel(r'k ($\frac{2\pi}{\AA}$)', fontsize=size(16))
        ax.set_ylabel('Kinetic Energy (eV)', fontsize=size(16))

        if self.cdx <= self.cdy:
            tx = np.linspace(min(self.z), max(self.z), self.cdensity)
        else:
            tx = np.linspace(min(self.x), max(self.x), self.cdensity)
        x, y = np.meshgrid(tx, self.ty)
        ax.pcolormesh(x, y, self.data_cut, cmap='gray')

        fr_fig = tk.Frame(self, bg='white')
        fr_fig.pack(side=tk.TOP, fill=tk.BOTH, expand=1)
        canvas = FigureCanvasTkAgg(fig, master=fr_fig)
        canvas.draw()
        self.x_cut = tx
        self.y_cut = self.ty
        self.angle_cut = self.angle
        self.phi_offset_cut = self.phi_offset
        self.r1_offset_cut = self.r1_offset
        self.phi1_offset_cut = self.phi1_offset
        self.r11_offset_cut = self.r11_offset

        del fig, ax
        gc.collect()

        canvas.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=1)
        toolbar = NavigationToolbar2Tk(canvas, fr_fig)
        toolbar.update()
        toolbar.pack(side=tk.BOTTOM, fill=tk.BOTH, expand=1)

        fr_save = tk.Frame(self, bg='white')
        fr_save.pack(side=tk.TOP, anchor='center')
        
        save_button = tk.Button(fr_save, text='Save', command=self.save_cut, bg='white', font=('Arial', size(16), "bold"))
        save_button.pack(side=tk.LEFT)
        save_cube_button = tk.Button(fr_save, text='Save Data Cube', command=self.save_cube, bg='white', font=('Arial', size(16), "bold"))
        save_cube_button.pack(side=tk.LEFT)
        
        self.bind("<Return>", self.save_cut)
        self.focus_set()

    def save_zarr(self, path=None, data=None, xmin=None, xmax=None, ymin=None, ymax=None, ev=None):
        attr_array = np.zeros((data.shape[0], data.shape[1], 1))  # Example attribute array
        attr_array[:, 0, 0] = ev
        attr_array[0, 1, 0] = xmin
        attr_array[1, 1, 0] = xmax
        attr_array[2, 1, 0] = ymin
        attr_array[3, 1, 0] = ymax
        zdata = np.append(data, attr_array, axis=2)
        zarr.save(path, zdata)
        for name in os.listdir(path):
            item_path = os.path.join(path, name)
            if os.path.isfile(item_path):
                os.system(f'attrib +h +s "{item_path}"')
            elif os.path.isdir(item_path):
                os.system(f'attrib +h +s "{item_path}"')
        path = os.path.join(path, '__disp__.zarr')
        zdata = np.asarray(data/np.max(data)*255, dtype=np.uint8)
        zarr.save_group(path, data=zdata, ang=np.array([0],dtype=np.float32))
        os.system(f'attrib +h +s "{path}"')
        for name in os.listdir(path):
            item_path = os.path.join(path, name)
            if os.path.isfile(item_path):
                os.system(f'attrib +h +s "{item_path}"')
            elif os.path.isdir(item_path):
                os.system(f'attrib +h +s "{item_path}"')

    def save_cube(self, event=None):
        try:
            path = fd.asksaveasfilename(title="Save Data Cube as Zarr Folder", filetypes=(("Zarr folders", "*.zarr"),), initialdir=self.path[0], initialfile='data_cube', defaultextension=".zarr")
            if not path:
                print('Save operation cancelled')
            else:
                self.save_zarr(path, data=self.cube, xmin=self.xmin, xmax=self.xmax, ymin=self.ymin, ymax=self.ymax, ev=self.ty)
                print(f'Data cube saved to {path}')
        except Exception as e:
            print(f"An error occurred while saving the data cube: {e}")

    def save_cut(self, event=None):
        try:
            path = fd.asksaveasfilename(title="Save as", filetypes=(("HDF5 files", "*.h5"), ("NPZ files", "*.npz"),), initialdir=self.path[0], initialfile='data_cut', defaultextension=".h5")
            if not path:
                print('Save operation cancelled')
                return
            elif path.split('.')[-1] == 'npz':
                np.savez(path, path=self.path, data=self.data_cut, x=self.x_cut, y=self.y_cut, angle=self.angle_cut, cx=self.cx_cut, cy=self.cy_cut, cdx=self.cdx_cut, cdy=self.cdy_cut, phi_offset=self.phi_offset_cut, r1_offset=self.r1_offset_cut, phi1_offset=self.phi1_offset_cut, r11_offset=self.r11_offset_cut, e_photon=self.e_photon, slim=self.slim_cut, sym=self.sym_cut, desc=["Sliced data"])
            elif path.split('.')[-1] == 'h5':
                self.saveh5(path, path=self.path, data=self.data_cut, x=self.x_cut, y=self.y_cut, angle=self.angle_cut, cx=self.cx_cut, cy=self.cy_cut, cdx=self.cdx_cut, cdy=self.cdy_cut, phi_offset=self.phi_offset_cut, r1_offset=self.r1_offset_cut, phi1_offset=self.phi1_offset_cut, r11_offset=self.r11_offset_cut, e_photon=self.e_photon, slim=self.slim_cut, sym=self.sym_cut, desc=["Sliced data"])
            print('Data saved to %s'%path)
        except Exception as e:
            print(f"An error occurred: {e}")

    def on_closing(self):
        del self.cube, self.data_cut
        gc.collect()
        self.stop_event.clear()
        if self.pool:
            self.pool.terminate()
            print('Terminated')
            self.pool.join()
            print('Joined')
        self.destroy()
    
    def saveh5(self, tpath, path, data, x, y, angle, cx, cy, cdx, cdy, phi_offset, r1_offset, phi1_offset, r11_offset, e_photon, slim, sym, desc):
        with h5py.File(tpath, 'w') as f:
            xsize = np.array([len(y)], dtype=int)
            f.create_dataset('Data/XSize/Value', data=xsize, dtype=int)
            ysize = np.array([len(x)], dtype=int)
            f.create_dataset('Data/YSize/Value', data=ysize, dtype=int)
            
            acquisition = [bytes('VolumeSlicer', 'utf-8')]
            acquisition = np.array(acquisition, dtype=h5py.special_dtype(vlen=str))
            f.create_dataset('Region/Acquisition', data=acquisition, dtype=h5py.special_dtype(vlen=str))
            center_energy = np.array([(y[-1]+y[0])/2], dtype=float)
            f.create_dataset('Region/CenterEnergy/Value', data=center_energy, dtype=float)
            description = np.array([bytes(desc[0], 'utf-8')], dtype=h5py.special_dtype(vlen=str))
            f.create_dataset('Region/Description', data=description, dtype=h5py.special_dtype(vlen=str))
            dwell = np.array([bytes('Unknown', 'utf-8')], dtype=h5py.special_dtype(vlen=str))
            f.create_dataset('Region/Dwell/Value', data=dwell, dtype=h5py.special_dtype(vlen=str))
            
            energy_mode = [bytes('Kinetic', 'utf-8')]
            energy_mode = np.array(energy_mode, dtype=h5py.special_dtype(vlen=str))
            f.create_dataset('Region/EnergyMode', data=energy_mode, dtype=h5py.special_dtype(vlen=str))
            excitation_energy = np.array([e_photon], dtype=float)
            f.create_dataset('Region/ExcitationEnergy/Value', data=excitation_energy, dtype=float)
            high_energy = np.array([y[-1]], dtype=float)
            f.create_dataset('Region/HighEnergy/Value', data=high_energy, dtype=float)
            iterations = np.array([bytes('Unknown', 'utf-8')], dtype=h5py.special_dtype(vlen=str))
            f.create_dataset('Region/Iterations/Value', data=iterations, dtype=h5py.special_dtype(vlen=str))
            
            lens_mode = [bytes('Angular', 'utf-8')]
            lens_mode = np.array(lens_mode, dtype=h5py.special_dtype(vlen=str))
            f.create_dataset('Region/LensMode', data=lens_mode, dtype=h5py.special_dtype(vlen=str))
            low_energy = np.array([y[0]], dtype=float)
            f.create_dataset('Region/LowEnergy/Value', data=low_energy, dtype=float)
            name = np.array([bytes(os.path.basename(tpath).removesuffix('.h5'), 'utf-8')], dtype=h5py.special_dtype(vlen=str))
            f.create_dataset('Region/Name', data=name, dtype=h5py.special_dtype(vlen=str))
            y_scale_max = np.array([x[-1]], dtype=float)
            f.create_dataset('Region/YScaleMax/Value', data=y_scale_max, dtype=float)
            y_scale_min = np.array([x[0]], dtype=float)
            f.create_dataset('Region/YScaleMin/Value', data=y_scale_min, dtype=float)
            pass_energy = np.array([bytes('Unknown', 'utf-8')], dtype=h5py.special_dtype(vlen=str))
            f.create_dataset('Region/PassEnergy/Value', data=pass_energy, dtype=h5py.special_dtype(vlen=str))
            step = np.array([y[1]-y[0]], dtype=float)
            f.create_dataset('Region/Step/Value', data=step, dtype=float)
            
            slit = [bytes('Unknown', 'utf-8')]
            slit = np.array(slit, dtype=h5py.special_dtype(vlen=str))
            f.create_dataset('Region/Slit', data=slit, dtype=h5py.special_dtype(vlen=str))
            
            # additional data
            path = np.array([bytes(i, 'utf-8') for i in path], dtype=h5py.special_dtype(vlen=str))
            f.create_dataset('VolumeSlicer/path', data=path)
            angle = np.array([angle], dtype=float)
            f.create_dataset('VolumeSlicer/angle', data=angle)
            cx = np.array([cx], dtype=float)
            f.create_dataset('VolumeSlicer/cx', data=cx)
            cy = np.array([cy], dtype=float)
            f.create_dataset('VolumeSlicer/cy', data=cy)
            cdx = np.array([cdx], dtype=float)
            f.create_dataset('VolumeSlicer/cdx', data=cdx)
            cdy = np.array([cdy], dtype=float)
            f.create_dataset('VolumeSlicer/cdy', data=cdy)
            phi_offset = np.array([phi_offset], dtype=float)
            f.create_dataset('VolumeSlicer/phi_offset', data=phi_offset)
            r1_offset = np.array([r1_offset], dtype=float)
            f.create_dataset('VolumeSlicer/r1_offset', data=r1_offset)
            phi1_offset = np.array([phi1_offset], dtype=float)
            f.create_dataset('VolumeSlicer/phi1_offset', data=phi1_offset)
            r11_offset = np.array([r11_offset], dtype=float)
            f.create_dataset('VolumeSlicer/r11_offset', data=r11_offset)
            slim = np.array([slim], dtype=int)
            f.create_dataset('VolumeSlicer/slim', data=slim)
            sym = np.array([sym], dtype=int)
            f.create_dataset('VolumeSlicer/sym', data=sym)
            
            f.create_dataset('Spectrum', data=np.array(data))

def set_center(parent, child, w_extend=None, h_extend=None):
    """
    
    Set the position of child window to the center of parent window.
    The parent window should have been set with a certain geometry.
    
    Args
    ------
        parent : tk.Tk or tk.Toplevel
        child : tk.Toplevel
    Returns
    -------
        None
    """
    if not isinstance(parent, tk.Tk) and not isinstance(parent, tk.Toplevel):
        raise TypeError("Parent must be a Tk or Toplevel instance.")
    if not isinstance(child, tk.Toplevel):
        raise TypeError("Child must be a Toplevel instance.")
    child.update()
    if w_extend is None and h_extend is None:
        w_extend = round(child.winfo_reqwidth()/5)
        h_extend = round(child.winfo_reqheight()/5)
    if w_extend is None:
        w_extend = 0
    if h_extend is None:
        h_extend = 0
    if not isinstance(w_extend, int) or not isinstance(h_extend, int):
        raise TypeError("w_extend and h_extend must be integers.")
    w_parent, h_parent = parent.winfo_reqwidth(), parent.winfo_reqheight()
    w_child, h_child = child.winfo_reqwidth(), child.winfo_reqheight()
    px = parent.winfo_x() + w_parent // 2 - w_child // 2
    py = parent.winfo_y() + h_parent // 2 - h_child // 2
    child.geometry(f'{w_child+w_extend}x{h_child+h_extend}+{px}+{py}')
 
class wait(tk.Toplevel):
    def __init__(self, master):
        self.g = master
        super().__init__(master, background = 'white')
        set_center(self.g, self)
        self.title('Info')
        tk.Label(self, bg='white', text='Please wait...', font=('Arial', size(16), "bold")).pack(side=tk.TOP, pady=20)
        self.label_info = tk.Label(self, bg='white', text='', font=('Arial', size(14)))
        self.label_info.pack(side=tk.TOP, pady=20)
        self.grab_set()
        self.focus_set()
    
    def text(self, text):
        self.label_info.config(text=text)
        set_center(self.g, self)
        self.update()
    
    def done(self):
        self.grab_release()
        self.destroy()
        del self
        gc.collect()

class VolumeSlicer(tk.Frame):
    def __init__(self, parent=None, path=None, volume=np.zeros((5,5,5), dtype=np.float64), cmap='gray', x=None, y=None, z=None, ev=None, e_photon=21.2, density=600, g=None):
        '''
        Args
        ------
            parent (tkinker-master object or None) : If the master given, the plot will be embedded in the master window.
            path (list) : `loadfiles.path`
            volume (np.ndarray) : shape=(r1, phi, ev)
            cmap (str) : Colormap to be used for the plot, default is 'gray'.
            x (array-like) : 1-D array representing phi values of the raw data in reciprocal mode and z values in real mode.
            y (array-like) : 1-D array representing r1 positions of the data cube in reciprocal mode and x positions in real mode.
            z (array-like) : 1-D array representing r2 positions of the data cube in reciprocal mode, or z positions in real mode.
            ev (array-like) : 1-D array representing kinetic energy values of the raw data.
            e_photon (float) : Photon energy in eV, default is 21.2 eV.
            density (int) : Density of the plot, default is 600.
            g (tkinter main window) : Used to define other tk.Toplevel windows, such as wait window and symmetry choosing window.
        
        Returns
        ------
            Frame (tk.Frame) : A tkinter Frame object containing the plot and controls.
        '''
        if parent is not None:
            super().__init__(parent, bg='white')
        if path is not None:
            self.path = path
        self.cmap=cmap
        # self.volume = volume    # data cube stored as a 3D numpy array
        self.slice_index = volume.shape[2] // 2
        self.angle = 0
        self.density = density
        self.ovolume = volume
        self.phi_offset = 48 # mm / 0 degree
        self.r1_offset = 11.5 # mm / -31 degree
        self.phi1_offset = 0
        self.r11_offset = 0
        self.e_photon = e_photon
        self.z = None
        # base dimensions
        
        # temperaly window range set
        self.m=9.10938356e-31
        self.hbar=1.0545718e-34
        self.e=1.60217662e-19
        self.type = 'real'   # directly stack  'real', 'reciprocal'
        self.mode = 'normal'
        self.sym = 1
        self.g = g
        
        if x is not None and y is not None:
            if __name__ != '__main__':
                global hwnd
                hwnd = None
            self.ox = np.float64(x)
            self.y = np.float64(y)
            if z is not None:
                self.z = np.float64(z)
            self.ev = np.float64(ev)
            self.slim = [0, 493]    # init phi slice range -10~10 degree or -2.5~2.5 mm
            # Create a figure and axis
            self.fig = plt.Figure(figsize=(9*scale, 9*scale),constrained_layout=True)
            self.ax = self.fig.add_subplot(111)
            self.ax.set_aspect('equal')
            # self.ax.set_xticks([])
            # self.ax.set_yticks([])
            self.fig.subplots_adjust(bottom=0.25)
            
            self.fig_region = plt.Figure(figsize=(4*scale, 4*scale),constrained_layout=True)
            self.ax_region = self.fig_region.add_subplot(111)
            self.fig_region.subplots_adjust(bottom=0.25)
            
            if self.type == 'real':
                self.ax.set_xlabel('x (mm)', fontsize=size(16))
                self.ax.set_ylabel('z (mm)', fontsize=size(16))
                if z is not None:
                    self.xmin = np.min(np.min(x)+np.min(z))
                    self.xmax = np.max(np.max(x)+np.max(z))
                else:
                    self.xmin = np.min(x)
                    self.xmax = np.max(x)
                self.ymin = np.min(y)
                self.ymax = np.max(y)
                if self.xmin+self.xmax > 2*self.phi_offset:
                    self.xmin = self.phi_offset-(self.xmax-self.phi_offset)
                if self.xmax+self.xmin < 2*self.phi_offset:
                    self.xmax = self.phi_offset-(self.xmin-self.phi_offset)
                if self.ymin+self.ymax > 2*self.r1_offset:
                    self.ymin = self.r1_offset-(self.ymax-self.r1_offset)
                if self.ymax+self.ymin < 2*self.r1_offset:
                    self.ymax = self.r1_offset-(self.ymin-self.r1_offset)
            elif self.type == 'reciprocal':
                self.ax.set_xlabel(r'kx ($\frac{2\pi}{\AA}$)', fontsize=size(20))
                self.ax.set_ylabel(r'ky ($\frac{2\pi}{\AA}$)', fontsize=size(20))
                self.set_xy_lim()
            
            self.fl_show = False
            # self.interpolate_slice(self.slice_index)
            self.surface = np.zeros((self.density, self.density), dtype=np.float32)
            self.img = self.ax.imshow(self.surface, cmap=cmap, extent=[-1, 1, -1, 1], origin='lower')
            self.hl, = self.ax.plot([0, 0], [0, 0], color='green', linestyle='--')
            self.vl, = self.ax.plot([0, 0], [0, 0], color='green', linestyle='--')
            self.cut_l, = self.ax.plot([0, 0], [0, 0], color='red', linestyle='-')
            self.hl.set_data([],[])
            self.vl.set_data([],[])
            self.cut_l.set_data([], [])
            
            if parent is not None:
                self.fl_show = True     #flag to allow self.label_info window updating
                
                frame1 = tk.Frame(self, bg='white')
                frame1.grid(row=0, column=0)
                
                # Create a canvas and add it to the frame
                self.canvas = FigureCanvasTkAgg(self.fig, master=frame1)
                self.canvas.draw()
                self.canvas.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=1)
                # self.canvas.get_tk_widget().grid(row=0, column=1)
                
                # Create a toolbar and add it to the frame
                self.toolbar = NavigationToolbar2Tk(self.canvas, frame1)
                self.toolbar.update()
                self.toolbar.pack(side=tk.BOTTOM, fill=tk.BOTH, expand=1)
                # self.toolbar.grid(row=1, column=0)
                
                frame2 = tk.Frame(self, bg='white')
                frame2.grid(row=0, column=1)
                
                frame_mode = tk.Frame(frame2, bg='white')
                frame_mode.pack(side=tk.TOP)
                self.b_mode = tk.Button(frame_mode, text='Transmission Mode', command=self.change_mode, bg='white', font=('Arial', size(16), "bold"))
                self.b_mode.pack(side=tk.LEFT)
                label_d = tk.Label(frame_mode, text='Density:', bg='white', font=('Arial', size(16), "bold")) 
                label_d.pack(side=tk.LEFT)
                self.entry_d = tk.Entry(frame_mode, bg='white', font=('Arial', size(16), "bold"))
                self.entry_d.pack(side=tk.LEFT)
                self.entry_d.insert(0, str(self.density))
                self.b_d = tk.Button(frame_mode, text='Set Density', command=self.set_density, bg='white', font=('Arial', size(16), "bold"))
                self.b_d.pack(side=tk.LEFT)
                
                
                frame_entry1 = tk.Frame(frame2, bg='white')
                frame_entry1.pack(side=tk.TOP)
                label_info = tk.Label(frame_entry1, text="Set Slit Slice Range (0-493 for initial range)", bg='white', font=('Arial', size(14), "bold"))
                label_info.pack(side=tk.TOP)
                
                # Create entries and button to set self.slim
                label_min = tk.Label(frame_entry1, text="Min:", bg='white', font=('Arial', size(14), "bold"))
                label_min.pack(side=tk.LEFT)
                self.entry_min = tk.Entry(frame_entry1, bg='white', font=('Arial', size(14), "bold"))
                self.entry_min.pack(side=tk.LEFT)
                self.entry_min.insert(0, str(self.slim[0]))

                label_max = tk.Label(frame_entry1, text="Max:", bg='white', font=('Arial', size(14), "bold"))
                label_max.pack(side=tk.LEFT)
                self.entry_max = tk.Entry(frame_entry1, bg='white', font=('Arial', size(14), "bold"))
                self.entry_max.pack(side=tk.LEFT)
                self.entry_max.insert(0, str(self.slim[1]))

                self.set_slim_button = tk.Button(frame_entry1, text="Set Limit", command=self.set_slim, font=('Arial', size(14), "bold"), bg='white')
                self.set_slim_button.pack(side=tk.LEFT)
                
                frame_entry2 = tk.Frame(frame2, bg='white')
                frame_entry2.pack(side=tk.TOP)
                # Create labels and entries for window range
                label_xmin = tk.Label(frame_entry2, text="X Min:", bg='white', font=('Arial', size(14), "bold"))
                label_xmin.pack(side=tk.LEFT)
                self.entry_xmin = tk.Entry(frame_entry2, bg='white', font=('Arial', size(14), "bold"))
                self.entry_xmin.pack(side=tk.LEFT)
                self.entry_xmin.insert(0, str(self.ymin))
                self.entry_xmin.config(state='disabled')

                label_xmax = tk.Label(frame_entry2, text="X Max:", bg='white', font=('Arial', size(14), "bold"))
                label_xmax.pack(side=tk.LEFT)
                self.entry_xmax = tk.Entry(frame_entry2, bg='white', font=('Arial', size(14), "bold"))
                self.entry_xmax.pack(side=tk.LEFT)
                self.entry_xmax.insert(0, str(self.ymax))
                self.entry_xmax.config(state='disabled')

                frame_entry3 = tk.Frame(frame2, bg='white')
                frame_entry3.pack(side=tk.TOP)

                label_ymin = tk.Label(frame_entry3, text="Y Min:", bg='white', font=('Arial', size(14), "bold"))
                label_ymin.pack(side=tk.LEFT)
                self.entry_ymin = tk.Entry(frame_entry3, bg='white', font=('Arial', size(14), "bold"))
                self.entry_ymin.pack(side=tk.LEFT)
                self.entry_ymin.insert(0, str(self.xmin))
                self.entry_ymin.config(state='disabled')

                label_ymax = tk.Label(frame_entry3, text="Y Max:", bg='white', font=('Arial', size(14), "bold"))
                label_ymax.pack(side=tk.LEFT)
                self.entry_ymax = tk.Entry(frame_entry3, bg='white', font=('Arial', size(14), "bold"))
                self.entry_ymax.pack(side=tk.LEFT)
                self.entry_ymax.insert(0, str(self.xmax))
                self.entry_ymax.config(state='disabled')

                self.win_sym_frame = tk.Frame(frame2, bg='white')
                self.win_sym_frame.pack(side=tk.TOP)
                self.set_window_button = tk.Button(self.win_sym_frame, text="Set Window Range", command=self.set_window, font=('Arial', size(14), "bold"), bg='white')
                self.set_window_button.pack(side=tk.LEFT)
                self.set_sym_button = tk.Button(self.win_sym_frame, text="Symmetrical extend", command=self.symmetry, font=('Arial', size(14), "bold"), bg='white')
                
                self.frame_region = tk.Frame(frame2, bg='white')
                # self.frame_region.pack(side=tk.TOP)
                self.canvas_region = FigureCanvasTkAgg(self.fig_region, master=self.frame_region)
                self.canvas_region.draw()
                self.canvas_region.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=1)
                self.pr_disp_region()
                
                frame_entry4 = tk.Frame(frame2, bg='white')
                frame_entry4.pack(side=tk.TOP)
                self.label_phi_offset = tk.Label(frame_entry4, text="Set Z Offset (mm):", bg='white', font=('Arial', size(14), "bold"))
                self.label_phi_offset.pack(side=tk.LEFT)
                self.entry_phi_offset = tk.Entry(frame_entry4, bg='white', font=('Arial', size(14), "bold"), state='normal')
                self.entry_phi_offset.pack(side=tk.LEFT)
                self.entry_phi_offset.insert(0, str(self.phi_offset))
                
                self.frame_entry5 = tk.Frame(frame2, bg='white')
                self.frame_entry5.pack(side=tk.TOP)
                self.label_r1_offset = tk.Label(self.frame_entry5, text="Set X Offset (mm):", bg='white', font=('Arial', size(14), "bold"))
                self.label_r1_offset.pack(side=tk.LEFT)
                self.entry_r1_offset = tk.Entry(self.frame_entry5, bg='white', font=('Arial', size(14), "bold"), state='normal')
                self.entry_r1_offset.pack(side=tk.LEFT)
                self.entry_r1_offset.insert(0, str(self.r1_offset))
                
                self.frame_entry6 = tk.Frame(frame2, bg='white')
                self.frame_entry6.pack(side=tk.TOP)
                self.label_phi1_offset = tk.Label(self.frame_entry6, text="Set Sample Phi Offset (deg):", bg='white', font=('Arial', size(14), "bold"))
                self.label_phi1_offset.pack(side=tk.LEFT)
                self.entry_phi1_offset = tk.Entry(self.frame_entry6, bg='white', font=('Arial', size(14), "bold"), state='normal')
                self.entry_phi1_offset.pack(side=tk.LEFT)
                self.entry_phi1_offset.insert(0, str(self.phi1_offset))
                
                self.frame_entry7 = tk.Frame(frame2, bg='white')
                self.frame_entry7.pack(side=tk.TOP)
                self.label_r11_offset = tk.Label(self.frame_entry7, text="Set Sample R1 Offset (deg):", bg='white', font=('Arial', size(14), "bold"))
                self.label_r11_offset.pack(side=tk.LEFT)
                self.entry_r11_offset = tk.Entry(self.frame_entry7, bg='white', font=('Arial', size(14), "bold"), state='normal')
                self.entry_r11_offset.pack(side=tk.LEFT)
                self.entry_r11_offset.insert(0, str(self.r11_offset))

                self.fig1 = plt.Figure(figsize=(5*scale, 0.5*scale),constrained_layout=True)
                self.ax_slider = self.fig1.add_axes([0.2, 0.6, 0.8, 0.3])
                self.slider = Slider(self.ax_slider, 'Energy', self.ev[0], self.ev[-1], valinit=self.ev[self.slice_index], valstep=self.ev[1]-self.ev[0])
                self.slider.on_changed(self.set_sl)

                self.ax_angle_slider = self.fig1.add_axes([0.2, 0.1, 0.8, 0.3])
                self.angle_slider = Slider(self.ax_angle_slider, 'Angle', 0, 360, valinit=self.angle, valstep=0.001)
                self.angle_slider.on_changed(self.set_angle_sl)                
                
                self.ea_frame = tk.Frame(frame2, bg='white')
                self.ea_frame.pack(side=tk.TOP, after=self.frame_entry7)
                self.ea_text_frame = tk.Frame(self.ea_frame, bg='white')
                self.ea_text_frame.pack(side=tk.LEFT)
                self.text_e = tk.StringVar()
                self.text_e.set(str(f'%.3f'%self.ev[self.slice_index]))
                self.text_e.trace_add('write', self.set_tx)
                self.text = tk.Entry(self.ea_text_frame, bg='white', textvariable=self.text_e, font=('Arial', size(12), "bold"), state='normal', width=7).pack(side=tk.TOP)
                self.text_a = tk.StringVar()
                self.text_a.set(str(self.angle))
                self.text_a.trace_add('write', self.set_angle_tx)
                self.text_ang = tk.Entry(self.ea_text_frame, bg='white', textvariable=self.text_a, font=('Arial', size(12), "bold"), state='normal', width=7).pack(side=tk.TOP)
                
                self.canvas1 = FigureCanvasTkAgg(self.fig1, master=self.ea_frame)
                self.canvas1.draw()
                self.canvas1.get_tk_widget().pack(side=tk.LEFT, fill=tk.BOTH, expand=1, before=self.ea_text_frame)
                
                self.frame_cut_xy = tk.Frame(frame2, bg='white')
                frame_xy = tk.Frame(self.frame_cut_xy, bg='white')
                frame_xy.pack(side=tk.TOP)
                self.cut_xy_x_label = tk.Label(frame_xy, text="kx:", bg='white', font=('Arial', size(14), "bold"))
                self.cut_xy_x_label.pack(side=tk.LEFT)
                self.cut_xy_x_entry = tk.Entry(frame_xy, bg='white', font=('Arial', size(14), "bold"))
                self.cut_xy_x_entry.pack(side=tk.LEFT)
                self.cut_xy_x_entry.insert(0, '0')
                self.cut_xy_y_label = tk.Label(frame_xy, text="ky:", bg='white', font=('Arial', size(14), "bold"))
                self.cut_xy_y_label.pack(side=tk.LEFT)
                self.cut_xy_y_entry = tk.Entry(frame_xy, bg='white', font=('Arial', size(14), "bold"))
                self.cut_xy_y_entry.pack(side=tk.LEFT)
                self.cut_xy_y_entry.insert(0, '0')
                
                frame_dxy = tk.Frame(self.frame_cut_xy, bg='white')
                frame_dxy.pack(side=tk.TOP)
                self.cut_xy_dx_label = tk.Label(frame_dxy, text="kx bin:", bg='white', font=('Arial', size(14), "bold"))
                self.cut_xy_dx_label.pack(side=tk.LEFT)
                self.cut_xy_dx_entry = tk.Entry(frame_dxy, bg='white', font=('Arial', size(14), "bold"))
                self.cut_xy_dx_entry.pack(side=tk.LEFT)
                self.cut_xy_dx_entry.insert(0, '0.05')
                self.cut_xy_dy_label = tk.Label(frame_dxy, text="ky bin:", bg='white', font=('Arial', size(14), "bold"))
                self.cut_xy_dy_label.pack(side=tk.LEFT)
                self.cut_xy_dy_entry = tk.Entry(frame_dxy, bg='white', font=('Arial', size(14), "bold"))
                self.cut_xy_dy_entry.pack(side=tk.LEFT)
                self.cut_xy_dy_entry.insert(0, '0.4')
                
                frame_cut_button = tk.Frame(self.frame_cut_xy, bg='white')
                frame_cut_button.pack(side=tk.TOP,anchor='center')
                b_cut = tk.Button(frame_cut_button, text='Cut', command=self.cut_xy, bg='white', font=('Arial', size(14), "bold"))
                b_cut.pack(side=tk.LEFT)
                
                b_cut_plot = tk.Button(frame_cut_button, text='Export', command=self.pr_cut_plot, bg='white', font=('Arial', size(14), "bold"))
                b_cut_plot.pack(side=tk.RIGHT)
    
    def cal_r1_phi_offset(self, r2=None):
        if self.z is not None and r2 is not None:
            r11_offset, phi1_offset = self.rot(self.r11_offset, self.phi1_offset, angle=-(r2-self.z[0]))
        else:
            r11_offset, phi1_offset = self.rot(self.r11_offset, self.phi1_offset)
        r1_offset = self.r1_offset + r11_offset
        phi_offset = self.phi_offset + phi1_offset
        return r1_offset, phi_offset
    
    def symmetry(self):
        self.sym_g = RestrictedToplevel(self.g, background='white')
        self.sym_g.title('Symmetry')
        self.sym_g.resizable(False, False)
        tk.Button(self.sym_g, text='2-fold symmetry', command=self.symmetry_2, bg='white', font=('Arial', size(16), "bold")).pack(side=tk.TOP, pady=5)
        tk.Button(self.sym_g, text='3-fold symmetry', command=self.symmetry_3, bg='white', font=('Arial', size(16), "bold")).pack(side=tk.TOP, pady=5)
        tk.Button(self.sym_g, text='4-fold symmetry', command=self.symmetry_4, bg='white', font=('Arial', size(16), "bold")).pack(side=tk.TOP, pady=5)
        set_center(self.g, self.sym_g, 50)
        self.sym_g.update()
        self.sym_g.limit_bind()
    
    def gen_sym(self, n):
        try:
            self.sym_g.destroy()
        except:
            pass
        if n != 1:
            self.sym = n
            osurface = self.surface.copy()
            tmin = np.min(osurface[osurface>0])
            osurface[osurface < tmin-tmin/3] = np.nan
            for i in range(n-1):
                surface = rotate(self.surface, 360//n*(i+1), self.surface.shape)
                surface[surface < tmin-tmin/3] = np.nan
                osurface = np.nanmean([osurface, surface], axis=0)
            self.surface = np.nan_to_num(osurface)
            rotated_surface = rotate(self.surface, -self.angle, self.surface.shape)
            self.img.set_data(rotated_surface)
            copy_to_clipboard(self.fig)
            self.canvas.draw()
            
    def symmetry_2(self):
        self.gen_sym(2)
    
    def symmetry_3(self):
        self.gen_sym(3)
        
    def symmetry_4(self):
        self.gen_sym(4)
        
    def set_xy_lim(self):
        '''
        Input: self.x, self.y, self.r1_offset, self.phi_offset, self.e_photon
        Return: self.xmin, self.xmax, self.ymin, self.ymax
        '''
        r1_offset, phi_offset = self.cal_r1_phi_offset()
        r1 = self.y - r1_offset
        phi = self.x - phi_offset
        tr1 = np.array([np.min(r1), np.max(r1), np.max(r1), np.min(r1)])
        tphi = np.array([np.min(phi), np.min(phi), np.max(phi), np.max(phi)])
        tx = np.sqrt(2*self.m*self.e*self.e_photon)/self.hbar*10**-10*np.sin(tr1/180*np.pi) * np.cos(tphi/180*np.pi)
        ty = np.sqrt(2*self.m*self.e*self.e_photon)/self.hbar*10**-10*np.sin(tphi/180*np.pi)
        r = np.max(np.sqrt(tx**2 + ty**2))
        self.xmin, self.xmax = -r, r
        self.ymin, self.ymax = -r, r
        
    def cut_xy(self, init=False):
        cx = np.float64(self.cut_xy_x_entry.get())
        cy = np.float64(self.cut_xy_y_entry.get())
        cdx = np.float64(self.cut_xy_dx_entry.get())
        cdy = np.float64(self.cut_xy_dy_entry.get())
        if cx-cdx/2 < self.ymin or cx+cdx/2 > self.ymax or cy-cdy/2 < self.xmin or cy+cdy/2 > self.xmax:
            if cx-cdx/2 < self.ymin:
                cdx = (cx-self.ymin)*2
            elif cx+cdx/2 > self.ymax:
                cdx = (self.ymax-cx)*2
            if cy-cdy/2 < self.xmin:
                cdy = (cy-self.xmin)*2
            elif cy+cdy/2 > self.xmax:
                cdy = (self.xmax-cy)*2
        self.cut_xy_dx_entry.delete(0, tk.END)
        self.cut_xy_dx_entry.insert(0, str(cdx))
        self.cut_xy_dy_entry.delete(0, tk.END)
        self.cut_xy_dy_entry.insert(0, str(cdy))
        self.cx = cx
        self.cy = cy
        self.cdx = cdx
        self.cdy = cdy
        if not init:
            self.cut_l.set_data([self.cx-self.cdx/2, self.cx+self.cdx/2, self.cx+self.cdx/2, self.cx-self.cdx/2, self.cx-self.cdx/2], [self.cy-self.cdy/2, self.cy-self.cdy/2, self.cy+self.cdy/2, self.cy+self.cdy/2, self.cy-self.cdy/2])
            self.canvas.draw()
    
    def k_map(self, data, density, xlim, ylim, kxlim, kylim, ev):
        kx_grid, ky_grid = np.meshgrid(
        np.linspace(kxlim[0], kxlim[1], int(density/180*(xlim[1]-xlim[0]))*4),
        np.linspace(kylim[0], kylim[1], int(density/180*(xlim[1]-xlim[0]))*4))
        Phi_target = np.arcsin(np.clip(ky_grid / (np.sqrt(2*self.m*self.e*ev)/self.hbar*1e-10), -1, 1)) * 180 / np.pi
        cos_phi = np.cos(np.deg2rad(Phi_target))
        cos_phi[cos_phi == 0] = 1e-8
        R1_target = np.arcsin(np.clip(kx_grid / (np.sqrt(2*self.m*self.e*ev)/self.hbar*1e-10 * cos_phi), -1, 1)) * 180 / np.pi
        map_x = (R1_target - xlim[0]) / (xlim[1] - xlim[0]) * (data.shape[0] - 1)
        map_y = (Phi_target - ylim[0]) / (ylim[1] - ylim[0]) * (data.shape[1] - 1)
        valid_mask = (
            (R1_target >= xlim[0]) & (R1_target <= xlim[1]) &
            (Phi_target >= ylim[0]) & (Phi_target <= ylim[1]) &
            np.isfinite(map_x) & np.isfinite(map_y)
        )
        map_x[~np.isfinite(map_x)] = 0
        map_y[~np.isfinite(map_y)] = 0
        map_x = np.clip(map_x, 0, data.shape[0] - 1).astype(np.float32)
        map_y = np.clip(map_y, 0, data.shape[1] - 1).astype(np.float32)
        data = cv2.remap(data.T.astype(np.float32), map_x, map_y, interpolation=cv2.INTER_CUBIC, borderMode=cv2.BORDER_CONSTANT, borderValue=0)
        data[~valid_mask] = 0
        data = cv2.resize(data, (int(density/(self.xmax-self.xmin)*(kxlim[1]-kxlim[0])), int(density/(self.ymax-self.ymin)*(kylim[1]-kylim[0]))), interpolation=cv2.INTER_CUBIC)
        return data
    
    def combine_slice(self, data, xlim, ylim, r2=None, ev=None, step=0.25):  # complete
        '''
        Args:
        ---
        data: raw image (shape:(len(r1), len(phi)))
        xlim: [min, max]  x: r1
        ylim: [min, max]  y: phi
        step: width for only one r1 cube (default: 0.25 degree/mm)
        
        return:
        ---
        image
        shape: (density, density)
        '''
        xlim, ylim = sorted(xlim), sorted(ylim)
        fr2 = True
        if self.type == 'real':
            if int(self.cdensity/(self.ymax-self.ymin)*(xlim[1]-xlim[0])) ==0:
                xlim[1] += step
                xlim[0] -= step
            base = np.zeros((self.cdensity, self.cdensity), dtype=np.float32)
            data = cv2.resize(data, (int(self.cdensity/(self.ymax-self.ymin)*(ylim[1]-ylim[0])), int(self.cdensity/(self.xmax-self.xmin)*(xlim[1]-xlim[0]))), interpolation=cv2.INTER_CUBIC)
            base[0:data.shape[0], 0:data.shape[1]] = data
            data = np.roll(base.T, (int((ylim[0]-self.xmin)/(self.xmax-self.xmin)*self.cdensity), int((xlim[0]-self.ymin)/(self.ymax-self.ymin)*self.cdensity)), axis=(0, 1))
            data = data
        elif self.type == 'reciprocal':
            if r2 is None:
                fr2=False
                r2, self.z = 0, [0, 0]
            if int(self.cdensity/180*(xlim[1]-xlim[0])) ==0: # at least 1 pixel
                d = 1/self.cdensity*180/2
                c = (xlim[0]+xlim[1])/2
                xlim = [float(c-d), float(c+d)]
                if self.cut_show:
                    print(f'Warning: R1-axis density is too low (R2=%.2f)'%r2)
                    print('in combine_slice')
            base = np.zeros((self.cdensity, self.cdensity), dtype=np.float32)
            r1 = np.linspace(xlim[0], xlim[1], int(self.cdensity/180*(xlim[1]-xlim[0])+1))
            phi = np.linspace(ylim[0], ylim[1], int(self.cdensity/180*(ylim[1]-ylim[0])))
            # r1, phi = np.broadcast_arrays(r1, phi)
            x = np.sqrt(2*self.m*self.e*ev)/self.hbar*10**-10*np.sin(r1[:, None]/180*np.pi) * np.cos(phi[None, :]/180*np.pi)  # x: r1, y: phi, at r2=0
            y = np.sqrt(2*self.m*self.e*ev)/self.hbar*10**-10*np.sin(phi[None, :]/180*np.pi)
            txlim, tylim = [np.min(x), np.max(x)], [np.min(y), np.max(y)]
            ####### new method start
            data = self.k_map(data, self.cdensity, xlim, ylim, txlim, tylim, ev)
            ####################### new method end
            
            ############## original method start
            # tmax = np.max(data)
            # fig, ax = plt.subplots(dpi=150)
            # fig.patch.set_facecolor('black')
            # ax.set_facecolor('black')
            # data = cv2.resize(data, (int(self.cdensity/180*(ylim[1]-ylim[0])), int(self.cdensity/180*(xlim[1]-xlim[0])+1)), interpolation=cv2.INTER_CUBIC)
            # ax.pcolormesh(x, y, data.T, cmap='gray')    # compatible with r2=0, phi: yaxis, r1: xaxis in transmission mode
            # ax.set_position([0, 0, 1, 1])
            # ax.axis('off')
            # fig.canvas.draw()
            # image_from_plot = np.frombuffer(fig.canvas.tostring_rgb(), dtype=np.uint8)
            # image_from_plot = image_from_plot.reshape(fig.canvas.get_width_height()[::-1] + (3,))
            # plt.close()
            # del fig, ax
            # image_gray = cv2.cvtColor(image_from_plot, cv2.COLOR_RGB2GRAY)/255*tmax
            # image_gray = cv2.resize(image_gray[::-1,:], (data.shape[1],data.shape[0]), interpolation=cv2.INTER_CUBIC)
            # data = cv2.resize(image_gray, (int(self.cdensity/(self.xmax-self.xmin)*(txlim[1]-txlim[0])), int(self.cdensity/(self.ymax-self.ymin)*(tylim[1]-tylim[0]))), interpolation=cv2.INTER_CUBIC)
            ########### original method end
            base[0:data.shape[0], 0:data.shape[1]] = data
            # del image_from_plot, image_gray, data
            del data
            data = np.roll(base, (int((tylim[0]-self.ymin)/(self.ymax-self.ymin)*self.cdensity), int((txlim[0]-self.xmin)/(self.xmax-self.xmin)*self.cdensity)), axis=(0, 1))
            # data = data[::-1, :]
            del base
            gc.collect()
            data = rotate(data, r2-self.z[0], data.shape)
            
            if not fr2:
                self.z = None
        if self.z is not None and fr2==True:  # for multiple cubes need np.nanmean
            msk = data<self.tmin-self.tmin/3
            data[msk] = np.nan
            
        return data
    
    def slice_data(self, i, angle=0, self_x=None, self_volume=None, xlim=None, zlim=None):
        """
        Args
        ------
        self_x : phi-axis, slit limit
        self_volume : 3D numpy array, shape: (r1, phi, ev)
        angle : rotation angle
        xlim : cutting kx lim after rotation, [min, max]
        zlim : cutting ky lim after rotation, [min, max]
        """
        def filter(ind, ii, r2=None):
            r1 = np.linspace(min(self.y[ind]), max(self.y[ind]), len(self.y[ind]))[:, None]
            phi = np.linspace(min(self_x), max(self_x), len(self_x))[None, :]
            r1, phi = np.broadcast_arrays(r1, phi)
            for i in range(self.sym):
                r1_offset, phi_offset = self.cal_r1_phi_offset()
                if r2 is None:
                    r1, phi = self.rot(r1, phi, r1_offset, phi_offset, angle-360//self.sym*i)
                else:
                    r1, phi = self.rot(r1, phi, r1_offset, phi_offset, angle-(r2-self.z[0])-360//self.sym*i)
                if i == 0:
                    x = np.sqrt(2*self.m*self.e*self.ev[ii])/self.hbar*10**-10*np.sin(r1/180*np.pi) * np.cos(phi/180*np.pi)  # x: r1, y: phi, at r2=0
                    y = np.sqrt(2*self.m*self.e*self.ev[ii])/self.hbar*10**-10*np.sin(phi/180*np.pi)
                else:
                    x = np.append(x, np.sqrt(2*self.m*self.e*self.ev[ii])/self.hbar*10**-10*np.sin(r1/180*np.pi) * np.cos(phi/180*np.pi), axis=0)
                    y = np.append(y, np.sqrt(2*self.m*self.e*self.ev[ii])/self.hbar*10**-10*np.sin(phi/180*np.pi), axis=0)
            ti=[]
            for i in range(r1.shape[1]):
                if any(xlim[0]<x[:,i]) and any(zlim[0]<y[:,i]) and any(x[:,i]<xlim[1]) and any(y[:,i]<zlim[1]):
                    ti.append(i)
            if len(ti) != 0:
                if min(ti)>0:
                    ti.insert(0, min(ti)-1)
                if max(ti)<len(self.y[ind])-1:
                    ti.append(max(ti)+1)
            return ind[ti]
        self.cut_show = False
        if i ==100:
            self.cut_show = True
        xlim, zlim = sorted(xlim), sorted(zlim)
        if self.z is None: # for 1 cube
            # ind = filter(np.arange(len(self.y)), i)     #取消filter 篩選加速功能 一律算全範圍 保留完整Data Cube
            # if len(ind) != 0:       #取消filter 篩選加速功能 一律算全範圍 保留完整Data Cube
            #     surface = self.combine_slice(self_volume[ind, :, i], xlim = [min(self.y[ind])-r1_offset, max(self.y[ind])-r1_offset], ylim = [min(self_x)-phi_offset, max(self_x)-phi_offset], ev=self.ev[i])       #取消filter 篩選加速功能 一律算全範圍 保留完整Data Cube
            # else:
            r1_offset, phi_offset = self.cal_r1_phi_offset()
            surface = self.combine_slice(self_volume[:, :, i], xlim = [min(self.y)-r1_offset, max(self.y)-r1_offset], ylim = [min(self_x)-phi_offset, max(self_x)-phi_offset], ev=self.ev[i])
        elif self.z is not None: # for multiple cubes
            img = self_volume[:, :, i]
            try:
                self.tmin = np.min(img[img>0])
                r2 = sorted(set(self.z))
                surface = np.full((self.cdensity, self.cdensity), np.nan, dtype=np.float32)
                for z in r2:
                    ind = np.array(np.argwhere(self.z==z), dtype=np.int64).flatten()
                    # ind = filter(ind, i, r2=z)        #取消filter 篩選加速功能 一律算全範圍 保留完整Data Cube
                    # if len(ind) != 0:     #取消filter 篩選加速功能 一律算全範圍 保留完整Data Cube
                    r1_offset, phi_offset = self.cal_r1_phi_offset(r2=z)
                    surface = np.nanmean([surface, self.combine_slice(self_volume[ind, :, i], xlim = [min(self.y[ind])-r1_offset, max(self.y[ind])-r1_offset], ylim = [min(self_x)-phi_offset, max(self_x)-phi_offset], r2=z, ev=self.ev[i])], axis=0)
                surface = np.nan_to_num(surface)
            except:
                surface = np.zeros((self.cdensity, self.cdensity), dtype=np.float32)
        surface = rotate(surface, -angle, surface.shape)
        osurface = surface.copy()
        try:
            tmin = np.min(osurface[osurface>0])
            osurface[osurface < tmin - tmin / 3] = np.nan
            for ii in range(self.sym-1):
                rotated_surface = rotate(surface, 360//self.sym*(ii+1), surface.shape)
                rotated_surface[rotated_surface < tmin-tmin/3] = np.nan
                osurface = np.nanmean([osurface, rotated_surface], axis=0)
                del rotated_surface
                gc.collect()
            del surface
            gc.collect()
            osurface[osurface < tmin-tmin/3] = np.nan
            surface = np.nan_to_num(osurface)
        except:
            surface = np.zeros((self.cdensity, self.cdensity), dtype=np.float32)
        return surface
    
    def listen_for_stop_command(self):
        command = input()
        if command.strip().lower() == '':
            self.stop_event.set()
            if self.pool:
                self.pool.terminate()
                self.pool.join()
                self.pool = None
    
    def t_cut_job_y(self):
        angle = self.angle
        x = [self.cx-self.cdx/2, self.cx+self.cdx/2]
        z = [self.cy-self.cdy/2, self.cy+self.cdy/2]
        phi_offset = self.phi_offset
        r1_offset = self.r1_offset
        phi1_offset, r11_offset = self.phi1_offset, self.r11_offset
        self_x = self.ox[self.slim[0]:self.slim[1]+1]
        self_volume = self.ovolume[:, self.slim[0]:self.slim[1]+1, :]
        
        # --- Shared memory ---
        # shm = shared_memory.SharedMemory(create=True, size=self_volume.nbytes)
        # shm_volume = np.ndarray(self_volume.shape, dtype=self_volume.dtype, buffer=shm.buf)
        # np.copyto(shm_volume, self_volume)
        
        self.set_xy_lim()
        try:
            os.chdir(os.path.join(cdir, '.MDC_cut'))
            if os.path.exists('cut_temp_save'):
                shutil.rmtree('cut_temp_save')
            os.mkdir('cut_temp_save')
            if os.path.exists('cube_temp_save'):
                shutil.rmtree('cube_temp_save')
            os.mkdir('cube_temp_save')
            with Pool(self.pool_size) as self.pool:
                args = [(i, angle, phi_offset, r1_offset, phi1_offset, r11_offset, self_x, self_volume, self.cdensity, self.xmax, self.xmin, self.ymax, self.ymin, z, x, self.z, self.y, self.ev, self.e_photon, self.sym) for i in range(len(self.ev))]
                for i, result in enumerate(tqdm.tqdm(self.pool.imap(cut_job_y, args), total=len(self.ev), desc="Processing", file=sys.stdout, colour='blue')):
                    if self.stop_event.is_set():
                        # shm.close()
                        # shm.unlink()
                        break
                    # self.data_cut[i, :] = result[1]
                    # self.data_cube[i, :, :] = result[2]     #axis:(energy, ky, kx)
                    pass
                if not self.stop_event.is_set():
                    print("\n\033[32mPress \033[31m'Enter' \033[32mto coninue...\033[0m")
        except Exception as e:
            print('t_cut_job_y')
            print(f"An error occurred: {e}")
        # finally:
            # shm.close()
            # shm.unlink()
                    
    def t_cut_job_x(self):
        angle = self.angle
        x = [self.cx-self.cdx/2, self.cx+self.cdx/2]
        z = [self.cy-self.cdy/2, self.cy+self.cdy/2]
        phi_offset = self.phi_offset
        r1_offset = self.r1_offset
        phi1_offset, r11_offset = self.phi1_offset, self.r11_offset
        self_x = self.ox[self.slim[0]:self.slim[1]+1]
        self_volume = self.ovolume[:, self.slim[0]:self.slim[1]+1, :]
        
        # --- Shared memory ---
        # shm = shared_memory.SharedMemory(create=True, size=self_volume.nbytes)
        # shm_volume = np.ndarray(self_volume.shape, dtype=self_volume.dtype, buffer=shm.buf)
        # np.copyto(shm_volume, self_volume)
        
        self.set_xy_lim()
        try:
            os.chdir(os.path.join(cdir, '.MDC_cut'))
            if os.path.exists('cut_temp_save'):
                shutil.rmtree('cut_temp_save')
            os.mkdir('cut_temp_save')
            if os.path.exists('cube_temp_save'):
                shutil.rmtree('cube_temp_save')
            os.mkdir('cube_temp_save')
            with Pool(self.pool_size) as self.pool:
                args = [(i, angle, phi_offset, r1_offset, phi1_offset, r11_offset, self_x, self_volume, self.cdensity, self.xmax, self.xmin, self.ymax, self.ymin, z, x, self.z, self.y, self.ev, self.e_photon, self.sym) for i in range(len(self.ev))]
                for i, result in enumerate(tqdm.tqdm(self.pool.imap(cut_job_x, args), total=len(self.ev), desc="Processing", file=sys.stdout, colour='blue')):
                    if self.stop_event.is_set():
                        # shm.close()
                        # shm.unlink()
                        break
                    # self.data_cut[i, :] = result[1]
                    # self.data_cube[i, :, :] = result[2]     #axis:(energy, ky, kx)
                    pass
                if not self.stop_event.is_set():
                    print("\n\033[32mPress \033[31m'Enter' \033[32mto coninue...\033[0m")
        except Exception as e:
            print('t_cut_job_x')
            print(f"An error occurred: {e}")
        # finally:
        #     shm.close()
        #     shm.unlink()
            
    def confirm_cut(self, *args):
        self.pr_cut_g.destroy()
        self.cut_plot()
    
    def pr_cut_plot(self):
        if self.sym != 1:
            self.pr_cut_g = RestrictedToplevel(self.g, background='white')
            self.pr_cut_g.title('Info')
            self.pr_cut_g.resizable(False, False)
            tk.Label(self.pr_cut_g, bg='white', text=f'Using {self.sym}-fold symmetry', font=('Arial', size(16), "bold")).pack(side=tk.TOP, padx=10, pady=10)
            tk.Button(self.pr_cut_g, text='OK', command=self.confirm_cut, bg='white', font=('Arial', size(16), "bold")).pack(side=tk.TOP, pady=10)
            self.pr_cut_g.bind("<Return>", self.confirm_cut)
            set_center(self.g, self.pr_cut_g, 100)
            self.pr_cut_g.focus_set()
            self.pr_cut_g.limit_bind()
        else:
            self.cut_plot()
            
    
    def decide_core_num(self):
        '''
        Memory is used to calculate a safe amount of cores by concering the least used memory size per worker.
        The actual memory size that the pool would use may be a little bit larger (1x ~ 1.4x).
        '''
        use_core = max(1, int(psutil.cpu_count(logical=False)/4*3))
        mem_max = self.ovolume[:, self.slim[0]:self.slim[1]+1, :].nbytes/1024**3    # GB
        # print(mem_max, 'mem_max GB')
        mem = g_mem+mem_max
        # print(mem, 'mem GB')
        current_mem = psutil.virtual_memory().available/1024**3
        num = current_mem/mem
        if num < use_core:
            use_core = int(num)
            print('\033[33mPlease note that the number of cores is set according to the memory limit for stability reasons.\033[0m')
        if use_core < 1:
            use_core = 1
            print('\033[33mLack of memory.\033[0m')
        self.pool_size = use_core
        print('\033[33mUsing \033[36m%d \033[33mcores\033[0m'%self.pool_size)
    
    def cut_plot(self):
        if hwnd:
            windll.user32.ShowWindow(hwnd, 9)
            windll.user32.SetForegroundWindow(hwnd)
        self.stop_event = threading.Event()
        t1 = threading.Thread(target=self.listen_for_stop_command, daemon=True)
        t1.start()
        self.cdensity = int((self.xmax-self.xmin)//2e-3)
        print('\nSampling Density: \033[31m500 per 2pi/Angstrom')
        print('\033[0mProcessing \033[32m%d x %d x %d \033[0msize data cube'%(self.cdensity, self.cdensity, len(self.ev)))
        print('\n\033[33mProcessor:\033[36m',cpuinfo.get_cpu_info()['brand_raw'])
        print('\033[33mPhysical CPU cores:\033[36m', psutil.cpu_count(logical=False))
        self.decide_core_num()
        print('\033[0mPlease wait...\n')
        print('\033[32mIf you want to stop the process, wait for 20 seconds and try.\nBut sometimes it may not work.\033[0m')
        print('\nThe following shows the progress bar and the estimation of the processing time')
        angle = self.angle
        self.cx_cut = self.cx
        self.cy_cut = self.cy
        self.cdx_cut = self.cdx
        self.cdy_cut = self.cdy
        x = [self.cx-self.cdx/2, self.cx+self.cdx/2]
        z = [self.cy-self.cdy/2, self.cy+self.cdy/2]
        ty = self.ev
        self.data_cut = np.zeros((len(ty), self.cdensity), dtype=np.float32)
        self.data_cube = np.zeros((len(ty), self.cdensity, self.cdensity), dtype=np.float32)
        phi_offset = self.phi_offset
        r1_offset = self.r1_offset
        phi1_offset = self.phi1_offset
        r11_offset = self.r11_offset
        self.slim_cut = self.slim.copy()
        self.sym_cut = self.sym
        self_x = self.ox[self.slim[0]:self.slim[1]+1]   # -----stable version no multiprocessing-----
        self_volume = self.ovolume[:, self.slim[0]:self.slim[1]+1, :]   # -----stable version no multiprocessing-----
        if self.cdx<=self.cdy:  # cut along ky
            
            # -----stable version no multiprocessing-----
            # for i in range(len(y)):
            #     surface = self.slice_data(i, angle, phi_offset, r1_offset, self_x, self_volume)
            #     td = surface[int(self.cdensity/(self.xmax-self.xmin)*(min(z)-self.xmin)):int(self.cdensity/(self.xmax-self.xmin)*(max(z)-self.xmin)), int(self.cdensity/(self.ymax-self.ymin)*(min(x)-self.ymin)):int(self.cdensity/(self.ymax-self.ymin)*(max(x)-self.ymin))]
            #     del surface
            #     td = cv2.resize(td, (td.shape[0], self.cdensity), interpolation=cv2.INTER_CUBIC)
            #     data[i,:] = td.mean(axis=1)
            #     del td
            #     gc.collect()
            # -----stable version no multiprocessing-----
            
            self.t = threading.Thread(target=self.t_cut_job_x, daemon=True)
            self.t.start()
        else:   # cut along kx
            self.t = threading.Thread(target=self.t_cut_job_y, daemon=True)
            self.t.start()
        time.sleep(20)
        print("\n\033[32m-----Press \033[31m'Enter' \033[32mto terminate the pool-----\033[0m\n")
        t1.join()
        self.t.join()
        print('Proccess finished\nWait a moment...')
        for i in range(len(ty)):
            try:
                self.data_cut[i] = zarr.open_array(os.path.join(cdir, '.MDC_cut', 'cut_temp_save', f'cut_{i}.zarr'))
                self.data_cube[i] = zarr.open_array(os.path.join(cdir, '.MDC_cut', 'cube_temp_save', f'cube_{i}.zarr'))
            except FileNotFoundError:
                pass
        g_cut_plot(self, self.data_cut, self.cx, self.cy, self.cdx, self.cdy, self.cdensity, ty, z, x, angle, phi_offset, r1_offset, phi1_offset, r11_offset, self.stop_event, self.pool, self.path, self.e_photon, self.slim_cut, self.sym_cut, self.xmin, self.xmax, self.ymin, self.ymax, self.data_cube)
        if os.path.exists(os.path.join(cdir, '.MDC_cut', 'cut_temp_save')):
            shutil.rmtree(os.path.join(cdir, '.MDC_cut', 'cut_temp_save'))
        if os.path.exists(os.path.join(cdir, '.MDC_cut', 'cube_temp_save')):
            shutil.rmtree(os.path.join(cdir, '.MDC_cut', 'cube_temp_save'))
        del self.data_cube, self.data_cut
        
    def set_density(self, *args):
        try:
            self.density = int(self.entry_d.get())
            self.update()
        except ValueError:
            print("Invalid input for density value")
            
    def change_mode(self, mode='normal'):
        self.mode = mode
        self.__get_slim()
        self.x = self.ox[self.slim[0]:self.slim[1]+1]
        if self.type == 'real':
            try:
                self.type = 'reciprocal'
                self.phi_offset = 0
                self.r1_offset = -31
                r1 = self.y - self.r1_offset
                phi = self.x - self.phi_offset
                tr1 = np.array([np.min(r1), np.max(r1), np.max(r1), np.min(r1)])
                tphi = np.array([np.min(phi), np.min(phi), np.max(phi), np.max(phi)])
                tx = np.sqrt(2*self.m*self.e*self.ev[self.slice_index])/self.hbar*10**-10*np.sin(tr1/180*np.pi) * np.cos(tphi/180*np.pi)
                ty = np.sqrt(2*self.m*self.e*self.ev[self.slice_index])/self.hbar*10**-10*np.sin(tphi/180*np.pi)
                r = np.max(np.sqrt(tx**2 + ty**2))
                self.xmin, self.xmax = -r, r
                self.ymin, self.ymax = -r, r
                self.txlim, self.tylim = [-r, r], [-r, r]
                self.b_mode.config(text='Reciprocal Mode')
                self.label_phi_offset.config(text="Set Manipulator Phi Offset (deg):")
                self.label_r1_offset.config(text="Set Manipulator R1 Offset (deg):")
                self.frame_entry6.pack(side=tk.TOP, after=self.frame_entry5)
                self.frame_entry7.pack(side=tk.TOP, after=self.frame_entry6)
                self.frame_region.pack(side=tk.TOP)
                self.frame_cut_xy.pack(side=tk.TOP)
                self.set_sym_button.pack(side=tk.LEFT, after=self.set_window_button)
                if mode == 'normal':
                    self.cut_xy(init=True)   # init cut params
                    self.update_window()
                self.g.update()
                w = self.g.winfo_reqwidth()
                h = self.g.winfo_reqheight()
                tx = t_sc_w if self.g.winfo_x()+self.g.winfo_width()/2 > t_sc_w else 0
                self.g.geometry(f'{w}x{h}+{tx}+{sc_y}')
                self.g.update()
            except:
                self.type = 'real'
                if self.z is not None:
                    self.xmin = np.min(np.min(self.x)+np.min(self.z))
                    self.xmax = np.max(np.max(self.x)+np.max(self.z))
                else:
                    self.xmin = np.min(self.x)
                    self.xmax = np.max(self.x)
                self.ymin = np.min(self.y)
                self.ymax = np.max(self.y)
                self.phi_offset = 48
                self.r1_offset = 11.5
                if self.xmin+self.xmax > 2*self.phi_offset:
                    self.xmin = self.phi_offset-(self.xmax-self.phi_offset)
                if self.xmax+self.xmin < 2*self.phi_offset:
                    self.xmax = self.phi_offset-(self.xmin-self.phi_offset)
                if self.ymin+self.ymax > 2*self.r1_offset:
                    self.ymin = self.r1_offset-(self.ymax-self.r1_offset)
                if self.ymax+self.ymin < 2*self.r1_offset:
                    self.ymax = self.r1_offset-(self.ymin-self.r1_offset)
                self.ax.set_xlabel('x (mm)', fontsize=size(20))
                self.ax.set_ylabel('z (mm)', fontsize=size(20))
                self.b_mode.config(text='Transmission Mode')
                self.label_phi_offset.config(text="Set Z Offset (mm):")
                self.label_r1_offset.config(text="Set X Offset (mm):")
                self.frame_entry6.pack_forget()
                self.frame_entry7.pack_forget()
                
        elif self.type == 'reciprocal':
            try:
                self.type = 'real'
                if self.z is not None:
                    self.xmin = np.min(np.min(self.x)+np.min(self.z))
                    self.xmax = np.max(np.max(self.x)+np.max(self.z))
                else:
                    self.xmin = np.min(self.x)
                    self.xmax = np.max(self.x)
                self.ymin = np.min(self.y)
                self.ymax = np.max(self.y)
                self.phi_offset = 48
                self.r1_offset = 11.5
                if self.xmin+self.xmax > 2*self.phi_offset:
                    self.xmin = self.phi_offset-(self.xmax-self.phi_offset)
                if self.xmax+self.xmin < 2*self.phi_offset:
                    self.xmax = self.phi_offset-(self.xmin-self.phi_offset)
                if self.ymin+self.ymax > 2*self.r1_offset:
                    self.ymin = self.r1_offset-(self.ymax-self.r1_offset)
                if self.ymax+self.ymin < 2*self.r1_offset:
                    self.ymax = self.r1_offset-(self.ymin-self.r1_offset)
                self.b_mode.config(text='Transmission Mode')
                self.label_phi_offset.config(text="Set Z Offset (mm):")
                self.label_r1_offset.config(text="Set X Offset (mm):")
                self.frame_entry6.pack_forget()
                self.frame_entry7.pack_forget()
                self.frame_cut_xy.pack_forget()
                self.frame_region.pack_forget()
                self.set_sym_button.pack_forget()
                if mode == 'normal':
                    self.update_window()
            except:
                self.type = 'reciprocal'
                self.phi_offset = 0
                self.r1_offset = -31
                r1 = self.y - self.r1_offset
                phi = self.x - self.phi_offset
                tr1 = np.array([np.min(r1), np.max(r1), np.max(r1), np.min(r1)])
                tphi = np.array([np.min(phi), np.min(phi), np.max(phi), np.max(phi)])
                tx = np.sqrt(2*self.m*self.e*self.ev[self.slice_index])/self.hbar*10**-10*np.sin(tr1/180*np.pi) * np.cos(tphi/180*np.pi)
                ty = np.sqrt(2*self.m*self.e*self.ev[self.slice_index])/self.hbar*10**-10*np.sin(tphi/180*np.pi)
                r = np.max(np.sqrt(tx**2 + ty**2))
                self.xmin, self.xmax = -r, r
                self.ymin, self.ymax = -r, r
                self.txlim, self.tylim = [-r, r], [-r, r]
                self.ax.set_xlabel(r'$k_x$ ($\frac{2\pi}{\AA}$)', fontsize=size(20))
                self.ax.set_ylabel(r'$k_y$ ($\frac{2\pi}{\AA}$)', fontsize=size(20))
                self.b_mode.config(text='Reciprocal Mode')
                self.label_phi_offset.config(text="Set Manipulator Phi Offset (deg):")
                self.label_r1_offset.config(text="Set Manipulator R1 Offset (deg):")
                self.frame_entry6.pack(side=tk.TOP, after=self.frame_entry5)
                self.frame_entry7.pack(side=tk.TOP, after=self.frame_entry6)
                self.frame_region.pack(side=tk.TOP)
                self.frame_cut_xy.pack(side=tk.TOP)
                self.set_sym_button.pack(side=tk.LEFT, after=self.set_window_button)
    
    def __get_slim(self):
        min_val = int(float(self.entry_min.get()))
        max_val = int(float(self.entry_max.get()))
        self.slim = sorted([min_val, max_val])
        if self.slim[0] < 0:
            self.slim[0] = 0
        if self.slim[1] > 493:
            self.slim[1] = 493
        set_entry_value(self.entry_min, str(self.slim[0]))
        set_entry_value(self.entry_max, str(self.slim[1]))
        
    def set_slim(self, *args):
        self.sym = 1
        try:
            self.__get_slim()
            self.x, self.volume = [], []
            self.slice_index = np.argwhere(np.abs(self.ev-self.slider.val)<(self.ev[1]-self.ev[0])/2)[0][0]
            self.wait = wait(self.g)
            self.interpolate_slice(self.slice_index)
            self.disp_region()
            rotated_volume = rotate(self.surface, -self.angle, self.surface.shape)
            self.ax.clear()
            self.hl, = self.ax.plot([0, 0], [0, 0], color='green', linestyle='--')
            self.vl, = self.ax.plot([0, 0], [0, 0], color='green', linestyle='--')
            self.hl.set_data([],[])
            self.vl.set_data([],[])
            if __name__ == '__main__':
                self.img = self.ax.imshow(rotated_volume, cmap=value3.get(), extent=[self.ymin, self.ymax, self.xmin, self.xmax], origin='lower')
            else:
                self.img = self.ax.imshow(rotated_volume, cmap=self.cmap, extent=[self.ymin, self.ymax, self.xmin, self.xmax], origin='lower')
            self.fig.canvas.draw_idle()
            self.wait.done()
            # setting entry
            self.entry_xmin.config(state='normal')
            self.entry_xmax.config(state='normal')
            self.entry_ymin.config(state='normal')
            self.entry_ymax.config(state='normal')
            if self.type == 'real':
                set_entry_value(self.entry_xmin, str(self.ymin))
                set_entry_value(self.entry_xmax, str(self.ymax))
                set_entry_value(self.entry_ymin, str(self.xmin))
                set_entry_value(self.entry_ymax, str(self.xmax))
                self.ax.set_xlabel('x (mm)', fontsize=size(20))
                self.ax.set_ylabel('z (mm)', fontsize=size(20))
                self.entry_xmin.config(state='disabled')
                self.entry_xmax.config(state='disabled')
                self.entry_ymin.config(state='disabled')
                self.entry_ymax.config(state='disabled')
            elif self.type == 'reciprocal':
                self.cut_l, = self.ax.plot([0, 0], [0, 0], color='red', linestyle='-')
                self.cut_l.set_data([], [])
                set_entry_value(self.entry_xmin, str(self.ymin))
                set_entry_value(self.entry_xmax, str(self.ymax))
                set_entry_value(self.entry_ymin, str(self.xmin))
                set_entry_value(self.entry_ymax, str(self.xmax))
                self.ax.set_xlabel(r'$k_x$ ($\frac{2\pi}{\AA}$)', fontsize=size(20))
                self.ax.set_ylabel(r'$k_y$ ($\frac{2\pi}{\AA}$)', fontsize=size(20))
            copy_to_clipboard(self.fig)
        except ValueError:
            self.wait.done()
            print("Invalid input for slim values")
        except Exception as e:
            self.wait.done()
            print(f"An error occurred: {e}\nVolumeSlicer: set_slim()")

    def update_window(self):
        try:
            self.entry_xmin.config(state='normal')
            self.entry_xmax.config(state='normal')
            self.entry_ymin.config(state='normal')
            self.entry_ymax.config(state='normal')
            if self.type == 'real':
                set_entry_value(self.entry_xmin, str(self.ymin))
                set_entry_value(self.entry_xmax, str(self.ymax))
                set_entry_value(self.entry_ymin, str(self.xmin))
                set_entry_value(self.entry_ymax, str(self.xmax))
            elif self.type == 'reciprocal':
                set_entry_value(self.entry_xmin, str(self.tylim[0]))
                set_entry_value(self.entry_xmax, str(self.tylim[1]))
                set_entry_value(self.entry_ymin, str(self.txlim[0]))
                set_entry_value(self.entry_ymax, str(self.txlim[1]))
            set_entry_value(self.entry_phi_offset, str(self.phi_offset))
            set_entry_value(self.entry_r1_offset, str(self.r1_offset))
            self.x, self.volume = [], []
            self.wait = wait(self.g)
            self.interpolate_slice(self.slice_index)
            self.disp_region()
            rotated_volume = rotate(self.surface, -self.angle, self.surface.shape)
            self.ax.clear()
            if __name__ == '__main__':
                self.img = self.ax.imshow(rotated_volume, cmap=value3.get(), extent=[self.ymin, self.ymax, self.xmin, self.xmax], origin='lower')
            else:
                self.img = self.ax.imshow(rotated_volume, cmap=self.cmap, extent=[self.ymin, self.ymax, self.xmin, self.xmax], origin='lower')
            self.hl, = self.ax.plot([0, 0], [0, 0], color='green', linestyle='--')
            self.vl, = self.ax.plot([0, 0], [0, 0], color='green', linestyle='--')
            self.hl.set_data([],[])
            self.vl.set_data([],[])
            if self.type == 'reciprocal':
                self.cut_l, = self.ax.plot([0, 0], [0, 0], color='red', linestyle='-')
                self.cut_l.set_data([], [])
                self.ax.set_xlim([self.tylim[0], self.tylim[1]])
                self.ax.set_ylim([self.txlim[0], self.txlim[1]])
                self.ax.set_xlabel(r'$k_x$ ($\frac{2\pi}{\AA}$)', fontsize=size(20))
                self.ax.set_ylabel(r'$k_y$ ($\frac{2\pi}{\AA}$)', fontsize=size(20))
            elif self.type == 'real':
                self.ax.set_xlim([self.ymin, self.ymax])
                self.ax.set_ylim([self.xmin, self.xmax])
                self.ax.set_xlabel('x (mm)', fontsize=size(20))
                self.ax.set_ylabel('z (mm)', fontsize=size(20))
            copy_to_clipboard(self.fig)
            self.canvas.draw()
            self.wait.done()
            if self.type == 'real':
                self.entry_xmin.config(state='disabled')
                self.entry_xmax.config(state='disabled')
                self.entry_ymin.config(state='disabled')
                self.entry_ymax.config(state='disabled')
        except ValueError:
            self.wait.done()
            print("Range is not compatible with the current mode.")
        except Exception as e:
            self.wait.done()
            print(f"An error occurred: {e}\nVolumeSlicer: update_window()")
        
    def set_window(self):
        try:
            if self.type == 'reciprocal':
                self.txlim = sorted([float(self.entry_ymin.get()), float(self.entry_ymax.get())])
                self.tylim = sorted([float(self.entry_xmin.get()), float(self.entry_xmax.get())])
                self.update_window()
        except ValueError:
            print("Invalid input for window range values")
    
    def interpolate_slice(self, i):
        # self.xmin, self.xmax range should be larger than txlim, tylim in combine, and so as y
        try:
            self.phi_offset = float(self.entry_phi_offset.get())
            self.r1_offset = float(self.entry_r1_offset.get())
            self.phi1_offset = float(self.entry_phi1_offset.get())
            self.r11_offset = float(self.entry_r11_offset.get())
        except:pass
        self.x = self.ox[self.slim[0]:self.slim[1]+1]
        self.volume = self.ovolume[:, self.slim[0]:self.slim[1]+1, :]
        def filter(ind, i, r2=None):    #test the filtering process in slice_data function
            r1 = np.linspace(min(self.y[ind]), max(self.y[ind]), len(self.y[ind]))[:, None]
            phi = np.linspace(min(self.x), max(self.x), len(self.x))[None, :]
            r1, phi = np.broadcast_arrays(r1, phi)
            if r2 is None:
                r1_offset, phi_offset = self.cal_r1_phi_offset()
                r1, phi = self.rot(r1, phi, r1_offset, phi_offset, self.angle)
            else:
                r1_offset, phi_offset = self.cal_r1_phi_offset(r2)
                r1, phi = self.rot(r1, phi, r1_offset, phi_offset, self.angle-(r2-self.z[0]))
            x = np.sqrt(2*self.m*self.e*self.ev[i])/self.hbar*10**-10*np.sin(r1/180*np.pi) * np.cos(phi/180*np.pi)  # x: r1, y: phi, at r2=0
            y = np.sqrt(2*self.m*self.e*self.ev[i])/self.hbar*10**-10*np.sin(phi/180*np.pi)
            ti=[]
            for i in range(r1.shape[1]):
                if any(-0.1<x[:,i]) and any(-0.2<y[:,i]) and any(x[:,i]<0.1) and any(y[:,i]<0.2):
                    ti.append(i)
            if len(ti) != 0:
                if min(ti)>0:
                    ti.insert(0, min(ti)-1)
                if max(ti)<len(self.y[ind])-1:
                    ti.append(max(ti)+1)
            return ind[ti]
        if self.type == 'real':
            if self.z is not None:
                self.xmin = np.min(np.min(self.x)+np.min(self.z))
                self.xmax = np.max(np.max(self.x)+np.max(self.z))
            else:
                self.xmin = np.min(self.x)
                self.xmax = np.max(self.x)
            self.ymin = np.min(self.y)
            self.ymax = np.max(self.y)
            if self.xmin+self.xmax > 2*self.phi_offset:
                self.xmin = self.phi_offset-(self.xmax-self.phi_offset)
            elif self.xmax+self.xmin < 2*self.phi_offset:
                self.xmax = self.phi_offset-(self.xmin-self.phi_offset)
            if self.ymin+self.ymax > 2*self.r1_offset:
                self.ymin = self.r1_offset-(self.ymax-self.r1_offset)
            elif self.ymax+self.ymin < 2*self.r1_offset:
                self.ymax = self.r1_offset-(self.ymin-self.r1_offset)
            r = (((self.xmax-self.xmin)/2)**2+((self.ymax-self.ymin)/2)**2)**0.5
            self.xmin, self.xmax = self.phi_offset-r, self.phi_offset+r
            self.ymin, self.ymax = self.r1_offset-r, self.r1_offset+r
        elif self.type == 'reciprocal':
            r1_offset, phi_offset = self.cal_r1_phi_offset()
            r1 = self.y - r1_offset
            phi = self.x - phi_offset
            tr1 = np.array([np.min(r1), np.max(r1), np.max(r1), np.min(r1)])
            tphi = np.array([np.min(phi), np.min(phi), np.max(phi), np.max(phi)])
            tx = np.sqrt(2*self.m*self.e*self.ev[i])/self.hbar*10**-10*np.sin(tr1/180*np.pi) * np.cos(tphi/180*np.pi)
            ty = np.sqrt(2*self.m*self.e*self.ev[i])/self.hbar*10**-10*np.sin(tphi/180*np.pi)
            # tx = np.sqrt(2*self.m*self.e*self.e_photon)/self.hbar*10**-10*np.sin(tr1/180*np.pi) * np.cos(tphi/180*np.pi)
            # ty = np.sqrt(2*self.m*self.e*self.e_photon)/self.hbar*10**-10*np.sin(tphi/180*np.pi)
            r = np.max(np.sqrt(tx**2 + ty**2))
            self.xmin, self.xmax = -r, r
            self.ymin, self.ymax = -r, r
            
        if self.z is None: # for 1 cube
            if self.type == 'real':
                self.surface = self.combine(self.volume[:, :, i], xlim = [min(self.y), max(self.y)], ylim = [min(self.x), max(self.x)])
            elif self.type == 'reciprocal':
                r1_offset, phi_offset = self.cal_r1_phi_offset()
                self.surface = self.combine(self.volume[:, :, i], xlim = [min(self.y)-r1_offset, max(self.y)-r1_offset], ylim = [min(self.x)-phi_offset, max(self.x)-phi_offset], ev=self.ev[i])
        elif self.z is not None: # for multiple cubes
            img = self.volume[:, :, i]
            try:
                self.tmin = np.min(img[img>0])
                r2 = sorted(set(self.z))
                self.surface = np.full((self.density, self.density), np.nan, dtype=np.float32)
                if self.type == 'real':
                    tt=0
                    for z in r2:
                        t1=time.time()
                        ind = np.array(np.argwhere(self.z==z), dtype=np.int64).flatten()
                        self.surface = np.nanmean([self.surface, self.combine(data = self.volume[ind, :, i], xlim = [min(self.y[ind]), max(self.y[ind])], ylim = [min(self.x)+z, max(self.x)+z])], axis=0)
                        if self.fl_show:
                            tt+=1
                            self.wait.text(f'R2 = {z}: {time.time()-t1:.3f}s ({tt}/{len(r2)})')
                    self.surface = np.nan_to_num(self.surface)
                elif self.type == 'reciprocal':
                    tt=0
                    for z in r2:
                        t1=time.time()
                        ind = np.array(np.argwhere(self.z==z), dtype=np.int64).flatten()
                        # ind = filter(ind, i, r2=z)
                        # if len(ind) != 0:
                        r1_offset, phi_offset = self.cal_r1_phi_offset(r2=z)
                        self.surface = np.nanmean([self.surface, self.combine(self.volume[ind, :, i], xlim = [min(self.y[ind])-r1_offset, max(self.y[ind])-r1_offset], ylim = [min(self.x)-phi_offset, max(self.x)-phi_offset], r2=z, ev=self.ev[i])], axis=0)
                        if self.fl_show:
                            tt+=1
                            self.wait.text(f'R2 = {z}: {time.time()-t1:.3f}s ({tt}/{len(r2)})')
                    self.surface = np.nan_to_num(self.surface)
            except:
                self.surface = np.zeros((self.density, self.density), dtype=np.float32)
        return self.surface
        
    def update(self, *args):
        self.hl.set_data([],[])
        self.vl.set_data([],[])
        self.slice_index = np.argwhere(np.abs(self.ev-self.slider.val)<(self.ev[1]-self.ev[0])/2)[0][0]
        self.wait = wait(self.g)
        self.interpolate_slice(self.slice_index)
        rotated_volume = rotate(self.surface, -self.angle, self.surface.shape)
        self.img.set_data(rotated_volume)
        copy_to_clipboard(self.fig)
        self.canvas.draw()
        self.wait.done()

    def set_sl(self, *args):
        try:
            self.text_e.set(f'%.3f'%self.slider.val)
            # self.set_slim()
        except Exception as e:
            print(f"error: {e}\nVolumeSlicer: set_sl()")

    def set_tx(self, *args):
        try:
            self.slider.set_val(np.float64(self.text_e.get()))
            # self.set_slim()
        except Exception as e:
            print(f"error: {e}\nVolumeSlicer: set_tx()")
        
    def set_angle_sl(self, *args):
        try:
            self.angle = np.float64(self.angle_slider.val)
            self.text_a.set(f'%.3f'%self.angle)
            self.rotate_image()
        except ValueError:
            print("Invalid input for angle value")
    
    def set_angle_tx(self, *args):
        try:
            self.angle = np.float64(self.text_a.get())
            self.angle_slider.set_val(self.angle)
            self.rotate_image()
        except ValueError:
            print("Invalid input for angle value")
        
    def rotate_image(self):
        if self.mode == 'normal':
            self.disp_region()
            if self.type == 'real':
                self.hl.set_data([self.r1_offset, self.r1_offset], [self.xmin, self.xmax])
                self.vl.set_data([self.ymin, self.ymax], [self.phi_offset, self.phi_offset])
            elif self.type == 'reciprocal':
                self.hl.set_data([0, 0], [self.xmin, self.xmax])
                self.vl.set_data([self.ymin, self.ymax], [0, 0])
            rotated_volume = rotate(self.surface, -self.angle, self.surface.shape)
            self.img.set_data(rotated_volume)
            self.canvas.draw()

    def rot(self, x, y, r1_offset=0, phi_offset=0, angle=0):
        '''
        rotate the image with the given angle under the offset
        '''
        angle = np.deg2rad(angle)
        x = x - r1_offset   # ndimage.shift in the process
        y = y - phi_offset
        x_rot = x * np.cos(angle) - y * np.sin(angle)   # ndimage.rotate in the process
        y_rot = x * np.sin(angle) + y * np.cos(angle)
        return x_rot, y_rot


    
    def pr_disp_region(self):
        c = ['black', 'blue', 'green', 'magenta', 'purple', 'orange', 'pink', 'cyan', 'brown', 'gray', 'gold', 'lime', 'navy', 'teal', 'coral', 'salmon', 'yellow']
        self.reg_l1 = []
        self.reg_l2 = []
        if self.z is None:
            self.reg_l1.append(self.ax_region.plot([], [], color=c[0%len(c)], linewidth=scale*0.5))
            self.reg_l2.append(self.ax_region.plot([], [], color=c[0%len(c)], linewidth=scale*0.5))
        else:
            for i in range(len(set(self.z))):
                self.reg_l1.append(self.ax_region.plot([], [], color=c[i%len(c)], linewidth=scale*0.5))
                self.reg_l2.append(self.ax_region.plot([], [], color=c[i%len(c)], linewidth=scale*0.5))
    
    def disp_region(self):
        if self.type == 'reciprocal':
            tr1 = [0, 0]
            tphi = [0, 0]
            if self.z is None:
                r1 = self.y[:, None]
                phi = np.linspace(min(self.x), max(self.x), int(max(self.x)-min(self.x)))[None, :]
                r1, phi = np.broadcast_arrays(r1, phi)
                r1_offset, phi_offset = self.cal_r1_phi_offset()
                r1, phi = self.rot(r1, phi, r1_offset, phi_offset, self.angle)
                r1, phi, r1_, phi_ = mesh(r1, phi)
                self.reg_l1[0][0].set_data(r1, phi)
                self.reg_l2[0][0].set_data(r1_, phi_)
                if np.min(r1)<tr1[0]:
                    tr1[0] = np.min(r1)
                if np.max(r1)>tr1[1]:
                    tr1[1] = np.max(r1)
                if np.min(phi)<tphi[0]:
                    tphi[0] = np.min(phi)
                if np.max(phi)>tphi[1]:
                    tphi[1] = np.max(phi)
            else:
                r2 = sorted(set(self.z))
                for i, z in enumerate(r2):
                    ind = np.array(np.argwhere(self.z==z), dtype=np.int64).flatten()
                    if len(self.y[ind]) > 1:
                        r1 = self.y[ind][:, None]
                    else:
                        r1 = np.linspace(self.y[ind]-0.25, self.y[ind]+0.25, 2)[:, None]
                    phi = np.linspace(min(self.x), max(self.x), int(max(self.x)-min(self.x)))[None, :]
                    r1, phi = np.broadcast_arrays(r1, phi)
                    r1_offset, phi_offset = self.cal_r1_phi_offset(z)
                    r1, phi = self.rot(r1, phi, r1_offset, phi_offset, self.angle-(z-r2[0]))
                    r1, phi, r1_, phi_ = mesh(r1, phi)
                    self.reg_l1[i][0].set_data(r1, phi)
                    self.reg_l2[i][0].set_data(r1_, phi_)
                    if np.min(r1)<tr1[0]:
                        tr1[0] = np.min(r1)
                    if np.max(r1)>tr1[1]:
                        tr1[1] = np.max(r1)
                    if np.min(phi)<tphi[0]:
                        tphi[0] = np.min(phi)
                    if np.max(phi)>tphi[1]:
                        tphi[1] = np.max(phi)
            self.ax_region.set_aspect('equal')
            txlim, tylim = tr1, tphi
            txlim = -np.max([np.abs(txlim), np.abs(tylim)]), np.max([np.abs(txlim), np.abs(tylim)])
            tylim = txlim
            self.ax_region.set_xlim(txlim)
            self.ax_region.set_ylim(tylim)
            self.ax_region.set_xlabel(r'$R1$ (deg)', fontsize=size(20))
            self.ax_region.set_ylabel(r'$Phi$ (deg)', fontsize=size(20))
            self.canvas_region.draw()

    def combine(self, data, xlim, ylim, r2=None, ev=None, step=0.25):  # complete
        '''
        Args:
        ---
        data: raw image (shape:(len(r1), len(phi)))
        xlim: [min, max]  x: r1
        ylim: [min, max]  y: phi
        step: width for only one r1 cube (default: 0.25 degree/mm)
        
        return:
        ---
            image
            shape: (density, density)
        '''
        xlim, ylim = sorted(xlim), sorted(ylim)
        fr2 = True
        if self.type == 'real':
            if int(self.density/(self.ymax-self.ymin)*(xlim[1]-xlim[0])) ==0:
                xlim[1] += step
                xlim[0] -= step
            base = np.zeros((self.density, self.density), dtype=np.float32)
            data = cv2.resize(data, (int(self.density/(self.ymax-self.ymin)*(ylim[1]-ylim[0])), int(self.density/(self.xmax-self.xmin)*(xlim[1]-xlim[0]))), interpolation=cv2.INTER_CUBIC)
            base[0:data.shape[0], 0:data.shape[1]] = data
            data = np.roll(base.T, (int((ylim[0]-self.xmin)/(self.xmax-self.xmin)*self.density), int((xlim[0]-self.ymin)/(self.ymax-self.ymin)*self.density)), axis=(0, 1))
            data = data
        elif self.type == 'reciprocal':
            if r2 is None:
                fr2=False
                r2, self.z = 0, [0, 0]
            if int(self.density/180*(xlim[1]-xlim[0])) ==0: # at least 1 pixel
                d = 1/self.density*180/2
                c = (xlim[0]+xlim[1])/2
                xlim = [float(c-d), float(c+d)]
                print(f'Warning: R1-axis density is too low (R2=%.2f)'%r2)
                tk.messagebox.showwarning("Warning",f'Warning: R1-axis density is too low (R2=%.2f)'%r2)
                self.focus_set()
            base = np.zeros((self.density, self.density), dtype=np.float32)
            r1 = np.linspace(xlim[0], xlim[1], int(self.density/180*(xlim[1]-xlim[0]))*4)
            phi = np.linspace(ylim[0], ylim[1], int(self.density/180*(ylim[1]-ylim[0]))*4)
            # r1, phi = np.broadcast_arrays(r1, phi)
            x = np.sqrt(2*self.m*self.e*ev)/self.hbar*10**-10*np.sin(r1[:, None]/180*np.pi) * np.cos(phi[None, :]/180*np.pi)  # x: r1, y: phi, at r2=0
            y = np.sqrt(2*self.m*self.e*ev)/self.hbar*10**-10*np.sin(phi[None, :]/180*np.pi)
            txlim, tylim = [np.min(x), np.max(x)], [np.min(y), np.max(y)]
            ####### new method start
            # t=time.time()
            data = self.k_map(data, self.density, xlim, ylim, txlim, tylim, ev)
            ####################### new method end
            
            ####################### original plot start
            # tmax = np.max(data)
            # fig, ax = plt.subplots(dpi=150)
            # fig.patch.set_facecolor('black')
            # ax.set_facecolor('black')
            # data = cv2.resize(data, (int(self.density/180*(ylim[1]-ylim[0]))*4, int(self.density/180*(xlim[1]-xlim[0]))*4), interpolation=cv2.INTER_CUBIC)
            # ax.pcolormesh(x, y, data.T, cmap='gray')    # compatible with r2=0, phi: yaxis, r1: xaxis in transmission mode
            # ax.set_position([0, 0, 1, 1])
            # ax.axis('off')
            # fig.canvas.draw()
            # image_from_plot = np.frombuffer(fig.canvas.tostring_rgb(), dtype=np.uint8)
            # image_from_plot = image_from_plot.reshape(fig.canvas.get_width_height()[::-1] + (3,))
            # plt.close()
            # del fig, ax
            # image_gray = cv2.cvtColor(image_from_plot, cv2.COLOR_RGB2GRAY)/255*tmax
            # image_gray = cv2.resize(image_gray[::-1,:], (data.shape[1],data.shape[0]), interpolation=cv2.INTER_CUBIC)
            # data = cv2.resize(image_gray, (int(self.density/(self.xmax-self.xmin)*(txlim[1]-txlim[0])), int(self.density/(self.ymax-self.ymin)*(tylim[1]-tylim[0]))), interpolation=cv2.INTER_CUBIC)
            ########################### original plot end
            # print('1, resize+draw:', time.time()-t)
            # t = time.time()
            # print('2, resize*2:', time.time()-t)
            # t = time.time()
            base[0:data.shape[0], 0:data.shape[1]] = data
            # del data, image_gray, image_from_plot
            del data
            data = np.roll(base, (int((tylim[0]-self.ymin)/(self.ymax-self.ymin)*self.density), int((txlim[0]-self.xmin)/(self.xmax-self.xmin)*self.density)), axis=(0, 1))
            # print('3, shift:', time.time()-t)
            # data = data[::-1, :]
            del base
            gc.collect()
            # t = time.time()
            data = rotate(data, r2-self.z[0], data.shape)
            # print('4, rotate:', time.time()-t)
            if not fr2:
                self.z = None
        if self.z is not None and fr2==True:  # for multiple cubes need np.nanmean
            msk = data<self.tmin-self.tmin/3
            data[msk] = np.nan
            
        return data

    # def cal_xz
    
    def show(self):
        self.pack(side=tk.TOP, fill=tk.BOTH, expand=1)

class CEC(loadfiles):
    def __init__(self, g, files, mode='normal'):
        super().__init__(files)
        if self.sort == 'r1r2':
            r2 = []
            for i in self.r2:
                for j in i:
                    r2.append(j)
            self.r2 = r2
        
        self.mode = mode
        self.g = g
        self.tlg = tk.Toplevel(g, bg='white')
        self.tlg.title('Constant Energy Cut')
        self.frame1 = tk.Frame(self.tlg, bg='white')
        self.frame1.grid(row=0, column=1)
        self.__check_re()
        if __name__ != '__main__':
            global hwnd
            hwnd = None
    
    def on_closing(self):
        try:
            plt.close()
        except:
            pass
        self.tlg.destroy()
    
    def load(self, angle, cx, cy, cdx, cdy, phi_offset, r1_offset, phi1_offset, r11_offset, slim, sym, name, path):
        vs = self.view
        set_entry_value(vs.entry_min, str(slim[0]))
        set_entry_value(vs.entry_max, str(slim[1]))
        set_entry_value(vs.entry_phi_offset, str(phi_offset))
        set_entry_value(vs.entry_r1_offset, str(r1_offset))
        set_entry_value(vs.entry_phi1_offset, str(phi1_offset))
        set_entry_value(vs.entry_r11_offset, str(r11_offset))
        vs.change_mode(mode=self.mode) # change from 'real' to 'reciprocal' in 'load' mode
        set_entry_value(vs.cut_xy_x_entry, str(cx))
        set_entry_value(vs.cut_xy_y_entry, str(cy))
        set_entry_value(vs.cut_xy_dx_entry, str(cdx))
        set_entry_value(vs.cut_xy_dy_entry, str(cdy))
        vs.angle = angle
        vs.text_a.set(f'%.3f'%angle)
        vs.angle_slider.set_val(angle)
        vs.set_slim()
        vs.gen_sym(sym)
        vs.cut_xy()
        vs.mode = 'normal'
        self.info_name = name
        self.info_path = path
        self.info_angle = angle
        self.info_sym = sym
        self.info_r1_offset = r1_offset
        self.info_phi_offset = phi_offset
        self.info_r11_offset = r11_offset
        self.info_phi1_offset = phi1_offset
        self.info_slim = slim
        self.info_cut_xy_x = cx
        self.info_cut_xy_y = cy
        self.info_cut_xy_dx = cdx
        self.info_cut_xy_dy = cdy
        
    def info(self):
        print('\nData Cube Info:')
        print('\033[32mPath:\033[36m',f'{self.path[0]}')
        for i, v in enumerate(self.path):
            if i > 0:
                print(f'\033[36m      {v}')
        text = self.l1.get("1.0", tk.END).split('\n')[0:-1]
        if ':' in text[0]:
            for i in text:
                print('\033[0m%s=%7s:%s'%(i.split(":")[0].split('=')[0],i.split(":")[0].split('=')[1],i.split(":")[1]))
        else:
            s=''
            for i, v in enumerate(text):
                if i != len(text)-1:
                    s += v.split('=')[1]+', '
                else:
                    s += v.split('=')[1]
            print('\033[0m%s=%s'%(v.split('=')[0], s))
        print('Slices: %d'%len(self.r1))
        print('Data Cube Size: %f MB'%(np.float64(self.size)/1024/1024))
        if self.mode == 'load':
            print(f'\033[32mFile Name: \033[36m{self.info_name}\033[0m')
            print(f'\033[32mFile Path: \033[36m{self.info_path}\033[0m')
            print(f'\033[32mAngle: \033[36m{self.info_angle} degree\033[0m')
            if self.info_sym != 1:
                print(f'\033[32mSymmetry: \033[36m{self.info_sym}-fold\033[0m')
            else:
                print(f'\033[32mSymmetry: \033[36mN/A\033[0m')
            print(f'\033[32mR1 Manipulator Offset: \033[36m{self.info_r1_offset} degree\033[0m')
            print(f'\033[32mPhi Manipulator Offset: \033[36m{self.info_phi_offset} degree\033[0m')
            print(f'\033[32mR11 Manipulator Offset: \033[36m{self.info_r11_offset} degree\033[0m')
            print(f'\033[32mPhi1 Manipulator Offset: \033[36m{self.info_phi1_offset} degree\033[0m')
            print(f'\033[32mSlit Limit: \033[36m{self.info_slim[0]} ~ {self.info_slim[1]}\033[0m')
            print(f'\033[32mkx: \033[36m{self.info_cut_xy_x}\033[0m')
            print(f'\033[32mky: \033[36m{self.info_cut_xy_y}\033[0m')
            print(f'\033[32mkx bin: \033[36m{self.info_cut_xy_dx}\033[0m')
            print(f'\033[32mky bin: \033[36m{self.info_cut_xy_dy}\033[0m')
        if hwnd:
            windll.user32.ShowWindow(hwnd, 9)
            windll.user32.SetForegroundWindow(hwnd)
    
    def __set_data(self, odata=[], density=800, *args):
        if len(odata) > 0:
            # self.tlg.geometry(f'800x600+0+{sc_y}')
            set_center(self.g, self.tlg, 0, 0)
            self.size = 0
            for i in self.path:
                self.size += os.path.getsize(i)
            if self.sort == 'r1':
                odataframe = np.stack([i.to_numpy().transpose() for i in odata], axis=0)
                print('Input Data Shape: '+str(odataframe.shape))   # shape: (r1, phi, ev)
                
                r1 = self.r1
                ev, phi = odata[0].indexes.values()
                e_photon = float(odata[0].attrs['ExcitationEnergy'].removesuffix(' eV'))
                self.view = VolumeSlicer(parent=self.frame1, path=self.path, volume=odataframe, cmap='viridis', x=phi, y=r1, ev=ev, e_photon=e_photon, density=density, g=self.tlg)
            elif self.sort == 'r1r2':
                r1 = self.r1
                r2 = self.r2
                odataframe = np.stack([i.to_numpy().transpose() for i in odata], axis=0)
                print('Input Data Shape: '+str(odataframe.shape))
                
                ev, phi = odata[0].indexes.values()
                e_photon = float(odata[0].attrs['ExcitationEnergy'].removesuffix(' eV'))
                self.view = VolumeSlicer(parent=self.frame1, path=self.path, volume=odataframe, cmap='viridis', x=phi, y=r1, z=r2, ev=ev, e_photon=e_photon, density=density, g=self.tlg)
                
            self.tlg.bind('<Return>', self.view.set_slim)
            if self.mode == 'normal':
                self.view.set_slim()
            self.view.show()
            self.tlg.update()
            w = self.tlg.winfo_reqwidth()
            h = self.tlg.winfo_reqheight()
            t_sc_w = windll.user32.GetSystemMetrics(0)
            tx = int(t_sc_w*windll.shcore.GetScaleFactorForDevice(0)/100) if self.tlg.winfo_x()+self.tlg.winfo_width()/2 > t_sc_w else 0
            self.tlg.geometry(f'{w}x{h}+{tx}+{sc_y}')
            self.tlg.protocol("WM_DELETE_WINDOW", self.on_closing)
            self.tlg.update()

    def __rlist(self):
        self.frame0 = tk.Frame(self.tlg, bg='white')
        self.frame0.grid(row=0, column=0)
        tk.Button(self.frame0, text='Info', width=6, height=2, font=('Arial', size(18), 'bold'), bg='white', bd=5, command=self.info).pack(side=tk.TOP, padx=2)
        self.l1 = tk.Text(self.frame0, wrap='none', width=30, height=9, font=('Arial', size(12), 'bold'), bg='white', bd=5)
        self.l1.pack(side=tk.TOP)
        
        if self.sort == 'r1r2':
            r2 = sorted(set(self.r2))
            t = 0
            s=''
            ls=0
            tt = False
            for i,v in enumerate(self.r2):
                if i<len(self.r2)-1:
                    if self.r2[i+1] == r2[t]:   # current r2 is same as next r2
                        if not tt:
                            s+=self.r2s[2]+'='+str(r2[t])+': '
                            tt = True
                        s+=str(self.r1[i])+', '
                        if i+1 == len(self.r2)-1:   # next r2 is the last r2
                            s+=str(self.r1[i+1])
                            if len(s)>ls:
                                ls=len(s)
                            self.l1.insert(tk.END, s)
                            s=''
                            tt = False
                    else:   # current r2 is different from next r2
                        if i+1 == len(self.r2)-1:   # next r2 is the last r2
                            s.removesuffix(', ')
                            s+=self.r2s[2]+'='+str(r2[t])+': '+str(self.r1[i])+'\n'
                            s+=self.r2s[2]+'='+str(r2[t+1])+': '+str(self.r1[i+1])
                        else:   # not last r2
                            if not tt:
                                s+=self.r2s[2]+'='+str(r2[t])+': '
                            s+=str(self.r1[i])+'\n'
                        if len(s)>ls:
                            ls=len(s)
                        self.l1.insert(tk.END, s)
                        s=''
                        tt = False
                        t+=1
        else:
            ls=0
            for i,v in enumerate(self.r1):
                if len(self.r1s[2]+'='+str(v))>ls:
                    ls=len(self.r1s[2]+'='+str(v))
                if i != len(self.r1)-1:
                    self.l1.insert(tk.END, self.r1s[2]+'='+str(v)+'\n')
                else:
                    self.l1.insert(tk.END, self.r1s[2]+'='+str(v))
            self.l1.config(width=ls)
    
    def __check(self, *args, f=False):
        name = self.lb.name
        t = self.preserve
        for i, v in enumerate(self.name):
            if v in name:
                t[i] = True
        self.preserve = t
        if self.sort == 'r1r2':
            r1 = []
            r2 = []
            for i, v in enumerate(self.r2):
                if self.preserve[i]:
                    r1.append(self.r1[i])
                    r2.append(v)
            self.r1 = r1
            self.r2 = r2
        elif self.sort == 'r1':
            r1 = []
            for i, v in enumerate(self.r1):
                if self.preserve[i]:
                    r1.append(v)
            self.r1 = r1
        
        if f==False:
            path = []
            name = []
            data = []
            for i, v in enumerate(self.preserve):
                if v:
                    path.append(self.path[i])
                    name.append(self.name[i])
                    data.append(self.data[i])
            self.path = path
            self.name = name
            self.data = data
        if f==False:
            self.gg.destroy()
        self.__prework()
        self.tlg.focus_set()
        
    def __check_file(self):
        self.gg = RestrictedToplevel(self.g, bg='white')
        self.gg.protocol("WM_DELETE_WINDOW", self.__check)
        self.gg.title('File Check')
        text = 'Same File Name Exists\nSelect the file you want to preserve'
        tk.Label(self.gg, text=text, width=len(text), height=2, font=('Arial', size(14), "bold"), bg='white', bd=5).grid(row=0, column=0)
        frame1 = tk.Frame(self.gg, bg='white')
        frame1.grid(row=1, column=0)
        name = [i.split('#id#')[0] for i in self.name]
        tname = [i for i in name]
        self.preserve = []
        for i in self.name:
            if '#id#' in i:
                self.preserve.append(False)
            else:
                self.preserve.append(True)
        t = 0
        self.lb = add_lb(frame1, self.sort)
        n = 0
        r1 = []
        r2 = []
        ss = []
        while t < len(name):
            if self.sort == 'r1r2':
                s = ''
                fj = False
                tt = False
                ti=1
                tj=t
                for jj in range(t+1, len(name)):
                    if name[t] == name[jj]:
                        ti+=1
                        if not tt:
                            tname[t] = tname[t]+'#id#'+str(t)
                            s+=tname[t]+'\n'
                            tt = True
                        tname[jj] = tname[jj]+'#id#'+str(jj)
                        s+=tname[jj]+'\n'
                        fj = True
                        tj = jj
                if fj:
                    t = tj
                t+=1
                s.removesuffix('\n')
                if s != '':
                    n+=1
                    r2.append(self.r2[t-1])
                    ss.append(s)
                    # self.lb.add(s, self.r2[t-1])
            elif self.sort == 'r1':
                s = ''
                fj = False
                tt = False
                ti=1
                tj=t
                for jj in range(t+1, len(name)):
                    if name[t] == name[jj]:
                        ti+=1
                        if not tt:
                            tname[t] = tname[t]+'#id#'+str(t)
                            s+=tname[t]+'\n'
                            tt = True
                        tname[jj] = tname[jj]+'#id#'+str(jj)
                        s+=tname[jj]+'\n'
                        fj = True
                        tj = jj
                if fj:
                    t = tj
                t+=1
                s.removesuffix('\n')
                if s != '':
                    n+=1
                    r1.append(self.r1[t-1])
                    ss.append(s)
                    # self.lb.add(s, self.r1[t-1])
        self.lb.name = ['name' for i in range(n)]
        for i in range(n):
            if self.sort == 'r1r2':
                self.lb.add(ss[i], r2[i], self.r1s[2], self.r2s[2])
            elif self.sort == 'r1':
                self.lb.add(ss[i], r1[i], self.r1s[2], self.r2s[2])
                
        tk.Button(self.gg, text='OK', command=self.__check, width=15, height=1, font=('Arial', size(14), "bold"), bg='white', bd=5).grid(row=2, column=0)
        self.f1 = False
        self.gg.bind('<Return>', self.__check)
        set_center(self.g, self.gg, 0, 0)
        self.gg.focus_set()
        self.gg.limit_bind()
        
    def __select_file(self):
        if self.f2:
            self.gg = RestrictedToplevel(self.g, bg='white')
            self.gg.protocol("WM_DELETE_WINDOW", self.__check)
            self.gg.title('File Check')
            if self.sort == 'r1r2':
                text = f'Same {self.r1s[2]} and {self.r2s[2]} Exists\nSelect the file you want to preserve'
            elif self.sort == 'r1':
                text = f'Same {self.r1s[2]} Exists\nSelect the file you want to preserve'
            tk.Label(self.gg, text=text, width=len(text), height=2, font=('Arial', size(14), "bold"), bg='white', bd=5).grid(row=0, column=0)
            frame1 = tk.Frame(self.gg, bg='white')
            frame1.grid(row=1, column=0)
            self.lb = add_lb(frame1, self.sort)
            self.preserve = [True for i in range(len(self.name))]        
            ti=[]
            ss=[]
            tt=[]
            t=0
            if self.sort == 'r1r2':
                for i in range(len(self.r2)):
                    for j in range(len(self.r2)):
                        if self.r2[i] == self.r2[j] and self.r1[i] == self.r1[j] and i != j:
                            ti.append(i)
                            self.preserve[i] = False
                ti = sorted(set(ti))
                while t < len(ti):
                    s=''
                    for i in range(len(np.argwhere(self.r1 == self.r1[ti[t]]))):
                        s+=self.name[ti[t]]+'\n'
                        t+=1
                    if s != '':
                        tt.append(t-1)
                        ss.append(s.removesuffix('\n'))
                self.lb.name = ['name' for i in range(len(ss))]
                for i, v in enumerate(ss):
                    self.lb.add(v, self.r2[tt[i]], self.r1s[2], self.r2s[2])
            elif self.sort == 'r1':
                for i in range(len(self.r1)):
                    for j in range(len(self.r1)):
                        if self.r1[i] == self.r1[j] and i != j:
                            ti.append(i)
                            self.preserve[i] = False
                            
                ti = sorted(set(ti))
                while t < len(ti):
                    s=''
                    for i in range(len(np.argwhere(self.r1 == self.r1[ti[t]]))):
                        s+=self.name[ti[t]]+'\n'
                        t+=1
                    if s != '':
                        tt.append(t-1)
                        ss.append(s.removesuffix('\n'))
                self.lb.name = ['name' for i in range(len(ss))]
                for i, v in enumerate(ss):
                    self.lb.add(v, self.r1[tt[i]], self.r1s[2], self.r2s[2])
                    
            tk.Button(self.gg, text='OK', command=self.__check, width=15, height=1, font=('Arial', size(14), "bold"), bg='white', bd=5).grid(row=2, column=0)
            self.f2 = False
            self.gg.bind('<Return>', self.__check)
            set_center(self.g, self.gg ,0 ,0)
            self.gg.focus_set()
            self.gg.limit_bind()
        else:
            self.__check(f=True)
        
    def __prework(self):
        if self.f1:
            self.__check_file()
        elif self.f2:
            self.f2 = False
            if self.sort == 'r1r2':
                for i in range(len(self.r2)):
                    for j in range(len(self.r2)):
                        if self.r2[i] == self.r2[j] and self.r1[i] == self.r1[j] and i != j:
                            self.f2 = True
            elif self.sort == 'r1':
                for i in range(len(self.r1)):
                    for j in range(len(self.r1)):
                        if self.r1[i] == self.r1[j] and i != j:
                            self.f2 = True
            self.__select_file()
        else:
            self.__rlist()
            self.__set_data(odata=self.data)
    
    def __gen_f1_f2(self):
        self.f1 = False
        self.f2 = False
        for i in self.name:
            if '#id#' in i:
                self.f1 = True
        if self.sort == 'r1r2':
            for i in range(len(self.r2)):
                for j in range(len(self.r2)):
                    if self.r2[i] == self.r2[j] and self.r1[i] == self.r1[j] and i != j:
                        self.f2 = True
        elif self.sort == 'r1':
            for i in range(len(self.r1)):
                for j in range(len(self.r1)):
                    if self.r1[i] == self.r1[j] and i != j:
                        self.f2 = True
    
    def __check_re(self):
        self.__gen_f1_f2()
        self.__prework()

class add_lb():
    def __init__(self, fr, sort):
        self.fr = fr
        self.lb = []
        self.s = []
        self.l = []
        self.r = []
        self.name = []
        self.sort = sort
        
    def add(self, s, r, r1s, r2s):    
        self.s.append(s.removesuffix('\n'))
        if self.sort == 'r1r2':
            ltex = r2s+':'+str(r)+' '
        elif self.sort == 'r1':
            ltex = r1s+':'+str(r)+' '
        else:
            ltex = ''
        l = tk.Label(self.fr, text=ltex, width=len(ltex), height=1, font=('Arial', size(14), "bold"), bg='white', bd=5)
        l.pack()
        self.l.append(l)
        self.r.append(r)
        ls=0
        for i in self.s[-1].split('\n'):
            if len(i)>ls:
                ls=len(i)+1
        listbox = tk.Listbox(self.fr, selectmode='single', font=('Arial', size(14), "bold"), bg='white', bd=5, width=ls, height=len(self.s[-1].split('\n')))
        listbox.pack()
        self.lb.append(listbox)
        
        self.l[-1].config(text=ltex+self.s[-1].split('\n')[0], width=len(ltex+self.s[-1].split('\n')[0]))
        
        for i in self.s[-1].split('\n'):
            listbox.insert(tk.END, i)
        
        # Set focus to the Listbox
        listbox.focus_set()
        
        # Bind events
        listbox.bind('<<ListboxSelect>>', lambda event, lb=listbox, l=l, ltex=ltex: self.__on_select(event, lb, l, ltex))
        listbox.bind('<Up>', lambda event, lb=listbox, l=l: self.__on_up(event, lb, l))
        listbox.bind('<Down>', lambda event, lb=listbox, l=l: self.__on_down(event, lb, l))
        
        # Pre-select the first item
        if listbox.size() > 0:
            listbox.select_set(0)
            listbox.event_generate('<<ListboxSelect>>')
        
    def __on_up(self, event, lb, l):
        selected_index = lb.curselection()
        if selected_index and selected_index[0] > 0:
            lb.select_clear(selected_index[0])
            lb.select_set(selected_index[0] - 1)
            lb.event_generate('<<ListboxSelect>>')
    
    def __on_down(self, event, lb, l):
        selected_index = lb.curselection()
        if selected_index and selected_index[0] < lb.size() - 1:
            lb.select_clear(selected_index[0])
            lb.select_set(selected_index[0] + 1)
            lb.event_generate('<<ListboxSelect>>')
    
    def __on_select(self, event, lb, l, ltex):
        selected_index = lb.curselection()
        if selected_index:
            selected_item = lb.get(selected_index)
            l.config(text=ltex+selected_item, width=len(ltex+selected_item))
            for i,v in enumerate(self.r):
                if str(v)+' ' in ltex:
                    self.name[i] = selected_item.replace('\n', '')
        
def pr_load(data: xr.DataArray):
    global name,optionList,optionList1,optionList2,menu1,menu2,menu3,b_fit,dvalue,e_photon,lensmode,description,tst,lst,dpath
    dvalue = list(data.attrs.values())
    dpath = dvalue[14]
    st=''
    lst=[]
    for _ in data.attrs.keys():
        if _ == 'Description':
            ts=str(data.attrs[_])
            ts=ts.replace('\n\n\n','\n')
            ts=ts.replace('\n\n','\n')
            t=ts.split('\n')
            st+=str(_)+' : '+str(data.attrs[_]).replace('\n','\n                     ')
            # st+=str(_)+' : '+str(data.attrs[_]).replace('\n','\n                         ')
            lst.append(len(' : '+t[0]))
            for i in range(1,len(t)):
                lst.append(len('              '+t[i]))
            print(_,':', data.attrs[_].replace('\n','\n              '))
        elif _ == 'Path':
            pass
        else:
            st+=str(_)+' : '+str(data.attrs[_])+'\n'
            lst.append(len(str(_)+' : '+str(data.attrs[_])))
            print(_,':', data.attrs[_])
    print()
    tst=st
    l_path.config(width=max(lst), state='normal')
    l_path.delete(1.0, tk.END)
    l_path.insert(tk.END,dpath)
    l_path.see(1.0)
    l_path.config(state='disabled')
    info.config(height=len(st.split('\n'))+1, width=max(lst), state='normal')
    if len(st.split('\n'))>24:
        info.config(height=24, width=max(lst)+1, state='normal')
    info.insert(tk.END, '\n'+st+'\n')
    info.update()
    info.see(tk.END)
    info.config(state='disabled')
    global ev, phi
    ev, phi = data.indexes.values()
    ev = np.float64(ev)
    phi = np.float64(phi)
    name=dvalue[0]
    e_photon=np.float64(dvalue[3].split(' ')[0])
    lensmode=dvalue[8]
    description=dvalue[13]
    description=description.replace('\n\n\n\n\n','\n')
    description=description.replace('\n\n\n\n','\n')
    description=description.replace('\n\n\n','\n')
    description=description.replace('\n\n','\n')
    if lensmode=='Transmission':
        menu1.config(state='disabled')
        menu2.config(state='disabled')
        menu3.config(state='disabled')
        in_fit.config(state='disabled')
        b_fit.config(state='disabled')
    else:
        menu1.config(state='normal')
        menu2.config(state='normal')
        menu3.config(state='normal')
        in_fit.config(state='normal')
        b_fit.config(state='normal')
    os.chdir(cdir)
    np.savez(os.path.join(cdir, '.MDC_cut', 'rd.npz'), path=dpath, name=name, lpath=[i for i in lfs.path], ev=ev,
             phi=phi, st=st, lst=lst)

fpr = 0

def o_load():
    global data, h, m, limg, img, rdd, path, st, fpr, lfs, l_name, namevar, nlist, b_tools, f_npz, npzf
    files=fd.askopenfilenames(title="Select Raw Data", filetypes=(
        ("HDF5 files", "*.h5"), ("NPZ files", "*.npz"), ("JSON files", "*.json"), ("TXT files", "*.txt")))
    st.put('Loading...')
    if len(files) > 0:
        f_npz = 0   # initial value to determine if CEC when loaded npz
        lfs = loadfiles(files)
        tpath = lfs.path[0]
        b_name.config(state='normal')
        b_excitation.config(state='normal')
        b_desc.config(state='normal')
        rdd = tpath
        fpr = 0
        if len(files) > 1:  #mulitple files
            if len(lfs.n)>0:lfs.sort='no'
            try:
                b_tools.grid_forget()
                l_name.grid_forget()
            except:
                pass
            b_tools = tk.Button(fr_tool, text='Batch Master', command=tools, width=12, height=1, font=('Arial', size(12), "bold"), bg='white')
            b_tools.grid(row=0, column=0)
            nlist = lfs.name
            namevar = tk.StringVar(value=nlist[0])
            l_name = tk.OptionMenu(fr_tool, namevar, *nlist, command=change_file)
            if len(namevar.get()) >20:
                l_name.config(font=('Arial', size(12), "bold"))
            else:
                l_name.config(font=('Arial', size(14), "bold"))
            l_name.grid(row=0, column=1)
        else:   #single file
            try:
                b_tools.grid_forget()
                l_name.grid_forget()
            except:
                pass
        if lfs.f_npz[0]:npzf = True
        else:npzf = False
        if npzf:
            koffset.config(state='normal')
            k_offset.set('0')
            koffset.config(state='disable')
        else:
            koffset.config(state='normal')
            try:
                k_offset.set(ko)
            except:
                k_offset.set('0')
    else:
        b_name.config(state='disable')
        b_excitation.config(state='disable')
        b_desc.config(state='disable')
        rdd = path
        
    limg.config(image=img[np.random.randint(len(img))])
    tbasename = os.path.basename(tpath)
    if '.h5' in tbasename:
        data = lfs.data[0]  # data save as xarray.DataArray format
        pr_load(data)
        tname = lfs.name[0]
        print(f'\n{tname}')
        if tname != name:
            print(f'\033[31mname need correction\033[0m')
            print(f'\033[33m%9s: %s\n\033[33m%9s: %s\033[0m'%('Path Name', tname, 'H5 Name', name))
        else:
            print('Name is correct')
            print(f'\033[32m%9s: {tname}\n\033[32m%9s: {name}\033[0m'%('Path Name', 'H5 Name'))
        st.put('Loaded')
    elif '.json' in tbasename:
        data = lfs.data[0]
        pr_load(data)
        tname = lfs.name[0]
        print(f'\n{tname}')
        if tname != name:
            print(f'\033[31mname need correction\033[0m')
            print(f'\033[33m%9s: %s\n\033[33m%9s: %s\033[0m'%('Path Name', tname, 'JSON Name', name))
        else:
            print('Name is correct')
            print(f'\033[32m%9s: {tname}\n\033[32m%9s: {name}\033[0m'%('Path Name', 'JSON Name'))
        st.put('Loaded')
    elif '.txt' in tbasename:
        data = lfs.data[0]
        pr_load(data)
        st.put('Loaded')
    elif '.npz' in tbasename:
        data = lfs.data[0]
        pr_load(data)
        tname = lfs.name[0]
        st.put('Loaded')
    else:
        st.put('')
        pass
    #   print Attributes


def o_ecut():
    global data, ev, phi, mfpath, limg, img, name, rdd, st
    limg.config(image=img[np.random.randint(len(img))])
    mfpath = ''
    # os.chdir(rdd.removesuffix(rdd.split('/')[-1]))
    os.chdir(os.path.dirname(rdd))
    try:
        ndir = os.path.dirname(rdd)
        if ndir.split(os.sep)[-1] == name+'_MDC_'+lowlim.get():
            os.chdir('../')
        os.chdir(ndir)
        os.makedirs(name+'_MDC_'+lowlim.get())
    except:
        pass
    os.chdir(name+'_MDC_'+lowlim.get())
    pbar = tqdm.tqdm(total=len(ev), desc='MDC', colour='green')
    for n in range(len(ev)):
        ecut = data.sel(eV=ev[n], method='nearest')
        if npzf:x = phi
        else:x = (2*m*ev[n]*1.602176634*10**-19)**0.5*np.sin(phi/180*np.pi)*10**-10/(h/2/np.pi)
        y = ecut.to_numpy().reshape(len(x))
        y = np.where(y > int(lowlim.get()), y, int(lowlim.get()))
        path = 'ecut_%.3f.txt' % ev[n]
        mfpath += path
        pbar.update(1)
        # print(n+1,'/',len(ev))
        if (n+1) % (len(ev)//100) == 0:
            # print(str(round((n+1)/len(ev)*100))+'%'+' ('+str(len(ev))+')')
            st.put(str(round((n+1)/len(ev)*100))+'%'+' ('+str(len(ev))+')')
        f = open(path, 'w', encoding='utf-8')  # tab 必須使用 '\t' 不可"\t"
        f.write('#Wave Vector'+'\t'+'#Intensity'+'\n')
        for i in range(len(x)-1, -1, -1):
            f.write('%-6e' % x[i]+'\t'+'%-6e' % y[i]+'\n')
        f.close()
    os.chdir(cdir)
    np.savez(os.path.join(cdir, '.MDC_cut', 'mfpath.npz'), mfpath=mfpath)
    # os.chdir(rdd.removesuffix(rdd.split('/')[-1]))
    os.chdir(os.path.dirname(rdd))
    pbar.close()
    print('Done')
    st.put('Done')


def o_angcut():
    global data, ev, phi, efpath, limg, img, name, rdd, st
    limg.config(image=img[np.random.randint(len(img))])
    efpath = ''
    # os.chdir(rdd.removesuffix(rdd.split('/')[-1]))
    os.chdir(os.path.dirname(rdd))
    try:
        ndir = os.path.dirname(rdd)
        if ndir.split(os.sep)[-1] == name+'_EDC'+lowlim.get():
            os.chdir('../')
        os.chdir(ndir)
        os.makedirs(name+'_EDC'+lowlim.get())
    except:
        pass
    os.chdir(name+'_EDC'+lowlim.get())
    pbar = tqdm.tqdm(total=len(phi), desc='EDC', colour='blue')
    for n in range(len(phi)):
        angcut = data.sel(phi=phi[n], method='nearest')
        x = ev
        y = angcut.to_numpy().reshape(len(x))
        y = np.where(y > int(lowlim.get()), y, int(lowlim.get()))
        path = 'angcut_%.5d.txt' % (phi[n]*1000)
        efpath += path
        pbar.update(1)
        # print(n+1,'/',len(phi))
        if (n+1) % (len(phi)//100) == 0:
            # print(str(round((n+1)/len(phi)*100))+'%'+' ('+str(len(phi))+')')
            st.put(str(round((n+1)/len(phi)*100))+'%'+' ('+str(len(phi))+')')
        f = open(path, 'w', encoding='utf-8')  # tab 必須使用 '\t' 不可"\t"
        f.write('#Wave Vector'+'\t'+'#Intensity'+'\n')
        for i in range(len(x)-1, -1, -1):
            f.write('%-6e' % x[i]+'\t'+'%-6e' % y[i]+'\n')
        f.close()
    os.chdir(cdir)
    np.savez(os.path.join(cdir, '.MDC_cut', 'efpath.npz'), efpath=efpath)
    # os.chdir(rdd.removesuffix(rdd.split('/')[-1]))
    os.chdir(os.path.dirname(rdd))
    pbar.close()
    print('Done')
    st.put('Done')

# def res(a, b):
#     a = np.array(a)
#     det = [1 for i in range(len(a)-1)]
#     while sum(det) != 0:
#         for i in range(len(a)-1):
#             if a[i+1] < a[i]:
#                 det[i] = 1
#                 a[i+1], a[i] = a[i], a[i+1]
#                 b[i+1], b[i] = b[i], b[i+1]
#             else:
#                 det[i] = 0
#     return np.array(b)

def res(a, b):
    return np.array([b[i] for i in np.argsort(a)])

def loadmfit_re():
    file = fd.askopenfilename(
        title="Select MDC Fitted file", filetypes=(("VMS files", "*.vms"),))
    global st
    global data, rdd, lmgg
    mfpath = ''
    yy = []
    for n in range(len(ev)):
        ecut = data.sel(eV=ev[n], method='nearest')
        y = ecut.to_numpy().reshape(len(phi))
        y = np.where(y > int(lowlim.get()), y, int(lowlim.get()))
        yy.append(y)
        path = 'ecut_%.3f.txt' % ev[n]
        mfpath += path
    if len(file) > 2:
        rdd = file
        print('Loading...')
        st.put('Loading...')
    else:
        rdd = path
        lmgg.destroy()
    if ".vms" in file:
        n = -1
        fev = np.array([], dtype=float)
        t_fwhm = []
        t_pos = []
        t_kmax = []
        t_kmin = []
        smfi = []
        skmin = []
        skmax = []
        smfp = [1 for i in range(len(ev))]
        # os.chdir(rdd.removesuffix(rdd.split('/')[-1]))
        os.chdir(os.path.dirname(rdd))
        fc = open('rev_'+os.path.basename(file), 'w', encoding='utf-8')
        ff = open(name+'_mdc_fitted_raw_data.txt', 'w',
                  encoding='utf-8')  # tab 必須使用 '\t' 不可"\t"
        ff.write('K.E. (eV)'+'\t'+'FWHM (k)'+'\t'+'Position (k)'+'\n')
        try:
            with open(file) as f:
                f1 = 0
                f2 = 0
                indf = 0
                for i, line in enumerate(f):
                    if line[0:11] in mfpath:
                        fi = int(mfpath.find(line[0:11])/15)
                        n = -1
                        f1 = 0
                        f2 = 0
                        indf = 0
                    if line[0:22] == 'CASA region (*Survey*)':
                        tkmax = line.split(' ')[4]
                        tkmin = line.split(' ')[5]
                        ts = line.split(' ')
                        if float(tkmax) > 1000:
                            ts[4], ts[5] = str(
                                round(-(float(ts[5])-1486.6)+1486.6, 6)), str(round(-(float(ts[4])-1486.6)+1486.6, 6))
                        else:
                            ts[4], ts[5] = str(
                                round(-float(ts[5]), 6)), str(round(-float(ts[4]), 6))
                        fc.write(' '.join(ts))
                    elif line[0:12] == 'CASA comp (*':  # 若無篩選條件   indent於此if以下
                        tpos = line.split(' ')[17]
                        tfwhm = line.split(' ')[11]
                        area = line.split(' ')[5]
                        # tkmax=line.split(' ')[18]
                        # tkmin=line.split(' ')[19]
                        #####################################
                        s = line.split(' ')
                        if float(tpos) > 1000:
                            s[17] = str(
                                round(-(float(s[17])-1486.6)+1486.6, 6))
                            s[18], s[19] = str(
                                round(-(float(s[19])-1486.6)+1486.6, 6)), str(round(-(float(s[18])-1486.6)+1486.6, 6))
                        else:
                            s[17] = str(round(-float(s[17]), 6))
                            s[18], s[19] = str(
                                round(-float(s[19]), 6)), str(round(-float(s[18]), 6))
                        fc.write(' '.join(s))
                        '''
                        s=line.split(' ')
                        s[2]='(*Survey_*)'
                        s[8]=str(0)
                        s[9]=str(0.3)     #Area B=A*2
                        s[14]=str(0)
                        s[15]=str(1)    #FWHM B=A*1
                        
                        s[17]=str(round(float(s[17]),6))
                        s[18]=str(round(float(s[18]),6))
                        s[17]=str(round(float(s[17])-0.05,6))
                        s[18]=ts[4]
                        s[19]=ts[5]
                        fc.write(' '.join(s))
                        '''
                        #####################################

                        # 以下if判斷式區段---------可自訂篩選條件------可多層if-----注意indent----------條件篩選值可至 xxxx_fitted_raw_data.txt---檢查需求
                        ##################################################################################################
                        ##################################################################################################
                        # area tfwhm,tpos(1486.6+...)
                        if (ev[fi] > 20.58 and np.float64(tpos) < 1486.6+0.023) or (ev[fi] < 20.58 and np.float64(tpos) > 1486.6+0.023) or 1 == 1:
                            fev = np.append(fev, ev[fi])  # 內容勿動 indent小最內圈if一階
                            t_fwhm.append(tfwhm)  # 內容勿動 indent小最內圈if一階
                            t_pos.append(tpos)  # 內容勿動 indent小最內圈if一階
                            t_kmax.append(tkmax)
                            t_kmin.append(tkmin)
                            if fi not in smfi:
                                smfi.append(fi)
                                skmin.append(tkmin)
                                skmax.append(tkmax)
                            elif fi in smfi:
                                smfp[fi] += 1
                            if float(tpos) > 1000:
                                # 內容勿動 indent小最內圈if一階
                                ff.write(
                                    str(ev[fi])+'\t'+tfwhm+'\t'+str(np.float64(tpos)-1486.6)+'\n')
                            else:
                                ff.write(str(ev[fi])+'\t'+tfwhm +
                                         '\t'+str(np.float64(tpos))+'\n')
                        ##################################################################################################
                        ##################################################################################################
                    elif line[0:100] == 'XPS\n':
                        fc.write('XPS'+'\n')
                        indf = 1
                    elif line[0:100] == 'Al\n':
                        fc.write('Al'+'\n')
                        indf = 0
                    elif line[0:100] == '494\n' and f1 == 0:
                        if indf == 1:
                            fc.write('494'+'\n')
                            indf = 0
                        else:
                            f1 = 1
                            ti = i
                    elif line[0:100] == '0\n' and f1 == 1:
                        if ti == i-1:
                            f2 = 1
                            ti = i
                        else:
                            f1 = 0
                            ti = 0
                    elif line[0:100] == '1\n' and f2 == 1:
                        if ti == i-1:
                            ti = 0
                            f2 = 0
                            fc.write('494'+'\n')
                            fc.write('0'+'\n')
                            fc.write('1'+'\n')
                            for j in range(len(phi)):
                                # fc.write(str(int(yy[fi][-j-1]))+'\n')
                                fc.write(str(int(yy[fi][j]))+'\n')
                            n = len(phi)
                        else:
                            f1 = 0
                            f2 = 0
                            ti = 0
                    else:
                        if n <= 0:
                            if f2 == 1:
                                fc.write('494'+'\n')
                                fc.write('0'+'\n')
                                f2 = 0
                                f1 = 0
                            elif f1 == 1:
                                fc.write('494'+'\n')
                                f1 = 0
                            fc.write(line)
                        if n > 0:
                            f1 = 2
                            n -= 1
                            if n == 0:
                                f1 = 0
                    # pass  # process line i      #勿動
        except UnicodeDecodeError:
            with open(file, encoding='utf-8') as f:
                f1 = 0
                f2 = 0
                indf = 0
                for i, line in enumerate(f):
                    if line[0:11] in mfpath:
                        fi = int(mfpath.find(line[0:11])/15)
                        n = -1
                        f1 = 0
                        f2 = 0
                        indf = 0
                    if line[0:22] == 'CASA region (*Survey*)':
                        tkmax = line.split(' ')[4]
                        tkmin = line.split(' ')[5]
                        ts = line.split(' ')
                        if float(tkmax) > 1000:
                            ts[4], ts[5] = str(
                                round(-(float(ts[5])-1486.6)+1486.6, 6)), str(round(-(float(ts[4])-1486.6)+1486.6, 6))
                        else:
                            ts[4], ts[5] = str(
                                round(-float(ts[5]), 6)), str(round(-float(ts[4]), 6))
                        fc.write(' '.join(ts))
                    elif line[0:12] == 'CASA comp (*':  # 若無篩選條件   indent於此if以下
                        tpos = line.split(' ')[17]
                        tfwhm = line.split(' ')[11]
                        area = line.split(' ')[5]
                        # tkmax=line.split(' ')[18]
                        # tkmin=line.split(' ')[19]
                        #####################################
                        s = line.split(' ')
                        if float(tpos) > 1000:
                            s[17] = str(
                                round(-(float(s[17])-1486.6)+1486.6, 6))
                            s[18], s[19] = str(
                                round(-(float(s[19])-1486.6)+1486.6, 6)), str(round(-(float(s[18])-1486.6)+1486.6, 6))
                        else:
                            s[17] = str(round(-float(s[17]), 6))
                            s[18], s[19] = str(
                                round(-float(s[19]), 6)), str(round(-float(s[18]), 6))
                        fc.write(' '.join(s))
                        '''
                        s=line.split(' ')
                        s[2]='(*Survey_*)'
                        s[8]=str(0)
                        s[9]=str(0.3)     #Area B=A*2
                        s[14]=str(0)
                        s[15]=str(1)    #FWHM B=A*1
                        
                        s[17]=str(round(float(s[17]),6))
                        s[18]=str(round(float(s[18]),6))
                        s[17]=str(round(float(s[17])-0.05,6))
                        s[18]=ts[4]
                        s[19]=ts[5]
                        fc.write(' '.join(s))
                        '''
                        #####################################

                        # 以下if判斷式區段---------可自訂篩選條件------可多層if-----注意indent----------條件篩選值可至 xxxx_fitted_raw_data.txt---檢查需求
                        ##################################################################################################
                        ##################################################################################################
                        # area tfwhm,tpos(1486.6+...)
                        if (ev[fi] > 20.58 and np.float64(tpos) < 1486.6+0.023) or (ev[fi] < 20.58 and np.float64(tpos) > 1486.6+0.023) or 1 == 1:
                            fev = np.append(fev, ev[fi])  # 內容勿動 indent小最內圈if一階
                            t_fwhm.append(tfwhm)  # 內容勿動 indent小最內圈if一階
                            t_pos.append(tpos)  # 內容勿動 indent小最內圈if一階
                            t_kmax.append(tkmax)
                            t_kmin.append(tkmin)
                            if fi not in smfi:
                                smfi.append(fi)
                                skmin.append(tkmin)
                                skmax.append(tkmax)
                            elif fi in smfi:
                                smfp[fi] += 1
                            if float(tpos) > 1000:
                                # 內容勿動 indent小最內圈if一階
                                ff.write(
                                    str(ev[fi])+'\t'+tfwhm+'\t'+str(np.float64(tpos)-1486.6)+'\n')
                            else:
                                ff.write(str(ev[fi])+'\t'+tfwhm +
                                         '\t'+str(-np.float64(tpos))+'\n')
                        ##################################################################################################
                        ##################################################################################################
                    elif line[0:100] == 'XPS\n':
                        fc.write('XPS'+'\n')
                        indf = 1
                    elif line[0:100] == 'Al\n':
                        fc.write('Al'+'\n')
                        indf = 0
                    elif line[0:100] == '494\n' and f1 == 0:
                        if indf == 1:
                            fc.write('494'+'\n')
                            indf = 0
                        else:
                            f1 = 1
                            ti = i
                    elif line[0:100] == '0\n' and f1 == 1:
                        if ti == i-1:
                            f2 = 1
                            ti = i
                        else:
                            f1 = 0
                            ti = 0
                    elif line[0:100] == '1\n' and f2 == 1:
                        if ti == i-1:
                            ti = 0
                            f2 = 0
                            fc.write('494'+'\n')
                            fc.write('0'+'\n')
                            fc.write('1'+'\n')
                            for j in range(len(phi)):
                                # fc.write(str(int(yy[fi][-j-1]))+'\n')
                                fc.write(str(int(yy[fi][j]))+'\n')
                            n = len(phi)
                        else:
                            f1 = 0
                            f2 = 0
                            ti = 0
                    else:
                        if n <= 0:
                            if f2 == 1:
                                fc.write('494'+'\n')
                                fc.write('0'+'\n')
                                f2 = 0
                                f1 = 0
                            elif f1 == 1:
                                fc.write('494'+'\n')
                                f1 = 0
                            fc.write(line)
                        if n > 0:
                            f1 = 2
                            n -= 1
                            if n == 0:
                                f1 = 0
                    # pass  # process line i      #勿動
        ff.close()
        fc.close()
        os.chdir(cdir)
        print('Done')
        st.put('Done')
        lmgg.destroy()


def loadmfit_():
    file = fd.askopenfilename(title="Select MDC Fitted file", filetypes=(
        ("NPZ files", "*.npz"), ("VMS files", "*.vms"),))
    global h, m, fwhm, fev, pos, limg, img, name, ophi, rpos, st, kmax, kmin, lmgg
    global data, rdd, skmin, skmax, smaa1, smaa2, smfp, smfi, fpr, mfi_x, smresult, smcst
    mfpath = ''
    yy = []
    for n in range(len(ev)):
        ecut = data.sel(eV=ev[n], method='nearest')
        y = ecut.to_numpy().reshape(len(phi))
        y = np.where(y > int(lowlim.get()), y, int(lowlim.get()))
        yy.append(y)
        path = 'ecut_%.3f.txt' % ev[n]
        mfpath += path
    if len(file) > 2:
        fpr = 0
        rdd = file
        print('Loading...')
        st.put('Loading...')
    else:
        rdd = path
        lmgg.destroy()
    if ".vms" in file:
        n = -1
        fev = np.array([], dtype=float)
        mfi_x = np.arange(len(ev))
        t_fwhm = []
        t_pos = []
        t_kmax = []
        t_kmin = []
        smfi = []
        skmin = []
        skmax = []
        smfp = [1 for i in range(len(ev))]
        # os.chdir(rdd.removesuffix(rdd.split('/')[-1]))
        os.chdir(os.path.dirname(rdd))
        fc = open('copy2p_'+os.path.basename(file), 'w', encoding='utf-8')
        ff = open(name+'_mdc_fitted_raw_data.txt', 'w',
                  encoding='utf-8')  # tab 必須使用 '\t' 不可"\t"
        ff.write('K.E. (eV)'+'\t'+'FWHM (k)'+'\t'+'Position (k)'+'\n')
        try:
            with open(file) as f:
                for i, line in enumerate(f):
                    if line[0:11] in mfpath:
                        fi = int(mfpath.find(line[0:11])/15)
                    if line[0:22] == 'CASA region (*Survey*)':
                        tkmax = line.split(' ')[4]
                        tkmin = line.split(' ')[5]
                    # 若無篩選條件   indent於此if以下
                    elif line[0:20] == 'CASA comp (*Survey*)':
                        tpos = line.split(' ')[17]
                        tfwhm = line.split(' ')[11]
                        area = line.split(' ')[5]
                        # tkmax=line.split(' ')[18]
                        # tkmin=line.split(' ')[19]
                        # 以下if判斷式區段---------可自訂篩選條件------可多層if-----注意indent----------條件篩選值可至 xxxx_fitted_raw_data.txt---檢查需求
                        ##################################################################################################
                        ##################################################################################################
                        # area tfwhm,tpos(1486.6+...)
                        if (ev[fi] > 20.58 and np.float64(tpos) < 1486.6+0.023) or (ev[fi] < 20.58 and np.float64(tpos) > 1486.6+0.023) or 1 == 1:
                            if npzf:tkk = phi
                            else:tkk = (2*m*ev[fi]*1.602176634*10**-19)**0.5*np.sin(phi/180*np.pi)*10**-10/(h/2/np.pi)
                            if float(tpos) > 1200:
                                tkk+=1486.6
                            d = tkk[1]-tkk[0]
                            tr = float(tpos)+float(tfwhm)/2
                            tl = float(tpos)-float(tfwhm)/2
                            ri = int((tr-tkk[0])/d)
                            li = int((tl-tkk[0])/d)
                            tr = tkk[ri]+(float(tr)-(tkk[0]+ri*d)
                                          )/d*(tkk[ri+1]-tkk[ri])
                            tl = tkk[li]+(float(tl)-(tkk[0]+li*d)
                                          )/d*(tkk[li+1]-tkk[li])
                            tfwhm = tr-tl
                            tpi = int((float(tpos)-tkk[0])/d)
                            tpos = tkk[tpi]+(float(tpos)-(tkk[0]+tpi*d)
                                             )/d*(tkk[tpi+1]-tkk[tpi])
                            tpi = int((float(tkmax)-tkk[0])/d)
                            tkmax = tkk[tpi]+(float(tkmax) -
                                              (tkk[0]+tpi*d))/d*(tkk[tpi+1]-tkk[tpi])
                            tpi = int((float(tkmin)-tkk[0])/d)
                            if tpi > 492:
                                tpi = 492
                            tkmin = tkk[tpi]+(float(tkmin) -
                                              (tkk[0]+tpi*d))/d*(tkk[tpi+1]-tkk[tpi])

                            fev = np.append(fev, ev[fi])  # 內容勿動 indent小最內圈if一階
                            t_fwhm.append(tfwhm)  # 內容勿動 indent小最內圈if一階
                            t_pos.append(tpos)  # 內容勿動 indent小最內圈if一階
                            t_kmax.append(tkmax)
                            t_kmin.append(tkmin)
                            if fi not in smfi:
                                smfi.append(fi)
                                skmin.append(tkmin)
                                skmax.append(tkmax)
                            elif fi in smfi:
                                smfp[fi] += 1
                            if tpos > 1000:
                                # 內容勿動 indent小最內圈if一階
                                ff.write(
                                    str(ev[fi])+'\t'+str(tfwhm)+'\t'+str(np.float64(tpos)-1486.6)+'\n')
                            else:
                                ff.write(
                                    str(ev[fi])+'\t'+str(tfwhm)+'\t'+str(np.float64(tpos))+'\n')

                    # pass  # process line i      #勿動
        except UnicodeDecodeError:
            with open(file, encoding='utf-8') as f:
                for i, line in enumerate(f):
                    if line[0:11] in mfpath:
                        fi = int(mfpath.find(line[0:11])/15)
                    if line[0:22] == 'CASA region (*Survey*)':
                        tkmax = line.split(' ')[4]
                        tkmin = line.split(' ')[5]
                    # 若無篩選條件   indent於此if以下
                    elif line[0:20] == 'CASA comp (*Survey*)':
                        tpos = line.split(' ')[17]
                        tfwhm = line.split(' ')[11]
                        area = line.split(' ')[5]
                        # tkmax=line.split(' ')[18]
                        # tkmin=line.split(' ')[19]
                        # 以下if判斷式區段---------可自訂篩選條件------可多層if-----注意indent----------條件篩選值可至 xxxx_fitted_raw_data.txt---檢查需求
                        ##################################################################################################
                        ##################################################################################################
                        # area tfwhm,tpos(1486.6+...)
                        if (ev[fi] > 20.58 and np.float64(tpos) < 1486.6+0.023) or (ev[fi] < 20.58 and np.float64(tpos) > 1486.6+0.023) or 1 == 1:
                            if npzf:tkk = phi
                            else:tkk = (2*m*ev[fi]*1.602176634*10**-19)**0.5*np.sin(phi/180*np.pi)*10**-10/(h/2/np.pi)
                            if float(tpos) > 1200:
                                tkk+=1486.6
                            d = tkk[1]-tkk[0]
                            tr = float(tpos)+float(tfwhm)/2
                            tl = float(tpos)-float(tfwhm)/2
                            ri = int((tr-tkk[0])/d)
                            li = int((tl-tkk[0])/d)
                            tr = tkk[ri]+(float(tr)-(tkk[0]+ri*d)
                                          )/d*(tkk[ri+1]-tkk[ri])
                            tl = tkk[li]+(float(tl)-(tkk[0]+li*d)
                                          )/d*(tkk[li+1]-tkk[li])
                            tfwhm = tr-tl
                            tpi = int((float(tpos)-tkk[0])/d)
                            tpos = tkk[tpi]+(float(tpos)-(tkk[0]+tpi*d)
                                             )/d*(tkk[tpi+1]-tkk[tpi])
                            tpi = int((float(tkmax)-tkk[0])/d)
                            tkmax = tkk[tpi]+(float(tkmax) -
                                              (tkk[0]+tpi*d))/d*(tkk[tpi+1]-tkk[tpi])
                            tpi = int((float(tkmin)-tkk[0])/d)
                            if tpi > 492:
                                tpi = 492
                            tkmin = tkk[tpi]+(float(tkmin) -
                                              (tkk[0]+tpi*d))/d*(tkk[tpi+1]-tkk[tpi])

                            fev = np.append(fev, ev[fi])  # 內容勿動 indent小最內圈if一階
                            t_fwhm.append(tfwhm)  # 內容勿動 indent小最內圈if一階
                            t_pos.append(tpos)  # 內容勿動 indent小最內圈if一階
                            t_kmax.append(tkmax)
                            t_kmin.append(tkmin)
                            if fi not in smfi:
                                smfi.append(fi)
                                skmin.append(tkmin)
                                skmax.append(tkmax)
                            elif fi in smfi:
                                smfp[fi] += 1
                            if tpos > 1000:
                                # 內容勿動 indent小最內圈if一階
                                ff.write(
                                    str(ev[fi])+'\t'+str(tfwhm)+'\t'+str(np.float64(tpos)-1486.6)+'\n')
                            else:
                                ff.write(
                                    str(ev[fi])+'\t'+str(tfwhm)+'\t'+str(np.float64(tpos))+'\n')

                    # pass  # process line i      #勿動
        ff.close()
        fc.close()
        fwhm = np.float64(t_fwhm)     # FWHM
        if np.max(np.float64(t_pos)) > 50:
            rpos = np.float64(t_pos)-1486.6    # Pos
            kmax = np.float64(t_kmax)-1486.6
            kmin = np.float64(t_kmin)-1486.6
            skmax = np.float64(skmax)-1486.6
            skmin = np.float64(skmin)-1486.6
        else:
            rpos = np.float64(t_pos)    # Pos
            kmax = np.float64(t_kmax)
            kmin = np.float64(t_kmin)
            skmax = np.float64(skmax)
            skmin = np.float64(skmin)

        ophi = np.arcsin(rpos/(2*m*fev*1.602176634*10**-19)**0.5 /
                         10**-10*(h/2/np.pi))*180/np.pi
        pos = (2*m*fev*1.602176634*10**-19)**0.5 * \
            np.sin((np.float64(k_offset.get())+ophi) /
                   180*np.pi)*10**-10/(h/2/np.pi)
        okmphi = np.arcsin(kmin/(2*m*fev*1.602176634*10**-19) **
                           0.5/10**-10*(h/2/np.pi))*180/np.pi
        kmin = (2*m*fev*1.602176634*10**-19)**0.5 * \
            np.sin((np.float64(k_offset.get())+okmphi) /
                   180*np.pi)*10**-10/(h/2/np.pi)
        okMphi = np.arcsin(kmax/(2*m*fev*1.602176634*10**-19) **
                           0.5/10**-10*(h/2/np.pi))*180/np.pi
        kmax = (2*m*fev*1.602176634*10**-19)**0.5 * \
            np.sin((np.float64(k_offset.get())+okMphi) /
                   180*np.pi)*10**-10/(h/2/np.pi)

        rpos = res(fev, rpos)
        ophi = res(fev, ophi)
        fwhm = res(fev, fwhm)
        pos = res(fev, pos)
        kmin = res(fev, kmin)
        kmax = res(fev, kmax)
        fev = res(fev, fev)

        smfi = res(smfi, smfi)
        tkmin = res(smfi, skmin)
        tkmax = res(smfi, skmax)
        skmin, skmax = [], []
        smaa1 = np.float64(np.arange(4*len(ev)).reshape(len(ev), 4))
        smaa2 = np.float64(np.arange(8*len(ev)).reshape(len(ev), 8))
        ti = 0
        ti2 = 0
        for i, v in enumerate(ev):
            if i in smfi:
                skmin.append(tkmin[ti2])
                skmax.append(tkmax[ti2])
                ti2 += 1
                if smfp[i] == 2:  # 2peak以上要改
                    ti += 1
            else:
                skmin.append((2*m*v*1.602176634*10**-19)**0.5 *
                             np.sin(-0.5/180*np.pi)*10**-10/(h/2/np.pi))
                skmax.append((2*m*v*1.602176634*10**-19)**0.5 *
                             np.sin(0.5/180*np.pi)*10**-10/(h/2/np.pi))
            a1 = [(skmin[i]+skmax[i])/2, 10, 0.5, int(base.get())]
            a2 = [(skmin[i]+skmax[i])/2, 10, 0.5, int(base.get()),
                  (skmin[i]+skmax[i])/2, 10, 0.5, int(base.get())]

            if i in smfi:
                if smfp[i] == 1:
                    a1 = [rpos[ti], 10, fwhm[ti], int(base.get())]
                elif smfp[i] == 2:
                    a2 = [rpos[ti-1], 10, fwhm[ti-1],
                          int(base.get()), rpos[ti], 10, fwhm[ti], int(base.get())]
                ti += 1
            smaa1[i, :] = a1
            smaa2[i, :] = a2

        skmin, skmax = np.float64(skmin), np.float64(skmax)
        fpr = 1
        try:
            smresult=[]
        except:
            pass
        os.chdir(cdir)
    elif ".npz" in file:
        try:
            with np.load(file, 'rb') as f:
                rdd = str(f['path'])
                fev = f['fev']
                fwhm = f['fwhm']
                pos = f['pos']
                skmin = f['skmin']
                skmax = f['skmax']
                smaa1 = f['smaa1']
                smaa2 = f['smaa2']
                smfp = f['smfp']
                smfi = f['smfi']
                smresult = f['smresult']
                smcst = f['smcst']
            rpos = np.copy(pos)
            ophi = np.arcsin(rpos/(2*m*fev*1.602176634*10**-19) **
                             0.5/10**-10*(h/2/np.pi))*180/np.pi
            fpr = 1
            tbasename = os.path.basename(rdd)
            if '.h5' in tbasename:
                data = load_h5(rdd)
                pr_load(data)
            elif '.json' in tbasename:
                data = load_json(rdd)
                pr_load(data)
            elif '.txt' in tbasename:
                data = load_txt(rdd)
                pr_load(data)
        except:
            pass
    if ".vms" in file:
        np.savez(os.path.join(cdir, '.MDC_cut', 'mfit.npz'), ko=k_offset.get(), fev=fev, rpos=rpos, ophi=ophi, fwhm=fwhm, pos=pos, kmin=kmin,
                 kmax=kmax, skmin=skmin, skmax=skmax, smaa1=smaa1, smaa2=smaa2, smfp=smfp, smfi=smfi)
    elif ".npz" in file:
        np.savez(os.path.join(cdir, '.MDC_cut', 'mfit.npz'), ko=k_offset.get(), fev=fev, rpos=rpos, ophi=ophi, fwhm=fwhm, pos=pos, kmin=skmin,
                 kmax=skmax, skmin=skmin, skmax=skmax, smaa1=smaa1, smaa2=smaa2, smfp=smfp, smfi=smfi, smresult=smresult, smcst=smcst)
    limg.config(image=img[np.random.randint(len(img))])
    print('Done')
    st.put('Done')
    lmgg.destroy()


def loadmfit_2p():
    file = fd.askopenfilename(
        title="Select MDC Fitted file", filetypes=(("VMS files", "*.vms"),))
    global st
    global data, rdd, lmgg
    mfpath = ''
    yy = []
    for n in range(len(ev)):
        ecut = data.sel(eV=ev[n], method='nearest')
        y = ecut.to_numpy().reshape(len(phi))
        y = np.where(y > int(lowlim.get()), y, int(lowlim.get()))
        yy.append(y)
        path = 'ecut_%.3f.txt' % ev[n]
        mfpath += path
    if len(file) > 2:
        rdd = file
        print('Loading...')
        st.put('Loading...')
    else:
        rdd = path
        lmgg.destroy()
    if ".vms" in file:
        n = -1
        # os.chdir(rdd.removesuffix(rdd.split('/')[-1]))
        os.chdir(os.path.dirname(rdd))
        fc = open('copy2p_'+os.path.basename(file), 'w', encoding='utf-8')
        try:
            with open(file) as f:
                f1 = 0
                f2 = 0
                indf = 0
                for i, line in enumerate(f):
                    if line[0:11] in mfpath:
                        fi = int(mfpath.find(line[0:11])/15)
                        n = -1
                        f1 = 0
                        f2 = 0
                        indf = 0
                    if line[0:22] == 'CASA region (*Survey*)':
                        ts = line.split(' ')
                        ts[4] = str(round(float(ts[4]), 6))
                        ts[5] = str(round(float(ts[5]), 6))
                        fc.write(' '.join(ts))
                        fc.write('2'+'\n')
                        n = 1
                    # 若無篩選條件   indent於此if以下
                    elif line[0:20] == 'CASA comp (*Survey*)':
                        s = line.split(' ')
                        s[17] = str(round(float(s[17]), 6))
                        s[18] = str(round(float(s[17])-0.0001, 6))
                        s[19] = str(round(float(s[17])+0.0001, 6))
                        fc.write(' '.join(s))

                        s = line.split(' ')
                        s[2] = '(*Survey_*)'
                        s[8] = str(0)
                        s[9] = str(0.3)  # Area B=A*2
                        s[14] = str(0)
                        s[15] = str(1)  # FWHM B=A*1

                        s[17] = str(round(float(s[17]), 6))
                        s[18] = str(round(float(s[18]), 6))
                        s[17] = str(round(float(s[17])-0.05, 6))
                        s[18] = ts[4]
                        s[19] = ts[5]
                        fc.write(' '.join(s))
                    elif line[0:100] == 'XPS\n':
                        fc.write('XPS'+'\n')
                        indf = 1
                    elif line[0:100] == 'Al\n':
                        fc.write('Al'+'\n')
                        indf = 0
                    elif line[0:100] == '494\n' and f1 == 0:
                        if indf == 1:
                            fc.write('494'+'\n')
                            indf = 0
                        else:
                            f1 = 1
                            ti = i
                    elif line[0:100] == '0\n' and f1 == 1:
                        if ti == i-1:
                            f2 = 1
                            ti = i
                        else:
                            f1 = 0
                            ti = 0
                    elif line[0:100] == '1\n' and f2 == 1:
                        if ti == i-1:
                            ti = 0
                            f2 = 0
                            fc.write('494'+'\n')
                            fc.write('0'+'\n')
                            fc.write('1'+'\n')
                            for j in range(len(phi)):
                                fc.write(str(int(yy[fi][-j-1]))+'\n')
                            n = len(phi)
                        else:
                            f1 = 0
                            f2 = 0
                            ti = 0
                    elif line[0:100] == '8\n':
                        if indf == 1:
                            fc.write('8'+'\n')
                            indf = 0
                        else:
                            fc.write('9'+'\n')
                    elif line[0:100] == '9\n':
                        if indf == 1:
                            fc.write('9'+'\n')
                            indf = 0
                        else:
                            fc.write('10'+'\n')
                    elif line[0:100] == '10\n':
                        if indf == 1:
                            fc.write('10'+'\n')
                            indf = 0
                        else:
                            fc.write('11'+'\n')
                    elif line[0:100] == '11\n':
                        if indf == 1:
                            fc.write('11'+'\n')
                            indf = 0
                        else:
                            fc.write('12'+'\n')
                    else:
                        if n <= 0:
                            if f2 == 1:
                                fc.write('494'+'\n')
                                fc.write('0'+'\n')
                                f2 = 0
                                f1 = 0
                            elif f1 == 1:
                                fc.write('494'+'\n')
                                f1 = 0
                            fc.write(line)
                        if n > 0:
                            f1 = 2
                            n -= 1
                            if n == 0:
                                f1 = 0
                    # pass  # process line i      #勿動
        except UnicodeDecodeError:
            with open(file, encoding='utf-8') as f:
                f1 = 0
                f2 = 0
                indf = 0
                for i, line in enumerate(f):
                    if line[0:11] in mfpath:
                        fi = int(mfpath.find(line[0:11])/15)
                        n = -1
                        f1 = 0
                        f2 = 0
                        indf = 0
                    if line[0:22] == 'CASA region (*Survey*)':
                        ts = line.split(' ')
                        ts[4] = str(round(float(ts[4]), 6))
                        ts[5] = str(round(float(ts[5]), 6))
                        fc.write(' '.join(ts))
                        fc.write('2'+'\n')
                        n = 1
                    # 若無篩選條件   indent於此if以下
                    elif line[0:20] == 'CASA comp (*Survey*)':
                        s = line.split(' ')
                        s[17] = str(round(float(s[17]), 6))
                        s[18] = str(round(float(s[17])-0.0001, 6))
                        s[19] = str(round(float(s[17])+0.0001, 6))
                        fc.write(' '.join(s))

                        s = line.split(' ')
                        s[2] = '(*Survey_*)'
                        s[8] = str(0)
                        s[9] = str(0.3)  # Area B=A*2
                        s[14] = str(0)
                        s[15] = str(1)  # FWHM B=A*1

                        s[17] = str(round(float(s[17]), 6))
                        s[18] = str(round(float(s[18]), 6))
                        s[17] = str(round(float(s[17])-0.05, 6))
                        s[18] = ts[4]
                        s[19] = ts[5]
                        fc.write(' '.join(s))
                    elif line[0:100] == 'XPS\n':
                        fc.write('XPS'+'\n')
                        indf = 1
                    elif line[0:100] == 'Al\n':
                        fc.write('Al'+'\n')
                        indf = 0
                    elif line[0:100] == '494\n' and f1 == 0:
                        if indf == 1:
                            fc.write('494'+'\n')
                            indf = 0
                        else:
                            f1 = 1
                            ti = i
                    elif line[0:100] == '0\n' and f1 == 1:
                        if ti == i-1:
                            f2 = 1
                            ti = i
                        else:
                            f1 = 0
                            ti = 0
                    elif line[0:100] == '1\n' and f2 == 1:
                        if ti == i-1:
                            ti = 0
                            f2 = 0
                            fc.write('494'+'\n')
                            fc.write('0'+'\n')
                            fc.write('1'+'\n')
                            for j in range(len(phi)):
                                fc.write(str(int(yy[fi][-j-1]))+'\n')
                            n = len(phi)
                        else:
                            f1 = 0
                            f2 = 0
                            ti = 0
                    elif line[0:100] == '8\n':
                        if indf == 1:
                            fc.write('8'+'\n')
                            indf = 0
                        else:
                            fc.write('9'+'\n')
                    elif line[0:100] == '9\n':
                        if indf == 1:
                            fc.write('9'+'\n')
                            indf = 0
                        else:
                            fc.write('10'+'\n')
                    elif line[0:100] == '10\n':
                        if indf == 1:
                            fc.write('10'+'\n')
                            indf = 0
                        else:
                            fc.write('11'+'\n')
                    elif line[0:100] == '11\n':
                        if indf == 1:
                            fc.write('11'+'\n')
                            indf = 0
                        else:
                            fc.write('12'+'\n')
                    else:
                        if n <= 0:
                            if f2 == 1:
                                fc.write('494'+'\n')
                                fc.write('0'+'\n')
                                f2 = 0
                                f1 = 0
                            elif f1 == 1:
                                fc.write('494'+'\n')
                                f1 = 0
                            fc.write(line)
                        if n > 0:
                            f1 = 2
                            n -= 1
                            if n == 0:
                                f1 = 0
                    # pass  # process line i      #勿動
        fc.close()
        os.chdir(cdir)
    print('Done')
    st.put('Done')
    lmgg.destroy()


def o_loadefit():
    file = fd.askopenfilename(title="Select EDC Fitted file", filetypes=(
        ("NPZ files", "*.npz"), ("VMS files", "*.vms"),))
    global h, m, efwhm, ffphi, fphi, epos, fk, limg, img, name, st, emin, emax
    global data, rdd, semin, semax, seaa1, seaa2, sefp, sefi, fpr, efi_x
    if len(file) > 2:
        fpr = 0
        rdd = file
        print('Loading...')
        st.put('Loading...')
    else:
        rdd = path
    if ".vms" in file:
        fphi = np.array([], dtype=float)
        efi_x = np.arange(len(phi))
        t_fwhm = []
        t_pos = []
        t_emax = []
        t_emin = []
        sefi = []
        semin = []
        semax = []
        sefp = [1 for i in range(len(phi))]
        tphi = []
        # os.chdir(rdd.removesuffix(rdd.split('/')[-1]))
        os.chdir(os.path.dirname(rdd))
        ff = open(name+'_edc_fitted_raw_data.txt', 'w',
                  encoding='utf-8')  # tab 必須使用 '\t' 不可"\t"
        if npzf:ff.write('k (2pi/A)'+'\t'+'FWHM (eV)'+'\t'+'Position (eV)'+'\n')
        else:ff.write('Angle (deg)'+'\t'+'FWHM (eV)'+'\t'+'Position (eV)'+'\n')
        with open(file) as f:
            for i, line in enumerate(f):
                if line[0:16] in efpath:
                    if '-' in line[0:16]:
                        fi = int(efpath.find(line[0:16])/17)
                    else:
                        fi = int(
                            len(phi)//2+(efpath.find(line[0:16])-17*len(phi)//2)/16)
                if line[0:22] == 'CASA region (*Survey*)':
                    temax = line.split(' ')[4]
                    temin = line.split(' ')[5]
                # 若無篩選條件   indent於此if以下
                if line[0:20] == 'CASA comp (*Survey*)':
                    tpos = line.split(' ')[17]
                    tfwhm = line.split(' ')[11]
                    area = line.split(' ')[5]
                    # temax=line.split(' ')[18]
                    # temin=line.split(' ')[19]

                    # 以下if判斷式區段---------可自訂篩選條件------可多層if-----注意indent----------條件篩選值可至 xxxx_fitted_raw_data.txt---檢查需求
                    ##################################################################################################
                    ##################################################################################################
                    # area tfwhm,tpos(1486.6+...)
                    if np.float64(area) > 0 and np.float64(tfwhm) < 3:
                        if (phi[fi] > 20.58 and np.float64(tpos) < 1486.6+0.023) or (phi[fi] < 20.58 and np.float64(tpos) > 1486.6+0.023) or 1 == 1:

                            # 內容勿動 indent小最內圈if一階
                            fphi = np.append(fphi, phi[fi])
                            t_fwhm.append(tfwhm)  # 內容勿動 indent小最內圈if一階
                            t_pos.append(tpos)  # 內容勿動 indent小最內圈if一階
                            t_emax.append(temax)
                            t_emin.append(temin)
                            if fi not in sefi:
                                tphi.append(phi[fi])
                                sefi.append(fi)
                                semin.append(temin)
                                semax.append(temax)
                            elif fi in sefi:
                                sefp[fi] += 1
                            if float(tpos) > 1000:
                                # 內容勿動 indent小最內圈if一階
                                ff.write(
                                    str(phi[fi])+'\t'+tfwhm+'\t'+str(np.float64(tpos)-1486.6)+'\n')
                            else:
                                ff.write(str(phi[fi])+'\t'+tfwhm +
                                         '\t'+str(-np.float64(tpos))+'\n')
                    ##################################################################################################
                    ##################################################################################################
                pass  # process line i      #勿動
        ff.close()
        efwhm = np.float64(t_fwhm)     # FWHM
        if np.max(np.float64(t_pos)) > 50:
            epos = np.float64(t_pos)-1486.6    # Pos
            emax = np.float64(t_emax)-1486.6
            emin = np.float64(t_emin)-1486.6
            semax = np.float64(semax)-1486.6
            semin = np.float64(semin)-1486.6
        else:
            epos = np.float64(t_pos)    # Pos
            emax = np.float64(t_emax)
            emin = np.float64(t_emin)
            semax = np.float64(semax)
            semin = np.float64(semin)
        ffphi = np.float64(k_offset.get())+fphi
        fk = (2*m*epos*1.602176634*10**-19)**0.5 * \
            np.sin(ffphi/180*np.pi)*10**-10/(h/2/np.pi)

        epos = res(fphi, epos)
        ffphi = res(fphi, ffphi)
        efwhm = res(fphi, efwhm)
        fk = res(fphi, fk)
        emin = res(fphi, emin)
        emax = res(fphi, emax)
        fphi = res(fphi, fphi)

        sefi = res(tphi, sefi)
        temin = res(tphi, semin)
        temax = res(tphi, semax)
        semin, semax = [], []
        seaa1 = np.float64(np.arange(4*len(phi)).reshape(len(phi), 4))
        seaa2 = np.float64(np.arange(8*len(phi)).reshape(len(phi), 8))
        ti = 0
        ti2 = 0
        for i in range(len(phi)):
            if i in sefi:
                semin.append(temin[ti2])
                semax.append(temax[ti2])
                ti2 += 1
                if sefp[i] == 2:  # 2peak以上要改
                    ti += 1
            else:
                semin.append(np.min(ev))
                semax.append(np.max(ev))
            a1 = [(semin[i]+semax[i])/2, 10, 5, int(base.get())]
            a2 = [(semin[i]+semax[i])/2, 10, 5, int(base.get()),
                  (semin[i]+semax[i])/2, 10, 0.5, int(base.get())]
            if i in sefi:
                if sefp[i] == 1:
                    a1 = [epos[ti], 10, efwhm[ti], int(base.get())]
                elif sefp[i] == 2:
                    a2 = [epos[ti-1], 10, efwhm[ti-1],
                          int(base.get()), epos[ti], 10, efwhm[ti], int(base.get())]
                ti += 1
            seaa1[i, :] = a1
            seaa2[i, :] = a2
        semin, semax = np.float64(semin), np.float64(semax)
        fpr = 1
        os.chdir(cdir)
    elif ".npz" in file:
        try:
            with np.load(file, 'rb') as f:
                rdd = str(f['path'])
                fphi = f['fphi']
                efwhm = f['efwhm']
                epos = f['epos']
                semin = f['semin']
                semax = f['semax']
                seaa1 = f['seaa1']
                seaa2 = f['seaa2']
                sefp = f['sefp']
                sefi = f['sefi']
            ffphi = np.float64(k_offset.get())+fphi
            fk = (2*m*epos*1.602176634*10**-19)**0.5 * \
                np.sin(ffphi/180*np.pi)*10**-10/(h/2/np.pi)
            fpr = 1
            tbasename = os.path.basename(rdd)
            if '.h5' in tbasename:
                data = load_h5(rdd)
                pr_load(data)
            elif '.json' in tbasename:
                data = load_json(rdd)
                pr_load(data)
            elif '.txt' in tbasename:
                data = load_txt(rdd)
                pr_load(data)
        except:
            pass
    if ".vms" in file or ".npz" in file:
        np.savez(os.path.join(cdir, '.MDC_cut', 'efit.npz'), ko=k_offset.get(), fphi=fphi, epos=epos, ffphi=ffphi, efwhm=efwhm, fk=fk,
                 emin=emin, emax=emax, semin=semin, semax=semax, seaa1=seaa1, seaa2=seaa2, sefp=sefp, sefi=sefi)
    limg.config(image=img[np.random.randint(len(img))])
    print('Done')
    st.put('Done')

def gl1(x, x0, a, w, y0):
    """
    Calculate the value of a Lorentzian function at a given x-coordinate.

    Parameters:
        x (float): The x-coordinate at which to evaluate the function.
        x0 (float): The center of the Lorentzian function.
        a (float): The amplitude of the Lorentzian function.
        w (float): The full width at half maximum (FWHM) of the Lorentzian function.
        y0 (float): The y-offset of the Lorentzian function.

    Returns:
        float: The value of the Lorentzian function at the given x-coordinate.
    """
    v = a/(1+(x-x0)**2/(1/2*w)**2)+y0
    return v

def gl2(x, x1, h1, w1, y1, x2, h2, w2, y2):
    """
    Calculates the sum of two Lorentzian functions.

    Parameters:
        x (float): The input value.
        x1 (float): The center of the first Lorentzian function.
        h1 (float): The height of the first Lorentzian function.
        w1 (float): The width of the first Lorentzian function.
        y1 (float): The y-offset of the first Lorentzian function.
        x2 (float): The center of the second Lorentzian function.
        h2 (float): The height of the second Lorentzian function.
        w2 (float): The width of the second Lorentzian function.
        y2 (float): The y-offset of the second Lorentzian function.

    Returns:
        float: The sum of the two Lorentzian functions.
    """
    v1 = h1/(1+(x-x1)**2/(1/2*w1)**2)+y1
    v2 = h2/(1+(x-x2)**2/(1/2*w2)**2)+y2
    return v1+v2

wr1 = 0
wr2 = 0
fa1 = 0
fa2 = 0

def pr_fitgl2(params, x, data):
    fitter0 = Minimizer(fgl2, params, fcn_args=(x, data))
    result = fitter0.minimize()
    pars = Parameters()
    pars.add('y1', value=0, vary=False)
    pars.add('y2', value=0, vary=False)
    pars.add('x1', value=result.params['x1'].value, vary=False)
    pars.add('x2', value=result.params['x2'].value, vary=False)
    pars.add('h1', value=result.params['h1'].value)
    pars.add('h2', value=result.params['h2'].value)
    pars.add('w1', value=result.params['w1'].value,
             min=result.params['w1'].min, max=result.params['w1'].max)
    pars.add('w2', value=result.params['w2'].value,
             min=result.params['w2'].min, max=result.params['w2'].max)
    return pars['h1'], pars['h2'], pars['w1'], pars['w2'], pars['x1'], pars['x2'], pars['y1'], pars['y2']


def fgl2_1(params, x, data):
    par = params
    h1, h2, w1, w2, x1, x2, y1, y2 = pr_fitgl2(par, x, data)
    area1 = np.sum(gl1(x, x1, h1, w1, y1))
    area2 = np.sum(gl1(x, x2, h2, w2, y2))
    return area2/fa2 - area1/fa1


def fgl2_a(params, x, data):
    h1 = params['h1']
    h2 = params['h2']
    x1 = params['x1']
    x2 = params['x2']
    w1 = params['w1']
    w2 = params['w2']
    y1 = params['y1']
    y2 = params['y2']
    model = (gl1(x, x1, h1, w1, y1) +
             gl1(x, x2, h2, w2, y2))
    area1 = np.sum(gl1(x, x1, h1, w1, y1))
    area2 = np.sum(gl1(x, x2, h2, w2, y2))
    return model - data + area1/fa1 - area2/fa2


def fgl2(params, x, data):
    h1 = params['h1']
    h2 = params['h2']
    x1 = params['x1']
    x2 = params['x2']
    w1 = params['w1']
    w2 = params['w2']
    y1 = params['y1']
    y2 = params['y2']
    model = (gl1(x, x1, h1, w1, y1) +
             gl1(x, x2, h2, w2, y2))
    return model - data


def fgl1(params, xx, data):
    h = params['h']
    x = params['x']
    w = params['w']
    y = params['y']
    model = gl1(xx, x, h, w, y)
    return model - data


def toa1():
    a1 = []
    a1.append(result.params['x'].value)
    a1.append(result.params['h'].value)
    a1.append(result.params['w'].value)
    a1.append(result.params['y'].value)
    return a1


def toa2(xx):
    global fswa1a2
    a2 = []
    a2.append(result.params['x1'].value)
    a2.append(result.params['h1'].value)
    a2.append(result.params['w1'].value)
    a2.append(result.params['y1'].value)
    a2.append(result.params['x2'].value)
    a2.append(result.params['h2'].value)
    a2.append(result.params['w2'].value)
    a2.append(result.params['y2'].value)
    
    fswa1a2 = 0
    i = mfiti.get()
    
    # fmxx[i, :len(xx)] = xx
    # x = fmxx[i, np.argwhere(fmxx[i, :] >= -20)].flatten()
    x = xx
    ty = gl1(x, *a2[:4])
    s1 = np.sum(np.array([((ty[i]+ty[i+1])/2)for i in range(len(x)-1)])
            # Area 1
            * np.array(([(x[i+1]-x[i])for i in range(len(x)-1)])))
    ty = gl1(x, *a2[-4:])
    s2 = np.sum(np.array([((ty[i]+ty[i+1])/2)for i in range(len(x)-1)])
            # Area 2
            * np.array(([(x[i+1]-x[i])for i in range(len(x)-1)])))
    if s1 < s2:
        t1, t2 = a2[:4], a2[-4:]
        a2 = np.array([t2, t1]).flatten()
        fswa1a2 = 1
    return a2


def swapc1c2():
    i = mfiti.get()
    if mfp[i] == 2 and fswa1a2 == 1:
        o_result = copy.deepcopy(result)
        a1=['x1', 'h1', 'w1', 'y1']
        a2=['x2', 'h2', 'w2', 'y2']
        for i in range(4):
            if o_result.params[a2[i]].expr is not None:
                if a1[i] in o_result.params[a2[i]].expr:
                    o_result.params[a2[i]].set(expr=o_result.params[a2[i]].expr.replace(a1[i], a2[i]))
            result.params[a1[i]].set(value=o_result.params[a2[i]].value, min=o_result.params[a2[i]].min, max=o_result.params[a2[i]].max, expr=o_result.params[a2[i]].expr, brute_step=o_result.params[a2[i]].brute_step, vary=o_result.params[a2[i]].vary)
            result.params[a2[i]].set(value=o_result.params[a1[i]].value, min=o_result.params[a1[i]].min, max=o_result.params[a1[i]].max, expr=o_result.params[a1[i]].expr, brute_step=o_result.params[a1[i]].brute_step, vary=o_result.params[a1[i]].vary)
    return result


fit_warn = 0


def checkfit():
    global fit_warn
    fit_warn = 0
    t = 0
    for i in result.params:
        par = result.params[i]
        if par.value != 0:
            try:
                if par.stderr/par.value > 0.2:  # uncertainty 20%
                    t += 1
            except TypeError:
                fit_warn = 1
    if t >= 2:
        fit_warn = 1


def putfitpar(inpars, modelpars=None, show_correl=True, min_correl=0.1,
              sort_pars=False, correl_mode='list'):
    from lmfit.parameter import Parameters
    if isinstance(inpars, Parameters):
        result, params = None, inpars
    if hasattr(inpars, 'params'):
        result = inpars
        params = inpars.params

    if sort_pars:
        if callable(sort_pars):
            key = sort_pars
        else:
            key = alphanumeric_sort
        parnames = sorted(params, key=key)
    else:
        parnames = list(params.keys())

    buff = []
    add = buff.append
    namelen = max(len(n) for n in parnames)
    for name in parnames:
        if name != 'y1' and name != 'y2':
            par = params[name]
            space = ' '*(namelen-len(name))
            nout = f"{name}:{space}"
            inval = '(init = ?)'
            if par.init_value is not None:
                inval = f'(init = {par.init_value:.7g})'
            if modelpars is not None and name in modelpars:
                inval = f'{inval}, model_value = {modelpars[name].value:.7g}'
            try:
                sval = gformat(par.value)
            except (TypeError, ValueError):
                sval = ' Non Numeric Value?'
            if par.stderr is not None:
                serr = gformat(par.stderr)
                try:
                    spercent = f'({abs(par.stderr/par.value):.2%})'
                except ZeroDivisionError:
                    spercent = ''
                sval = f'{sval} +/-{serr} {spercent}'

            if par.vary:
                add(f"    {nout} {sval} {inval}")
            elif par.expr is not None:
                add(f"    {nout} {sval} == '{par.expr}'")
            else:
                add(f"    {nout} {par.value: .7g} (fixed)")
    return buff


def fitpar1(result, lm1, lm2, lm3, lm4, lm5, lm6):
    s = putfitpar(result)
    x = s[0]
    h = s[1]
    w = s[2]
    for l, v in zip([lm1, lm2, lm3, lm4, lm5, lm6], [x, h, w, '', '', '']):
        l.config(text=v)
        l.config(anchor='w')


def fitpar2(result, lm1, lm2, lm3, lm4, lm5, lm6):
    s = putfitpar(result)
    for i in s:
        '''preprocess the string to put values in the labels'''
        if 'x1*xr1+xr2' in i:
            if xr2>=0:
                i = i.replace(' == \'x1*xr1+xr2\'', '='+str(xr1)+'*x1+'+str(xr2))
            else:
                i = i.replace(' == \'x1*xr1+xr2\'', '='+str(xr1)+'*x1-'+str(-xr2))
        if 'x2*xr1+xr2' in i:
            if xr2>=0:
                i = i.replace(' == \'x2*xr1+xr2\'', '='+str(xr1)+'*x2+'+str(xr2))
            else:
                i = i.replace(' == \'x2*xr1+xr2\'', '='+str(xr1)+'*x2-'+str(-xr2))
        if "(x2-xr2) / xr1" in i:
            if xr2>=0:
                i = i.replace(' == \'(x2-xr2) / xr1\'','=(x2-'+str(xr2) + ')/'+str(xr1))
            else:
                i = i.replace(' == \'(x2-xr2) / xr1\'','=(x2+'+str(-xr2) + ')/'+str(xr1))
        if "(x1-xr2) / xr1" in i:
            if xr2>=0:
                i = i.replace(' == \'(x1-xr2) / xr1\'','=(x1-'+str(xr2) + ')/'+str(xr1))
            else:
                i = i.replace(' == \'(x1-xr2) / xr1\'','=(x1+'+str(-xr2) + ')/'+str(xr1))
        if 'w1/wr1*wr2' in i:
            i = i.replace(' == \'w1/wr1*wr2\'', '=w1/'+str(wr1)+'*'+str(wr2))
        if 'w2/wr1*wr2' in i:
            i = i.replace(' == \'w2/wr1*wr2\'', '=w2/'+str(wr1)+'*'+str(wr2))
        if 'x1:' in i:
            x1 = i
        if 'x2:' in i:
            x2 = i
        if 'h1:' in i:
            h1 = i
        if 'h2:' in i:
            h2 = i
        if 'w1:' in i:
            w1 = i
        if 'w2:' in i:
            w2 = i
    for l, v in zip([lm1, lm2, lm3, lm4, lm5, lm6], [x1, x2, h1, h2, w1, w2]):
        l.config(text=v)
        l.config(anchor='w')

def lnr_bg(x: np.ndarray, n_samples=5) -> np.ndarray:
    while len(x) < 2*n_samples:
        if len(x) < 2:
            o = np.array([])
        n_samples -= 1
    left, right = np.mean(x[:n_samples]), np.mean(x[-n_samples:])
    o = np.ones(len(x))*np.mean([left, right])
    return o+mbgv


def shirley_bg(
        xps: np.ndarray, eps=1e-7, max_iters=50, n_samples=5) -> np.ndarray:
    global bg_warn
    """Core routine for calculating a Shirley background on np.ndarray data."""
    background = np.copy(xps)
    cumulative_xps = np.cumsum(xps, axis=0)
    total_xps = np.sum(xps, axis=0)

    rel_error = np.inf

    i_left = np.mean(xps[:n_samples], axis=0)
    i_right = np.mean(xps[-n_samples:], axis=0)

    iter_count = 0

    k = i_left - i_right
    for iter_count in range(max_iters):
        cumulative_background = np.cumsum(background, axis=0)
        total_background = np.sum(background, axis=0)

        new_bkg = np.copy(background)

        for i in range(len(new_bkg)):
            new_bkg[i] = i_right + k * (
                (total_xps - cumulative_xps[i] -
                 (total_background - cumulative_background[i]))
                / (total_xps - total_background + 1e-5)
            )

        rel_error = np.abs(np.sum(new_bkg, axis=0) -
                           total_background) / (total_background)

        background = new_bkg

        if np.any(rel_error < eps):
            break

    if (iter_count + 1) == max_iters:
        bg_warn = 1
        warnings.warn(
            "Shirley background calculation did not converge "
            + "after {} steps with relative error {}!".format(max_iters, rel_error)
        )
    else:
        bg_warn = 0

    return background


def fecgl2():
    global ebcgl2, emin, emax, flecgl2, eicgl2, efp
    i = efiti.get()
    flecgl2 *= -1
    if flecgl2 == 1:
        eicgl2 = i
        ebcgl2.config(text='End Add 2 Peaks', bg='red')
    else:
        ti = sorted([i, eicgl2])
        for i in np.linspace(ti[0], ti[1], ti[1]-ti[0]+1, dtype=int):
            efp[i] = 2
            if i not in efi_x:
                efi_x.append(i)
            if i in efi:
                efi.remove(i)
            if i in efi_err:
                efi_err.remove(i)
        ebcgl2.config(text='Start Add 2 Peaks', bg='white')
        efitplot()


def efitjob():
    global fexx, feyy, fex, fey, evv, eaa1, eaa2, emin, emax, efi, efi_err, efi_x, st, est, result, fa1, fa2, fit_warn, bg_warn
    if len(efi) < 1:
        efi, efi_err, efi_x = [], [], []
    else:
        efi, efi_err, efi_x = list(efi), list(efi_err), list(efi_x)
    pbar = tqdm.tqdm(total=len(phi), desc='Fitting EDC', colour='blue')
    for i in range(len(phi)):
        ebase[i] = int(base.get())  # 待調整
        fexx[i, :] = fexx[i, :]/fexx[i, :]*-50
        feyy[i, :] = feyy[i, :]/feyy[i, :]*-50
        angcut = data.sel(phi=phi[i], method='nearest')
        x = ev
        y = angcut.to_numpy().reshape(len(x))
        tx = x[np.argwhere(x >= emin[i])].flatten()
        xx = tx[np.argwhere(tx <= emax[i])].flatten()
        ty = y[np.argwhere(x >= emin[i])].flatten()
        yy = ty[np.argwhere(tx <= emax[i])].flatten()
        yy = np.where(yy > ebase[i], yy, ebase[i])
        try:
            # if (emin[i],emax[i])==(np.min(ev),np.max(ev)) and i not in efi:
            if i not in efi:
                if i not in efi_x:
                    efi_x.append(i)
                if i in efi:
                    efi.remove(i)
                if i in efi_err:
                    efi_err.remove(i)
                a1 = [(emin[i]+emax[i])/2, (np.max(y)-ebase[i]), 5, ebase[i]]
                a2 = [(emin[i]+emax[i])/2, (np.max(y)-ebase[i]), 5, ebase[i],
                      (emin[i]+emax[i])/2, (np.max(y)-ebase[i]), 5, ebase[i]]
            # elif (emin[i],emax[i])!=(np.min(ev),np.max(ev)):
            else:
                if efp[i] == 1:
                    if i in efi and i not in efi_err:
                        a1 = eaa1[i, :]
                    else:
                        a1, b = curve_fit(gl1, xx, yy-shirley_bg(yy), bounds=(
                            [emin[i], (np.max(y)-ebase[i])/10, 0, 0], [emax[i], np.max(y)-ebase[i]+1, 3, 0.01]))
                        fit_warn = 0
                elif efp[i] == 2:
                    if i in efi and i not in efi_err:
                        a2 = eaa1[i, :]
                    else:
                        pars = Parameters()
                        wr1, wr2 = int(ewf1.get()), int(ewf2.get())
                        fa1, fa2 = int(eaf1.get()), int(eaf2.get())
                        pars.add(
                            'x1', value=emin[i]+(emax[i]-emin[i])*0.3, min=emin[i], max=emax[i])
                        pars.add(
                            'x2', value=emax[i]-(emax[i]-emin[i])*0.3, min=emin[i], max=emax[i])
                        pars.add('h1', value=(
                            np.max(y)-ebase[i])+1, min=(np.max(y)-ebase[i])/10, max=np.max(y)-ebase[i]+1)
                        pars.add('h2', value=(
                            np.max(y)-ebase[i])+1, min=(np.max(y)-ebase[i])/10, max=np.max(y)-ebase[i]+1)
                        pars.add('w1', value=1, min=0, max=3)
                        if wr1 != 0 and wr2 != 0:
                            pars.add('wr1', value=wr1, vary=False)
                            pars.add('wr2', value=wr2, vary=False)
                            pars.add('w2', expr='w1/wr1*wr2')
                        else:
                            pars.add('w2', value=1, min=0, max=3)
                        pars.add('y1', value=0, vary=False)
                        pars.add('y2', value=0, vary=False)
                        fitter = Minimizer(
                            fgl2, pars, fcn_args=(xx, yy-shirley_bg(yy)))
                        result = fitter.minimize()
                        a2 = toa2(xx)
                        checkfit()
                        if fit_warn == 1:
                            t = 5
                            while t > 0 and fit_warn == 1:
                                result = fitter.minimize()
                                a2 = toa2(xx)
                                checkfit()
                                t -= 1

                if bg_warn == 0 and fit_warn == 0:  # shirley base line warn
                    if i not in efi:
                        efi.append(i)
                    if i in efi_x:
                        efi_x.remove(i)
                    if i in efi_err:
                        efi_err.remove(i)
                else:
                    if i not in efi_err:
                        efi_err.append(i)
                    if i in efi_x:
                        efi_x.remove(i)
                    if i in efi:
                        efi.remove(i)
        except RuntimeError:
            if i not in efi_err:
                efi_err.append(i)
            if i in efi_x:
                efi_x.remove(i)
            if i in efi:
                efi.remove(i)
            a1 = [(emin[i]+emax[i])/2, (np.max(y)-ebase[i]), 5, ebase[i]]
            a2 = [(emin[i]+emax[i])/2, (np.max(y)-ebase[i]), 5, ebase[i],
                  (emin[i]+emax[i])/2, (np.max(y)-ebase[i]), 5, ebase[i]]

        fexx[i, :len(xx)] = xx
        feyy[i, :len(yy)] = yy
        fex[i, :] = x
        fey[i, :] = y
        evv[i] = phi[i]
        if efp[i] == 1:
            eaa1[i, :] = a1
        elif efp[i] == 2:
            eaa2[i, :] = a2
        pbar.update(1)
        # print('Fitting EDC '+str(round((i+1)/len(phi)*100))+'%'+' ('+str(len(phi))+')')
        st.put('Fitting EDC '+str(round((i+1)/len(phi)*100)) +
               '%'+' ('+str(len(phi))+')')
        est.put('Fitting EDC '+str(round((i+1)/len(phi)*100)) +
                '%'+' ('+str(len(phi))+')')
    pbar.close()
    efitplot()


def efit():
    global fexx, feyy, fex, fey, evv, eaa1, eaa2, emin, emax, efi, efi_err, efi_x, result, fa1, fa2, fit_warn, bg_warn
    efi, efi_err, efi_x = list(efi), list(efi_err), list(efi_x)
    i = efiti.get()
    ebase[i] = int(base.get())  # 待調整
    fexx[i, :] = fexx[i, :]/fexx[i, :]*-50
    feyy[i, :] = feyy[i, :]/feyy[i, :]*-50
    angcut = data.sel(phi=phi[i], method='nearest')
    x = ev
    y = angcut.to_numpy().reshape(len(x))
    tx = x[np.argwhere(x >= emin[i])].flatten()
    xx = tx[np.argwhere(tx <= emax[i])].flatten()
    ty = y[np.argwhere(x >= emin[i])].flatten()
    yy = ty[np.argwhere(tx <= emax[i])].flatten()
    yy = np.where(yy > ebase[i], yy, ebase[i])
    try:
        if efp[i] == 1:
            a1, b = curve_fit(gl1, xx, yy-shirley_bg(yy), bounds=(
                [emin[i], (np.max(y)-ebase[i])/10, 0, 0], [emax[i], np.max(y)-ebase[i]+1, 3, 0.01]))
            fit_warn = 0
        elif efp[i] == 2:
            pars = Parameters()
            wr1, wr2 = int(ewf1.get()), int(ewf2.get())
            fa1, fa2 = int(eaf1.get()), int(eaf2.get())
            pars.add('x1', value=emin[i]+(emax[i]-emin[i])
                     * 0.4, min=emin[i], max=emax[i])
            pars.add('x2', value=emax[i]-(emax[i]-emin[i])
                     * 0.4, min=emin[i], max=emax[i])
            pars.add('h1', value=(
                np.max(y)-ebase[i])+1, min=(np.max(y)-ebase[i])/10, max=np.max(y)-ebase[i]+1)
            pars.add('h2', value=(
                np.max(y)-ebase[i])+1, min=(np.max(y)-ebase[i])/10, max=np.max(y)-ebase[i]+1)
            pars.add('w1', value=1, min=0, max=3)
            if wr1 != 0 and wr2 != 0:
                pars.add('wr1', value=wr1, vary=False)
                pars.add('wr2', value=wr2, vary=False)
                pars.add('w2', expr='w1/wr1*wr2')
            else:
                pars.add('w2', value=1, min=0, max=3)
            pars.add('y1', value=0, vary=False)
            pars.add('y2', value=0, vary=False)
            fitter = Minimizer(fgl2, pars, fcn_args=(xx, yy-shirley_bg(yy)))
            result = fitter.minimize()
            a2 = toa2(xx)
            checkfit()
            if fit_warn == 1:
                t = 5
                while t > 0 and fit_warn == 1:
                    result = fitter.minimize()
                    a2 = toa2(xx)
                    checkfit()
                    t -= 1
            report_fit(result)

        if (emin[i], emax[i]) == (np.min(ev), np.max(ev)):
            if i not in efi_x:
                efi_x.append(i)
            if i in efi:
                efi.remove(i)
            if i in efi_err:
                efi_err.remove(i)
        elif (emin[i], emax[i]) != (np.min(ev), np.max(ev)):
            if bg_warn == 0 and fit_warn == 0:  # shirley base line warn
                if i not in efi:
                    efi.append(i)
                if i in efi_x:
                    efi_x.remove(i)
                if i in efi_err:
                    efi_err.remove(i)
            else:
                if i not in efi_err:
                    efi_err.append(i)
                if i in efi_x:
                    efi_x.remove(i)
                if i in efi:
                    efi.remove(i)
    except RuntimeError:
        if i not in efi_err:
            efi_err.append(i)
        if i in efi_x:
            efi_x.remove(i)
        if i in efi:
            efi.remove(i)
        a1 = [(emin[i]+emax[i])/2, (np.max(y)-ebase[i]), 5, ebase[i]]
        a2 = [(emin[i]+emax[i])/2, (np.max(y)-ebase[i]), 5, ebase[i],
              (emin[i]+emax[i])/2, (np.max(y)-ebase[i]), 5, ebase[i]]

    fexx[i, :len(xx)] = xx
    feyy[i, :len(yy)] = yy
    fex[i, :] = x
    fey[i, :] = y
    evv[i] = phi[i]
    if efp[i] == 1:
        eaa1[i, :] = a1
    elif efp[i] == 2:
        eaa2[i, :] = a2


def fermv():
    global ebrmv, flermv, eirmv, emin, emax, efi, efi_err, efi_x, cei, efp
    i = efiti.get()
    flermv *= -1
    if flermv == 1:
        eirmv = i
        ebrmv.config(text='End Remove', bg='red')
    else:
        ti = sorted([i, eirmv])
        for i in np.linspace(ti[0], ti[1], ti[1]-ti[0]+1, dtype=int):
            efp[i] = 1
            emin[i], emax[i] = np.min(ev), np.max(ev)
            if i not in efi_x:
                efi_x.append(i)
            if i in efi:
                efi.remove(i)
            if i in efi_err:
                efi_err.remove(i)
            if i in cei:
                cei.remove(i)
        eplfi()
        ebrmv.config(text='Start Remove', bg='white')
        efitplot()


def feedmove(event):
    global eedxdata, eedydata, eedfitout
    if event.xdata != None:
        eedfitout.get_tk_widget().config(cursor="crosshair")
        eedxdata.config(text='xdata:'+str(' %.3f' % event.xdata))
        eedydata.config(text='ydata:'+str(' %.3f' % event.ydata))
    else:
        eedfitout.get_tk_widget().config(cursor="")
        try:
            eedxdata.config(text='xdata:')
            eedydata.config(text='ydata:')
        except NameError:
            pass


def saveefit():
    global epos, efwhm, fphi, efwhm, epos, semin, semax, seaa1, seaa2, sefp, sefi
    path = fd.asksaveasfilename(title="Save EDC Fitted Data", initialdir=dpath,
                                initialfile=name+"_efit", filetype=[("NPZ files", ".npz"),], defaultextension=".npz")
    try:
        egg.focus_force()
    except:
        pass
    if len(path) > 2:
        eendg.destroy()
        efwhm = res(sefi, efwhm)
        epos = res(sefi, epos)
        # semin = res(sefi, semin)
        # semax = res(sefi, semax)
        # sefp = res(sefi, sefp)
        fphi = res(sefi, fphi)
        sefi = res(sefi, sefi)
        np.savez(path, path=dpath, fphi=fphi, efwhm=efwhm, epos=epos, semin=semin,
                 semax=semax, seaa1=seaa1, seaa2=seaa2, sefp=sefp, sefi=sefi)
    else:
        eendg.focus_force()

scei = []


def feend():
    global epos, efwhm, fphi, eedxdata, eedydata, eedfitout, semin, semax, seaa1, seaa2, sefp, sefi, fk, fpr, scei, eendg
    fphi, epos, efwhm = [], [], []
    semin, semax, seaa1, seaa2 = emin, emax, eaa1, eaa2
    sefp = efp
    sefi = efi
    for i, v in enumerate(efi):
        if efp[v] == 1:
            fphi.append(phi[v])
            epos.append(eaa1[v, 0])
            efwhm.append(eaa1[v, 2])
        elif efp[v] == 2:
            fphi.append(phi[v])
            fphi.append(phi[v])
            epos.append(eaa2[v, 0])
            epos.append(eaa2[v, 4])
            efwhm.append(eaa2[v, 2])
            efwhm.append(eaa2[v, 6])
            
    efwhm = res(sefi, efwhm)
    epos = res(sefi, epos)
    # semin = res(sefi, semin)
    # semax = res(sefi, semax)
    # sefp = res(sefi, sefp)
    fphi = res(sefi, fphi)
    sefi = res(sefi, sefi)
            
    fphi, epos, efwhm = np.float64(fphi), np.float64(epos), np.float64(efwhm)
    ffphi = np.float64(k_offset.get())+fphi
    fk = (2*m*epos*1.602176634*10**-19)**0.5 * \
        np.sin(ffphi/180*np.pi)*10**-10/(h/2/np.pi)
    scei = cei
    fpr = 1
    if 'eendg' in globals():
        eendg.destroy()
    eendg = tk.Toplevel(g)
    eendg.title('EDC Lorentz Fit Result')
    fr = tk.Frame(master=eendg, bd=5)
    fr.grid(row=0, column=0)
    efitfig = Figure(figsize=(8*scale, 6*scale), layout='constrained')
    eedfitout = FigureCanvasTkAgg(efitfig, master=fr)
    eedfitout.get_tk_widget().grid(row=0, column=0)
    eedfitout.mpl_connect('motion_notify_event', feedmove)

    a = efitfig.subplots()
    a.scatter(fphi, epos+efwhm/2, c='r', s=scale*scale*10)
    a.scatter(fphi, epos-efwhm/2, c='r', s=scale*scale*10)
    a.scatter(fphi, epos, c='k', s=scale*scale*10)
    if npzf:a.set_xlabel(r'k ($\frac{2\pi}{\AA}$)')
    else:a.set_xlabel('Angle (deg)')
    a.set_ylabel('Kinetic Energy (eV)', fontsize=size(14))
    eedfitout.draw()

    xydata = tk.Frame(master=fr, bd=2)
    xydata.grid(row=1, column=0)

    eedxdata = tk.Label(xydata, text='xdata:', font=(
        "Arial", size(12), "bold"), width='15', height='1', bd=10, bg='white')
    eedxdata.grid(row=0, column=0)
    eedydata = tk.Label(xydata, text='ydata:', font=(
        "Arial", size(12), "bold"), width='15', height='1', bd=10, bg='white')
    eedydata.grid(row=0, column=1)

    bsave = tk.Button(master=eendg, text='Save Fitted Data', command=saveefit,
                      width=30, height=1, font=('Arial', size(14), "bold"), bg='white', bd=10)
    bsave.grid(row=1, column=0)

    eendg.update()


def fefall():
    t = threading.Thread(target=efitjob)
    t.daemon = True
    t.start()


def func_cei():
    global cei, emin, emax
    if efiti.get() not in cei:
        cei.append(efiti.get())
    if len(cei) >= 2:
        cei.sort()
        for i in range(len(cei)-1):
            emin[cei[i]:cei[i+1] +
                 1] = np.linspace(emin[cei[i]], emin[cei[i+1]], cei[i+1]-cei[i]+1)
            emax[cei[i]:cei[i+1] +
                 1] = np.linspace(emax[cei[i]], emax[cei[i+1]], cei[i+1]-cei[i]+1)


def fchei(*e):
    global efitout, edxdata, edydata
    try:
        efitout.get_tk_widget().delete('rec')
        edxdata.config(text='dx:')
        edydata.config(text='dy:')
    except:
        pass
    efitplot()


def eplfi():
    global eiout, eifig, elind, erind
    i = efiti.get()
    eifig.clear()
    eiax = eifig.add_axes([0, 0, 1, 1])
    eiax.scatter(efi_x, [0 for i in range(len(efi_x))], marker='|', c='k')
    eiax.scatter(efi, [0 for i in range(len(efi))], marker='|', c='b')
    eiax.scatter(efi_err, [0 for i in range(len(efi_err))], marker='|', c='r')
    if i in efi_x:
        elind.config(bg='white')
        erind.config(bg='white')
    if i in efi:
        elind.config(bg='blue')
        erind.config(bg='blue')
    if i in efi_err:
        elind.config(bg='red')
        erind.config(bg='red')
    try:
        eiax.set_xlim([np.min([efi, efi_x, efi_err]),
                      np.max([efi, efi_x, efi_err])])
    except ValueError:
        pass
    eiax.set_yticks([])
    eiout.draw()


def efitplot():  # efiti Scale
    global efitax, exl, eyl, elmin, elmax, texl, emin, emax
    i = efiti.get()
    efitfig.clear()
    efitax = efitfig.subplots()
    # 'Pos:'+str(round(eaa1[i,0],3))+' (eV)'+', FWHM:'+str(round(eaa1[i,2],3))+' (eV)'
    if npzf:
        efitax.set_title('k:'+str(round(evv[i], 3))+r' ($\frac{2\pi}{\AA}$)'+', '+str(efp[i])+' Peak')
    else:
        efitax.set_title('Deg:'+str(round(evv[i], 3))+r' $^{\circ}$'+', '+str(efp[i])+' Peak')
    efitax.scatter(fex[i, :], fey[i, :], c='k', s=scale*scale*4)
    sbg = shirley_bg(feyy[i, np.argwhere(feyy[i, :] >= -20)])
    if efp[i] == 1:
        if eaa1[i, 0] == (emin[i]+emax[i])/2 and eaa1[i, 2] == 5:
            fl, = efitax.plot(fexx[i, np.argwhere(fexx[i, :] >= -20)], gl1(
                fexx[i, np.argwhere(fexx[i, :] >= -20)], *eaa1[i, :])+sbg, 'r-', lw=2)
        else:
            gl1_1 = np.float64(np.concatenate(
                gl1(fexx[i, np.argwhere(fexx[i, :] >= -20)], *eaa1[i, :]))+sbg.transpose())
            fl, = efitax.plot(fexx[i, np.argwhere(fexx[i, :] >= -20)], gl1(
                fexx[i, np.argwhere(fexx[i, :] >= -20)], *eaa1[i, :])+sbg, 'b-', lw=2)
            efitax.fill_between(np.concatenate((fexx[i, np.argwhere(fexx[i, :] >= -20)])), np.float64(
                np.concatenate(sbg.transpose())), np.concatenate(gl1_1), facecolor='blue', alpha=0.5)

    elif efp[i] == 2:
        if eaa2[i, 0] == (emin[i]+emax[i])/2 and eaa2[i, 2] == 5:
            fl, = efitax.plot(fexx[i, np.argwhere(fexx[i, :] >= -20)], gl2(
                fexx[i, np.argwhere(fexx[i, :] >= -20)], *eaa2[i, :])+sbg, 'r-', lw=2)
        else:
            gl2_1 = np.float64(np.concatenate(
                gl1(fexx[i, np.argwhere(fexx[i, :] >= -20)], *eaa2[i, :4]))+sbg.transpose())
            gl2_2 = np.float64(np.concatenate(
                gl1(fexx[i, np.argwhere(fexx[i, :] >= -20)], *eaa2[i, -4:]))+sbg.transpose())
            fl, = efitax.plot(fexx[i, np.argwhere(fexx[i, :] >= -20)], gl2(
                fexx[i, np.argwhere(fexx[i, :] >= -20)], *eaa2[i, :])+sbg, 'b-', lw=2)
            efitax.fill_between(np.concatenate(fexx[i, np.argwhere(fexx[i, :] >= -20)]), np.float64(
                np.concatenate(sbg.transpose())), np.concatenate(gl2_1), facecolor='green', alpha=0.5)
            efitax.fill_between(np.concatenate(fexx[i, np.argwhere(fexx[i, :] >= -20)]), np.float64(
                np.concatenate(sbg.transpose())), np.concatenate(gl2_2), facecolor='purple', alpha=0.5)

    if bg_warn == 1:  # shirley base line warn
        efitax.plot(fexx[i, np.argwhere(fexx[i, :] >= -20)], sbg, 'r--')
    else:
        efitax.plot(fexx[i, np.argwhere(fexx[i, :] >= -20)], sbg, 'g--')

    efitax.scatter(fexx[i, np.argwhere(fexx[i, :] >= -20)],
                   feyy[i, np.argwhere(feyy[i, :] >= -20)], c='g', s=scale*scale*4)
    if (emin[i], emax[i]) != (np.min(ev), np.max(ev)):
        elmin = efitax.axvline(emin[i], c='r')
        elmax = efitax.axvline(emax[i], c='r')
    else:
        elmin = efitax.axvline(emin[i], c='grey')
        elmax = efitax.axvline(emax[i], c='grey')
        fl.set_alpha(0.3)

    efitax.set_xlabel('Kinetic Energy (eV)', fontsize=size(14))
    efitax.set_ylabel('Intensity (Counts)', fontsize=size(14))
    efitax.set_xticklabels(np.round(efitax.get_xticks(),2), fontsize=size(12))
    efitax.set_yticklabels(np.round(efitax.get_yticks(),2), fontsize=size(12))
    exl = efitax.get_xlim()
    eyl = efitax.get_ylim()
    texl = np.copy(exl)
    efitout.draw()
    eplfi()


def emove(event):
    global exdata, eydata, edxdata, edydata, x2, y2, efitax, efitout, elmin, elmax, emin, emax, tpx1, tpx2, tpy1, tpy2, tx2, ty2
    if event.xdata != None:
        if emof == -1:
            x2, y2 = event.xdata, event.ydata
            px2, py2 = event.x, event.y

            if felmin == 1 and temin+(x2-x1) >= exl[0] and temin+(x2-x1) <= exl[1]:
                elmin.remove()
                elmin = efitax.axvline(x2, c='r')
                emin[efiti.get()] = x2
                elmax.set_color('r')
                efitout.draw()
            elif felmax == 1 and temax+(x2-x1) >= exl[0] and temax+(x2-x1) <= exl[1]:
                elmax.remove()
                elmax = efitax.axvline(x2, c='r')
                emax[efiti.get()] = x2
                elmin.set_color('r')
                efitout.draw()
            elif feregion == 1 and temin+(x2-x1) >= exl[0] and temax+(x2-x1) <= exl[1]:
                elmin.remove()
                elmin = efitax.axvline(temin+(x2-x1), c='r')
                emin[efiti.get()] = temin+(x2-x1)
                elmax.remove()
                elmax = efitax.axvline(temax+(x2-x1), c='r')
                emax[efiti.get()] = temax+(x2-x1)
                efitout.draw()
            elif felmin == 0 and felmax == 0 and feregion == 0:
                efitout.get_tk_widget().delete('rec')
                tpx1, tpy1, tpx2, tpy2 = px1, py1, px2, py2
                efitout.get_tk_widget().create_rectangle(
                    (px1, 600-py1), (px2, 600-py2), outline='grey', width=2, tag='rec')
                [tpx1, tpx2] = sorted([tpx1, tpx2])
                [tpy1, tpy2] = sorted([tpy1, tpy2])
                tx2, ty2 = x2, y2
                edxdata.config(text='dx:'+str(' %.3f' % abs(x2-x1)))
                edydata.config(text='dy:'+str(' %.3f' % abs(y2-y1)))
        exdata.config(text='xdata:'+str(' %.3f' % event.xdata))
        eydata.config(text='ydata:'+str(' %.3f' % event.ydata))
    else:
        efitout.get_tk_widget().config(cursor="")
        try:
            exdata.config(text='xdata:')
            eydata.config(text='ydata:')
        except NameError:
            pass

    # print("event.xdata", event.xdata)
    # print("event.ydata", event.ydata)
    # print("event.inaxes", event.inaxes)
    # print("x", event.x)
    # print("y", event.y)
emof = 1


def epress(event):
    # event.button 1:left 3:right 2:mid
    # event.dblclick : bool
    # print('%s click: button=%d, x=%d, y=%d, xdata=%f, ydata=%f' %
    #       ('double' if event.dblclick else 'single', event.button,
    #        event.x, event.y, event.xdata, event.ydata))
    global x1, y1, emof, px1, py1, efitax, efitout, elmin, elmax, felmin, felmax, cei, ebase, feregion, temin, temax, tx1, ty1
    if event.button == 1 and event.inaxes:
        x1, y1 = event.xdata, event.ydata
        px1, py1 = event.x, event.y
        felmin, felmax, feregion = 0, 0, 0
        temin, temax = emin[efiti.get()], emax[efiti.get()]
        if efitout.get_tk_widget().find_withtag('rec') != () and px1 > tpx1 and px1 < tpx2 and py1 > tpy1 and py1 < tpy2:
            pass
        elif abs(x1-emin[efiti.get()]) < (texl[1]-texl[0])/80:
            felmin = 1

        elif abs(x1-emax[efiti.get()]) < (texl[1]-texl[0])/80:
            felmax = 1

        elif x1 > emin[efiti.get()] and x1 < emax[efiti.get()]:
            feregion = 1

        elif efitout.get_tk_widget().find_withtag('rec') == ():
            tx1, ty1 = x1, y1
        emof = -1
    elif event.button == 3:
        try:
            efitout.get_tk_widget().delete('rec')
            edxdata.config(text='dx:')
            edydata.config(text='dy:')
        except:
            pass
        efitax.set_xlim(exl)
        efitax.set_ylim(eyl)
        efitout.draw()
        emof = 1


def erelease(event):
    global x1, y1, x2, y2, emof, efitout, efitax, felmax, felmin, elmin, elmax, emin, emax, feregion, texl
    if event.button == 1 and emof == -1 and event.inaxes:
        x2, y2 = event.xdata, event.ydata
        if emin[efiti.get()] > emax[efiti.get()]:
            emin[efiti.get()], emax[efiti.get()
                                    ] = emax[efiti.get()], emin[efiti.get()]
            elmin, elmax = elmax, elmin
        else:
            emin[efiti.get()], emax[efiti.get()
                                    ] = emin[efiti.get()], emax[efiti.get()]
            elmin, elmax = elmin, elmax
        if felmin == 0 and felmax == 0 and feregion == 0 and (x2, y2) == (x1, y1) and px1 > tpx1 and px1 < tpx2 and py1 > tpy1 and py1 < tpy2:
            try:
                efitout.get_tk_widget().delete('rec')
            except:
                pass
            efitax.set_xlim(sorted([tx1, tx2]))
            efitax.set_ylim(sorted([ty1, ty2]))
            texl = sorted([x1, x2])
            efitout.draw()
        elif felmin == 1 or felmax == 1 or feregion == 1:
            func_cei()
            x1, x2, y1, y2 = [], [], [], []
            efit()
            efitplot()
        emof = 1


def testate():
    try:
        while True:
            estate.config(text=str(est.get()))
    except KeyboardInterrupt:
        pass


def eflind():
    global efiti
    ti = efiti.get()
    if ti in efi:
        for i in range(ti+1):
            if ti-i not in efi:
                efiti.set(ti-i)
                break
    elif ti in efi_err:
        for i in range(ti+1):
            if ti-i not in efi_err:
                efiti.set(ti-i)
                break
    elif ti in efi_x:
        for i in range(ti+1):
            if ti-i in efi or ti-i in efi_err:
                efiti.set(ti-i)
                break
        if i == ti and ti != 0:
            efiti.set(ti-1)


def efrind():
    global efiti
    ti = efiti.get()
    if ti in efi:
        for i in range(len(phi)-ti):
            if ti+i not in efi:
                efiti.set(ti+i)
                break
    elif ti in efi_err:
        for i in range(len(phi)-ti):
            if ti+i not in efi_err:
                efiti.set(ti+i)
                break
    elif ti in efi_x:
        for i in range(len(phi)-ti):
            if ti+i in efi or ti+i in efi_err:
                efiti.set(ti+i)
                break
        if i == len(phi)-ti-1 and ti != len(phi)-1:
            efiti.set(ti+1)


def o_fewf1(*e):
    global ewf1
    if '' == ewf1.get():
        ewf1.set('0')
        ein_w1.select_range(0, 1)


def fewf1(*e):
    t = threading.Thread(target=o_fewf1)
    t.daemon = True
    t.start()


def o_fewf2(*e):
    global ewf2
    if '' == ewf2.get():
        ewf2.set('0')
        ein_w2.select_range(0, 1)


def fewf2(*e):
    t = threading.Thread(target=o_fewf2)
    t.daemon = True
    t.start()


def o_feaf1(*e):
    global eaf1
    if '' == eaf1.get():
        eaf1.set('0')
        ein_a1.select_range(0, 1)


def feaf1(*e):
    t = threading.Thread(target=o_feaf1)
    t.daemon = True
    t.start()


def o_feaf2(*e):
    global eaf2
    if '' == eaf2.get():
        eaf2.set('0')
        ein_a2.select_range(0, 1)


def feaf2(*e):
    t = threading.Thread(target=o_feaf2)
    t.daemon = True
    t.start()


def ejob():     # MDC Fitting GUI
    global g, efiti, efitfig, efitout, egg, exdata, eydata, edxdata, edydata, eiout, eifig, efi, efi_err, efi_x, ebrmv, flermv, ebcgl2, efp, flecgl2, fpr, est, estate, ewf1, ewf2, eaf1, eaf2, elind, erind, ein_w1, ein_w2, ein_a1, ein_a2
    egg = tk.Toplevel(g, bg='white')
    edpi = egg.winfo_fpixels('1i')
    t_sc_w = windll.user32.GetSystemMetrics(0)
    tx = t_sc_w if g.winfo_x()+g.winfo_width()/2 > t_sc_w else 0
    egg.geometry(f"1900x1000+{tx}+{sc_y}")
    egg.title('EDC Lorentz Fit')
    est = queue.Queue(maxsize=0)
    estate = tk.Label(egg, text='', font=(
        "Arial", size(14), "bold"), bg="white", fg="black")
    estate.grid(row=0, column=0)

    fr = tk.Frame(master=egg, bg='white')
    fr.grid(row=1, column=0)
    frind = tk.Frame(master=fr, bg='white')
    frind.grid(row=0, column=0)
    elind = tk.Button(frind, text='<<', command=eflind, width=10,
                      height=5, font=('Arial', size(12), "bold"), bg='white')
    elind.grid(row=0, column=0)
    erind = tk.Button(frind, text='>>', command=efrind, width=10,
                      height=5, font=('Arial', size(12), "bold"), bg='white')
    erind.grid(row=0, column=2)

    efiti = tk.IntVar()
    efiti.set(0)
    efiti.trace_add('write', fchei)
    if ScaleFactor <= 100:
        tlength = int(1/0.975*6*edpi)  # 100
        twidth = int(1/0.975*0.2*edpi)
    elif ScaleFactor <= 125:
        tlength = int(1/0.985*6*edpi)  # 125
        twidth = int(1/0.985*0.2*edpi)
    elif ScaleFactor <= 150:
        tlength = int(1*6*edpi)  # 150
        twidth = int(1*0.2*edpi)
    elif ScaleFactor <= 175:
        tlength = int(0.99*6*edpi)  # 175
        twidth = int(0.99*0.2*edpi)
    elif ScaleFactor <= 200:
        tlength = int(0.985*6*edpi)  # 200
        twidth = int(0.985*0.2*edpi)
    elif ScaleFactor <= 225:
        tlength = int(0.98*6*edpi)  # 225
        twidth = int(0.98*0.2*edpi)
    elif ScaleFactor <= 250:
        tlength = int(0.977*6*edpi)  # 250
        twidth = int(0.977*0.2*edpi)
    elif ScaleFactor <= 275:
        tlength = int(0.975*6*edpi)  # 275
        twidth = int(0.975*0.2*edpi)
    elif ScaleFactor <= 300:
        tlength = int(0.97*6*edpi)  # 300
        twidth = int(0.97*0.2*edpi)
    chi = tk.Scale(frind, label='Index', from_=0, to=len(phi)-1, orient='horizontal',
                   variable=efiti, state='active', bg='white', fg='black', length=tlength, width=twidth, resolution=1)
    chi.grid(row=0, column=1)

    efi, efi_err, efi_x = [], [], [i for i in range(len(phi))]
    eifig = Figure(figsize=(6*scale, 0.2*scale), layout='tight')
    eiout = FigureCanvasTkAgg(eifig, master=frind)
    eiout.get_tk_widget().grid(row=1, column=1)

    efitfig = Figure(figsize=(8*scale, 6*scale), layout='constrained')
    efitout = FigureCanvasTkAgg(efitfig, master=fr)
    efitout.get_tk_widget().grid(row=1, column=0)
    efitout.mpl_connect('motion_notify_event', emove)
    efitout.mpl_connect('button_press_event', epress)
    efitout.mpl_connect('button_release_event', erelease)

    xydata = tk.Frame(master=fr, bd=5, bg='white')
    xydata.grid(row=2, column=0)

    exdata = tk.Label(xydata, text='xdata:', font=(
        "Arial", size(12), "bold"), width='15', height='1', bd=5, bg='white')
    exdata.grid(row=0, column=0)
    eydata = tk.Label(xydata, text='ydata:', font=(
        "Arial", size(12), "bold"), width='15', height='1', bd=5, bg='white')
    eydata.grid(row=0, column=1)
    edxdata = tk.Label(xydata, text='dx:', font=(
        "Arial", size(12), "bold"), width='15', height='1', bd=5, bg='white')
    edxdata.grid(row=0, column=2)
    edydata = tk.Label(xydata, text='dy:', font=(
        "Arial", size(12), "bold"), width='15', height='1', bd=5, bg='white')
    edydata.grid(row=0, column=3)

    frpara = tk.Frame(master=egg, bd=5, bg='white')
    frpara.grid(row=1, column=1)
    try:
        if fpr == 1:
            efp = list(sefp)
            efi = list(sefi)
        else:
            efp = [1 for i in range(len(phi))]
    except:
        efp = [1 for i in range(len(phi))]
    flecgl2 = -1
    frpara00 = tk.Frame(master=frpara, bd=5, bg='white')
    frpara00.grid(row=0, column=0)
    l1 = tk.Label(frpara00, text='Index Operation', font=(
        "Arial", size(12), "bold"), width='15', height='1', bd=5, bg='white')
    l1.grid(row=0, column=0)
    froperind = tk.Frame(master=frpara00, bd=5, bg='white')
    froperind.grid(row=1, column=0)
    ebcgl2 = tk.Button(froperind, text='Start Add 2 Peaks', command=fecgl2,
                       width=30, height=1, font=('Arial', size(16), "bold"), bg='white')
    ebcgl2.grid(row=0, column=0)
    ebrmv = tk.Button(froperind, text='Start Remove', command=fermv,
                      width=30, height=1, font=('Arial', size(16), "bold"), bg='white')
    ebrmv.grid(row=0, column=1)

    frwr = tk.Frame(master=froperind, bd=5, bg='white')
    frwr.grid(row=1, column=0)
    l2 = tk.Label(frwr, text='FWHM Ratio', font=(
        "Arial", size(12), "bold"), width='15', height='1', bd=5, bg='white')
    l2.grid(row=0, column=1)
    l3 = tk.Label(frwr, text=':', font=("Arial", size(12), "bold"),
                  width='15', height='1', bd=5, bg='white')
    l3.grid(row=1, column=1)
    ewf1 = tk.StringVar()
    ewf1.set('0')
    ewf1.trace_add('write', fewf1)
    ein_w1 = tk.Entry(frwr, font=("Arial", size(12), "bold"),
                      width=7, textvariable=ewf1, bd=5)
    ein_w1.grid(row=1, column=0)
    ewf2 = tk.StringVar()
    ewf2.set('0')
    ewf2.trace_add('write', fewf2)
    ein_w2 = tk.Entry(frwr, font=("Arial", size(12), "bold"),
                      width=7, textvariable=ewf2, bd=5)
    ein_w2.grid(row=1, column=2)

    frar = tk.Frame(master=froperind, bd=5, bg='white')
    frar.grid(row=2, column=0)
    l2 = tk.Label(frar, text='Area Ratio', font=(
        "Arial", size(12), "bold"), width='15', height='1', bd=5, bg='white')
    l2.grid(row=0, column=1)
    l3 = tk.Label(frar, text=':', font=("Arial", size(12), "bold"),
                  width='15', height='1', bd=5, bg='white')
    l3.grid(row=1, column=1)
    eaf1 = tk.StringVar()
    eaf1.set('0')
    eaf1.trace_add('write', feaf1)
    ein_a1 = tk.Entry(frar, font=("Arial", size(12), "bold"),
                      width=7, textvariable=eaf1, bd=5)
    ein_a1.grid(row=1, column=0)
    eaf2 = tk.StringVar()
    eaf2.set('0')
    eaf2.trace_add('write', feaf2)
    ein_a2 = tk.Entry(frar, font=("Arial", size(12), "bold"),
                      width=7, textvariable=eaf2, bd=5)
    ein_a2.grid(row=1, column=2)

    frout = tk.Frame(master=egg, bd=5, bg='white')
    frout.grid(row=2, column=0)
    bfall = tk.Button(frout, text='Fit All', command=fefall,
                      width=30, height=1, font=('Arial', size(14), "bold"), bg='white')
    bfall.grid(row=0, column=0)
    flermv = -1
    bend = tk.Button(frout, text='Finish', command=feend, width=30,
                     height=1, font=('Arial', size(16), "bold"), bg='white')
    bend.grid(row=1, column=0)

    if eprfit == 1:
        fefall()
    else:
        efitplot()
    tt = threading.Thread(target=testate)
    tt.daemon = True
    tt.start()
    egg.update()
    screen_width = egg.winfo_reqwidth()
    screen_height = egg.winfo_reqheight()
    tx = int(t_sc_w*windll.shcore.GetScaleFactorForDevice(0)/100) if g.winfo_x()+g.winfo_width()/2 > t_sc_w else 0
    egg.geometry(f"{screen_width}x{screen_height}+{tx}+{sc_y}")
    egg.update()

def fmcgl2():
    global mbcgl2, kmin, kmax, flmcgl2, micgl2, mfp, mbcomp1, mbcomp2, flmcomp1, flmcomp2
    msave_state()
    mbcomp1.config(state='active')
    mbcomp2.config(state='active')
    flmcomp1, flmcomp2 = -1, -1
    i = mfiti.get()
    flmcgl2 *= -1
    if flmcgl2 == 1:
        micgl2 = i
        mbcgl2.config(text='End Add 2 Peaks', bg='red')
    else:
        ti = sorted([i, micgl2])
        for i in np.linspace(ti[0], ti[1], ti[1]-ti[0]+1, dtype=int):
            mfp[i] = 2
            if i not in mfi_x:
                mfi_x.append(i)
            if i in mfi:
                mfi.remove(i)
            if i in mfi_err:
                mfi_err.remove(i)
        mbcgl2.config(text='Add 2 Peaks', bg='white')
        mfitplot()

def pack_fitpar(mresult):
    if len(smresult) > 1:
        o=smresult
        for ii,result in enumerate(mresult):
            try:
                s = putfitpar(result)
                for i in range(len(o[ii])):
                    o[ii][i]=""
                for i in s:
                    '''preprocess the string to put values in the labels'''
                    if 'x1*xr1+xr2' in i:
                        if xr2>=0:
                            i = i.replace(' == \'x1*xr1+xr2\'', '='+str(xr1)+'*x1+'+str(xr2))
                        else:
                            i = i.replace(' == \'x1*xr1+xr2\'', '='+str(xr1)+'*x1-'+str(-xr2))
                    if 'x2*xr1+xr2' in i:
                        if xr2>=0:
                            i = i.replace(' == \'x2*xr1+xr2\'', '='+str(xr1)+'*x2+'+str(xr2))
                        else:
                            i = i.replace(' == \'x2*xr1+xr2\'', '='+str(xr1)+'*x2-'+str(-xr2))
                    if "(x2-xr2) / xr1" in i:
                        if xr2>=0:
                            i = i.replace(' == \'(x2-xr2) / xr1\'','=(x2-'+str(xr2) + ')/'+str(xr1))
                        else:
                            i = i.replace(' == \'(x2-xr2) / xr1\'','=(x2+'+str(-xr2) + ')/'+str(xr1))
                    if "(x1-xr2) / xr1" in i:
                        if xr2>=0:
                            i = i.replace(' == \'(x1-xr2) / xr1\'','=(x1-'+str(xr2) + ')/'+str(xr1))
                        else:
                            i = i.replace(' == \'(x1-xr2) / xr1\'','=(x1+'+str(-xr2) + ')/'+str(xr1))
                    if 'w1/wr1*wr2' in i:
                        i = i.replace(' == \'w1/wr1*wr2\'', '=w1/'+str(wr1)+'*'+str(wr2))
                    if 'w2/wr1*wr2' in i:
                        i = i.replace(' == \'w2/wr1*wr2\'', '=w2/'+str(wr1)+'*'+str(wr2))
                        
                    '''assign the values to the labels'''
                    if 'x:' in i:
                        o[ii][0]=i
                    if 'h:' in i:
                        o[ii][1]=i
                    if 'w:' in i:
                        o[ii][2]=i
                    if 'x1:' in i:
                        o[ii][0]=i
                    if 'x2:' in i:
                        o[ii][1]=i
                    if 'h1:' in i:
                        o[ii][2]=i
                    if 'h2:' in i:
                        o[ii][3]=i
                    if 'w1:' in i:
                        o[ii][4]=i
                    if 'w2:' in i:
                        o[ii][5]=i
            except:
                pass
    else:
        o=[[]for i in range(len(mresult))]
        for ii,result in enumerate(mresult):
            try:
                s = putfitpar(result)
            except:
                s=[]
                if mfp[ii]==2:
                    for i in ['x1: nofit','x2: nofit','h1: nofit','h2: nofit','w1: nofit','w2: nofit']:
                        s.append(i)
                elif mfp[ii]==1:
                    for i in ['x: nofit','h: nofit','w: nofit','n1: nofit','n2: nofit','n3: nofit']:
                        s.append(i)
            for i in s:
                if 'nofit' in i:
                    o[ii].append(i)
                else:
                    '''preprocess the string to put values in the labels'''
                    if 'x1*xr1+xr2' in i:
                        if xr2>=0:
                            i = i.replace(' == \'x1*xr1+xr2\'', '='+str(xr1)+'*x1+'+str(xr2))
                        else:
                            i = i.replace(' == \'x1*xr1+xr2\'', '='+str(xr1)+'*x1-'+str(-xr2))
                    if 'x2*xr1+xr2' in i:
                        if xr2>=0:
                            i = i.replace(' == \'x2*xr1+xr2\'', '='+str(xr1)+'*x2+'+str(xr2))
                        else:
                            i = i.replace(' == \'x2*xr1+xr2\'', '='+str(xr1)+'*x2-'+str(-xr2))
                    if "(x2-xr2) / xr1" in i:
                        if xr2>=0:
                            i = i.replace(' == \'(x2-xr2) / xr1\'','=(x2-'+str(xr2) + ')/'+str(xr1))
                        else:
                            i = i.replace(' == \'(x2-xr2) / xr1\'','=(x2+'+str(-xr2) + ')/'+str(xr1))
                    if "(x1-xr2) / xr1" in i:
                        if xr2>=0:
                            i = i.replace(' == \'(x1-xr2) / xr1\'','=(x1-'+str(xr2) + ')/'+str(xr1))
                        else:
                            i = i.replace(' == \'(x1-xr2) / xr1\'','=(x1+'+str(-xr2) + ')/'+str(xr1))
                    if 'w1/wr1*wr2' in i:
                        i = i.replace(' == \'w1/wr1*wr2\'', '=w1/'+str(wr1)+'*'+str(wr2))
                    if 'w2/wr1*wr2' in i:
                        i = i.replace(' == \'w2/wr1*wr2\'', '=w2/'+str(wr1)+'*'+str(wr2))
                        
                    '''assign the values to the labels'''
                    if 'x:' in i:
                        o[ii].append(i)
                    if 'h:' in i:
                        o[ii].append(i)
                    if 'w:' in i:
                        o[ii].append(i)
                        o[ii].append('')
                        o[ii].append('')
                        o[ii].append('')
                    if 'x1:' in i:
                        o[ii].append(i)
                    if 'x2:' in i:
                        o[ii].append(i)
                    if 'h1:' in i:
                        o[ii].append(i)
                    if 'h2:' in i:
                        o[ii].append(i)
                    if 'w1:' in i:
                        o[ii].append(i)
                    if 'w2:' in i:
                        o[ii].append(i)
    return o
def mfitjob():
    global fmxx, fmyy, fmx, fmy, mvv, maa1, maa2, kmin, kmax, mfi, mfi_err, mfi_x, st, mst, result, fa1, fa2, fit_warn, wr1, wr2, mresult, xr1, xr2, smcst
    if len(mfi) < 1:
        mfi, mfi_err, mfi_x = [], [], []
    else:
        mfi, mfi_err, mfi_x = list(mfi), list(mfi_err), list(mfi_x)
    msave_state()
    pbar = tqdm.tqdm(total=len(ev), desc='Fitting MDC', colour='green')
    for i in range(len(ev)):
        mbase[i] = int(base.get())  # 待調整
        # fmxx[i, :] = fmxx[i, :]/fmxx[i, :]*-50
        # fmyy[i, :] = fmyy[i, :]/fmyy[i, :]*-50
        ecut = data.sel(eV=ev[i], method='nearest')
        if npzf:x = phi
        else:x = (2*m*ev[i]*1.602176634*10**-19)**0.5*np.sin(phi/180*np.pi)*10**-10/(h/2/np.pi)
        y = ecut.to_numpy().reshape(len(x))
        xx, x_arg = filter(x, kmin[i], kmax[i])
        # tx = x[np.argwhere(x >= kmin[i])].flatten()
        # xx = tx[np.argwhere(tx <= kmax[i])].flatten()
        # ty = y[np.argwhere(x >= kmin[i])].flatten()
        # yy = ty[np.argwhere(tx <= kmax[i])].flatten()
        yy = y[x_arg]
        yy = np.where(yy > mbase[i], yy, mbase[i])
        try:
            # if (kmin[i],kmax[i])==(klim.min[i], klim.max[i]) and i not in mfi:
            # if i not in mfi:
            #     if i not in mfi_x:
            #         mfi_x.append(i)
            #     # if i in mfi:
            #     #     mfi.remove(i)
            #     if i in mfi_err:
            #         mfi_err.remove(i)
            #     a1=[(kmin[i]+kmax[i])/2,(np.max(y)-mbase[i]),5,mbase[i]]
            #     a2=[(kmin[i]+kmax[i])/2,(np.max(y)-mbase[i]),5,mbase[i],(kmin[i]+kmax[i])/2,(np.max(y)-mbase[i]),5,mbase[i]]
            # elif (kmin[i],kmax[i])!=(klim.min[i], klim.max[i]):
            if mfp[i] == 1:
                smcst[i] = [0, 0, 0, 0, 0, 0]
                if i in mfi_err and (kmin[i], kmax[i]) != (klim.min[i], klim.max[i]):
                    pars = Parameters()
                    pars.add(
                        'x', value=kmin[i]+(kmax[i]-kmin[i])*0.3, min=kmin[i], max=kmax[i])
                    pars.add('h', value=(
                        np.max(y)-mbase[i])+1, min=(np.max(y)-mbase[i])/10, max=np.max(y)-mbase[i]+1)
                    pars.add('w', value=0.1, min=0.01, max=0.2)
                    pars.add('y', value=0, vary=False)
                    fitter = Minimizer(
                        fgl1, pars, fcn_args=(xx, yy-lnr_bg(yy)))
                    result = fitter.minimize()
                    a1 = toa1()
                    checkfit()
                    if fit_warn == 1:
                        t = 5
                        while t > 0 and fit_warn == 1:
                            result = fitter.minimize()
                            a1 = toa1()
                            checkfit()
                            t -= 1
                else:
                    if i in mfi:
                        result = mresult[i]
                    a1 = maa1[i, :]
                    if (kmin[i], kmax[i]) == (klim.min[i], klim.max[i]):
                        fit_warn = 2
                    elif i not in mfi:
                        pars = Parameters()
                        pars.add(
                            'x', value=kmin[i]+(kmax[i]-kmin[i])*0.3, min=kmin[i], max=kmax[i])
                        pars.add('h', value=(
                            np.max(y)-mbase[i])+1, min=(np.max(y)-mbase[i])/10, max=np.max(y)-mbase[i]+1)
                        pars.add('w', value=0.1, min=0.01, max=0.2)
                        pars.add('y', value=0, vary=False)
                        fitter = Minimizer(
                            fgl1, pars, fcn_args=(xx, yy-lnr_bg(yy)))
                        result = fitter.minimize()
                        a1 = toa1()
                        checkfit()
                        if fit_warn == 1:
                            t = 5
                            while t > 0 and fit_warn == 1:
                                result = fitter.minimize()
                                a1 = toa1()
                                checkfit()
                                t -= 1
                    else:
                        fit_warn = 0
            elif mfp[i] == 2:
                if i in mfi_err and (kmin[i], kmax[i]) != (klim.min[i], klim.max[i]):
                    pars = Parameters()
                    xr1, xr2 = float(mxf1.get()), float(mxf2.get())
                    wr1, wr2 = float(mwf1.get()), float(mwf2.get())
                    fa1, fa2 = float(maf1.get()), float(maf2.get())
                    smcst[i]=[xr1,xr2,wr1,wr2,fa1,fa2]
                    pars.add(
                        'x1', value=kmin[i]+(kmax[i]-kmin[i])*0.3, min=kmin[i], max=kmax[i])
                    if flmposcst == 1:
                        pars.add('xr1', value=xr1, vary=False)
                        pars.add('xr2', value=xr2, vary=False)
                        pars.add('x2', expr='x1*xr1+xr2')
                    else:
                        pars.add(
                            'x2', value=kmax[i]-(kmax[i]-kmin[i])*0.3, min=kmin[i], max=kmax[i])
                    pars.add('h1', value=(
                        np.max(y)-mbase[i])+1, min=(np.max(y)-mbase[i])/10, max=np.max(y)-mbase[i]+1)
                    pars.add('h2', value=(
                        np.max(y)-mbase[i])+1, min=(np.max(y)-mbase[i])/10, max=np.max(y)-mbase[i]+1)
                    pars.add('w1', value=0.02, min=0, max=0.2)
                    if wr1 != 0 and wr2 != 0:
                        pars.add('wr1', value=wr1, vary=False)
                        pars.add('wr2', value=wr2, vary=False)
                        pars.add('w2', expr='w1/wr1*wr2')
                    else:
                        pars.add('w2', value=0.02, min=0, max=0.2)
                    pars.add('y1', value=0, vary=False)
                    pars.add('y2', value=0, vary=False)
                    if fa1 != 0 and fa2 != 0:
                        fitter = Minimizer(
                            fgl2_a, pars, fcn_args=(xx, yy-lnr_bg(yy)))
                        result = fitter.minimize()
                    else:
                        fitter = Minimizer(
                            fgl2, pars, fcn_args=(xx, yy-lnr_bg(yy)))
                        result = fitter.minimize()
                    a2 = toa2(xx)
                    checkfit()
                    if fit_warn == 1:
                        t = 5
                        while t > 0 and fit_warn == 1:
                            result = fitter.minimize()
                            a2 = toa2(xx)
                            checkfit()
                            t -= 1
                else:
                    if i in mfi:
                        result = mresult[i]
                    a2 = maa2[i, :]
                    if (kmin[i], kmax[i]) == (klim.min[i], klim.max[i]):
                        fit_warn = 2
                    elif i not in mfi:
                        pars = Parameters()
                        xr1, xr2 = float(mxf1.get()), float(mxf2.get())
                        wr1, wr2 = float(mwf1.get()), float(mwf2.get())
                        fa1, fa2 = float(maf1.get()), float(maf2.get())
                        smcst[i]=[xr1,xr2,wr1,wr2,fa1,fa2]
                        pars.add(
                            'x1', value=kmin[i]+(kmax[i]-kmin[i])*0.3, min=kmin[i], max=kmax[i])
                        if flmposcst == 1:
                            pars.add('xr1', value=xr1, vary=False)
                            pars.add('xr2', value=xr2, vary=False)
                            pars.add('x2', expr='x1*xr1+xr2')
                        else:
                            pars.add(
                                'x2', value=kmax[i]-(kmax[i]-kmin[i])*0.3, min=kmin[i], max=kmax[i])
                        pars.add('h1', value=(
                            np.max(y)-mbase[i])+1, min=(np.max(y)-mbase[i])/10, max=np.max(y)-mbase[i]+1)
                        pars.add('h2', value=(
                            np.max(y)-mbase[i])+1, min=(np.max(y)-mbase[i])/10, max=np.max(y)-mbase[i]+1)
                        pars.add('w1', value=0.02, min=0.01, max=0.2)
                        if wr1 != 0 and wr2 != 0:
                            pars.add('wr1', value=wr1, vary=False)
                            pars.add('wr2', value=wr2, vary=False)
                            pars.add('w2', expr='w1/wr1*wr2')
                        else:
                            pars.add('w2', value=0.02, min=0.01, max=0.2)
                        pars.add('y1', value=0, vary=False)
                        pars.add('y2', value=0, vary=False)
                        if fa1 != 0 and fa2 != 0:
                            fitter = Minimizer(
                                fgl2_a, pars, fcn_args=(xx, yy-lnr_bg(yy)))
                            result = fitter.minimize()
                        else:
                            fitter = Minimizer(
                                fgl2, pars, fcn_args=(xx, yy-lnr_bg(yy)))
                            result = fitter.minimize()
                        a2 = toa2(xx)
                        checkfit()
                        if fit_warn == 1:
                            t = 5
                            while t > 0 and fit_warn == 1:
                                result = fitter.minimize()
                                a2 = toa2(xx)
                                checkfit()
                                t -= 1
                    else:
                        fit_warn = 0
            try:
                '''using lmfit'''
                result=swapc1c2()
                mresult[i] = result
                result = []
            except:
                '''Casa Result'''
                pass
            if fit_warn == 0:
                if i not in mfi:
                    mfi.append(i)
                if i in mfi_x:
                    mfi_x.remove(i)
                if i in mfi_err:
                    mfi_err.remove(i)
            elif fit_warn == 2:
                if i not in mfi_x:
                    mfi_x.append(i)
                if i in mfi:
                    mfi.remove(i)
                if i in mfi_err:
                    mfi_err.remove(i)
            else:
                if i not in mfi_err:
                    mfi_err.append(i)
                if i in mfi_x:
                    mfi_x.remove(i)
                if i in mfi:
                    mfi.remove(i)
        except RuntimeError:
            print('runtime error')
            if i not in mfi_err:
                mfi_err.append(i)
            if i in mfi_x:
                mfi_x.remove(i)
            if i in mfi:
                mfi.remove(i)
            a1 = [(kmin[i]+kmax[i])/2, (np.max(y)-mbase[i]), 5, mbase[i]]
            a2 = [(kmin[i]+kmax[i])/2, (np.max(y)-mbase[i]), 5, mbase[i],
                  (kmin[i]+kmax[i])/2, (np.max(y)-mbase[i]), 5, mbase[i]]
        # fmxx[i, :len(xx)] = xx
        # fmyy[i, :len(yy)] = yy
        fmx[i, :] = x
        fmy[i, :] = y
        mvv[i] = ev[i]
        if mfp[i] == 1:
            maa1[i, :] = a1
        elif mfp[i] == 2:
            maa2[i, :] = a2
        pbar.update(1)
        # print('Fitting MDC '+str(round((i+1)/len(ev)*100))+'%'+' ('+str(len(ev))+')')
        st.put('Fitting MDC '+str(round((i+1)/len(ev)*100)) +
               '%'+' ('+str(len(ev))+')')
        mst.put('Fitting MDC '+str(round((i+1)/len(ev)*100)) +
                '%'+' ('+str(len(ev))+')')
    pbar.close()
    mfitplot()


def mfit():
    global fmxx, fmyy, fmx, fmy, mvv, maa1, maa2, kmin, kmax, mfi, mfi_err, mfi_x, result, fa1, fa2, fit_warn, wr1, wr2, flmcomp1, flmcomp2, mbcomp1, mbcomp2, mresult, xr1, xr2, smcst
    mbcomp1.config(bg='white')
    mbcomp2.config(bg='white')
    mfi, mfi_err, mfi_x = list(mfi), list(mfi_err), list(mfi_x)
    msave_state()
    i = mfiti.get()
    mbase[i] = int(base.get())  # 待調整
    # fmxx[i, :] = fmxx[i, :]/fmxx[i, :]*-50
    # fmyy[i, :] = fmyy[i, :]/fmyy[i, :]*-50
    ecut = data.sel(eV=ev[i], method='nearest')
    if npzf:x = phi
    else:x = (2*m*ev[i]*1.602176634*10**-19)**0.5*np.sin(phi/180*np.pi)*10**-10/(h/2/np.pi)
    y = ecut.to_numpy().reshape(len(x))
    xx, x_arg = filter(x, kmin[i], kmax[i])
    # tx = x[np.argwhere(x >= kmin[i])].flatten()
    # xx = tx[np.argwhere(tx <= kmax[i])].flatten()
    # ty = y[np.argwhere(x >= kmin[i])].flatten()
    # yy = ty[np.argwhere(tx <= kmax[i])].flatten()
    yy = y[x_arg]
    yy = np.where(yy > mbase[i], yy, mbase[i])
    try:
        if mfp[i] == 1:
            smcst[i] = [0, 0, 0, 0, 0, 0]
            pars = Parameters()
            pars.add('x', value=kmin[i]+(kmax[i]-kmin[i])
                     * 0.2, min=kmin[i], max=kmax[i])
            pars.add('h', value=(
                np.max(y)-mbase[i])+1, min=(np.max(y)-mbase[i])/10, max=np.max(y)-mbase[i]+1)
            pars.add('w', value=0.1, min=0.01, max=0.2)
            pars.add('y', value=0, vary=False)
            fitter = Minimizer(fgl1, pars, fcn_args=(xx, yy-lnr_bg(yy)))
            result = fitter.minimize()
            a1 = toa1()
            checkfit()
            if fit_warn == 1:
                t = 5
                while t > 0 and fit_warn == 1:
                    result = fitter.minimize()
                    a1 = toa1()
                    checkfit()
                    t -= 1
        elif mfp[i] == 2:
            pars = Parameters()
            xr1, xr2 = float(mxf1.get()), float(mxf2.get())
            wr1, wr2 = float(mwf1.get()), float(mwf2.get())
            fa1, fa2 = float(maf1.get()), float(maf2.get())
            smcst[i] = [xr1, xr2, wr1, wr2, fa1, fa2]
            if flmcomp == 1:
                if flmcomp1 == 1:
                    flmcomp1 = -1
                    pars.add('x1', value=maa2[i, 0], min=kmin[i], max=kmax[i])
                    if flmposcst == 1:
                        pars.add('xr1', value=xr1, vary=False)
                        pars.add('xr2', value=xr2, vary=False)
                        pars.add('x2', expr='x1*xr1+xr2')
                    else:
                        pars.add('x2', value=maa2[i, 4], min=kmin[i], max=kmax[i])
                elif flmcomp2 == 1:
                    flmcomp2 = -1
                    pars.add('x2', value=maa2[i, 4], min=kmin[i], max=kmax[i])
                    if flmposcst == 1:
                        pars.add('xr1', value=xr1, vary=False)
                        pars.add('xr2', value=xr2, vary=False)
                        pars.add('x1', expr="(x2-xr2) / xr1")
                    else:
                        pars.add('x1', value=maa2[i, 0], min=kmin[i], max=kmax[i])
                        
                
                pars.add('h1', value=maa2[i, 1], min=(
                    np.max(y)-mbase[i])/10, max=np.max(y)-mbase[i]+1)
                pars.add('h2', value=maa2[i, 5], min=(
                    np.max(y)-mbase[i])/10, max=np.max(y)-mbase[i]+1)
                pars.add('w1', value=maa2[i, 2], min=0.01, max=0.2)
                if wr1 != 0 and wr2 != 0:
                    pars.add('wr1', value=wr1, vary=False)
                    pars.add('wr2', value=wr2, vary=False)
                    pars.add('w2', expr='w1/wr1*wr2')
                else:
                    pars.add('w2', value=maa2[i, 6], min=0.01, max=0.2)
            else:
                pars.add('x1', value=kmin[i]+(kmax[i] -
                         kmin[i])*0.3, min=kmin[i], max=kmax[i])
                if flmposcst == 1:
                    pars.add('xr1', value=xr1, vary=False)
                    pars.add('xr2', value=xr2, vary=False)
                    pars.add('x2', expr='x1*xr1+xr2')
                else:
                    pars.add(
                        'x2', value=kmax[i]-(kmax[i]-kmin[i])*0.3, min=kmin[i], max=kmax[i])
                pars.add('h1', value=(
                    np.max(y)-mbase[i])+1, min=(np.max(y)-mbase[i])/10, max=np.max(y)-mbase[i]+1)
                pars.add('h2', value=(
                    np.max(y)-mbase[i])+1, min=(np.max(y)-mbase[i])/10, max=np.max(y)-mbase[i]+1)
                pars.add('w1', value=0.02, min=0.01, max=0.2)
                if wr1 != 0 and wr2 != 0:
                    pars.add('wr1', value=wr1, vary=False)
                    pars.add('wr2', value=wr2, vary=False)
                    pars.add('w2', expr='w1/wr1*wr2')
                else:
                    pars.add('w2', value=0.02, min=0.01, max=0.2)

            pars.add('y1', value=0, vary=False)
            pars.add('y2', value=0, vary=False)
            if fa1 != 0 and fa2 != 0:
                fitter = Minimizer(fgl2_a, pars, fcn_args=(xx, yy-lnr_bg(yy)))
                result = fitter.minimize()
            else:
                fitter = Minimizer(fgl2, pars, fcn_args=(xx, yy-lnr_bg(yy)))
                result = fitter.minimize()
            a2 = toa2(xx)
            checkfit()
            if fit_warn == 1:
                t = 5
                while t > 0 and fit_warn == 1:
                    result = fitter.minimize()
                    a2 = toa2(xx)
                    checkfit()
                    t -= 1
        report_fit(result)
        result=swapc1c2()
        mresult[i] = result

        if (kmin[i], kmax[i]) == (klim.min[i], klim.max[i]):
            if i not in mfi_x:
                mfi_x.append(i)
            if i in mfi:
                mfi.remove(i)
            if i in mfi_err:
                mfi_err.remove(i)
        elif (kmin[i], kmax[i]) != (klim.min[i], klim.max[i]):
            if fit_warn == 0:
                if i not in mfi:
                    mfi.append(i)
                if i in mfi_x:
                    mfi_x.remove(i)
                if i in mfi_err:
                    mfi_err.remove(i)
            else:
                if i not in mfi_err:
                    mfi_err.append(i)
                if i in mfi_x:
                    mfi_x.remove(i)
                if i in mfi:
                    mfi.remove(i)
    except RuntimeError:
        if i not in mfi_err:
            mfi_err.append(i)
        if i in mfi_x:
            mfi_x.remove(i)
        if i in mfi:
            mfi.remove(i)
        a1 = [(kmin[i]+kmax[i])/2, (np.max(y)-mbase[i]), 0.5, mbase[i]]
        a2 = [(kmin[i]+kmax[i])/2, (np.max(y)-mbase[i]), 0.5, mbase[i],
              (kmin[i]+kmax[i])/2, (np.max(y)-mbase[i]), 0.5, mbase[i]]

    # fmxx[i, :len(xx)] = xx
    # fmyy[i, :len(yy)] = yy
    fmx[i, :] = x
    fmy[i, :] = y
    mvv[i] = ev[i]
    if mfp[i] == 1:
        maa1[i, :] = a1
    elif mfp[i] == 2:
        maa2[i, :] = a2

# 初始化撤銷和重做堆疊
mundo_stack = []
mredo_stack = []

def msave_state():
    # 保存當前狀態到撤銷堆疊，並清空重做堆疊
    smresult = pack_fitpar(mresult)
    state = {
        'mfi': mfi.copy(),
        'mfp': mfp.copy(),
        'kmin': kmin.copy(),
        'kmax': kmax.copy(),
        'maa1': maa1.copy(),
        'maa2': maa2.copy(),
        'smresult': smresult.copy(),
        'smcst': smcst.copy(),
        'mfi_err': mfi_err.copy()
    }
    mundo_stack.append(state)
    mredo_stack.clear()

def mundo():
    if mundo_stack:
        global mfi, mfp, kmin, kmax, maa1, maa2, smresult, smcst, mfi_err, fdo
        # 從撤銷堆疊中彈出上一個狀態並恢復，並將當前狀態推入重做堆疊
        state = mundo_stack.pop()
        smresult = pack_fitpar(mresult)
        mredo_stack.append({
            'mfi': mfi.copy(),
            'mfp': mfp.copy(),
            'kmin': kmin.copy(),
            'kmax': kmax.copy(),
            'maa1': maa1.copy(),
            'maa2': maa2.copy(),
            'smresult': smresult.copy(),
            'smcst': smcst.copy(),
            'mfi_err': mfi_err.copy()
        })
        mfi = state['mfi']
        mfp = state['mfp']
        kmin = state['kmin']
        kmax = state['kmax']
        maa1 = state['maa1']
        maa2 = state['maa2']
        smresult = state['smresult']
        smcst = state['smcst']
        mfi_err = state['mfi_err']
        mst.put("Undo")
        print("Undo")
        fdo=1
        mfitplot()
    else:
        mst.put("No more actions to undo.")
        print("No more actions to undo.")

def mredo():
    if mredo_stack:
        global mfi, mfp, kmin, kmax, maa1, maa2, smresult, smcst, mfi_err, fdo
        # 從重做堆疊中彈出上一個狀態並恢復，並將當前狀態推入撤銷堆疊
        state = mredo_stack.pop()
        smresult = pack_fitpar(mresult)
        mundo_stack.append({
            'mfi': mfi.copy(),
            'mfp': mfp.copy(),
            'kmin': kmin.copy(),
            'kmax': kmax.copy(),
            'maa1': maa1.copy(),
            'maa2': maa2.copy(),
            'smresult': smresult.copy(),
            'smcst': smcst.copy(),
            'mfi_err': mfi_err.copy()
        })
        mfi = state['mfi']
        mfp = state['mfp']
        kmin = state['kmin']
        kmax = state['kmax']
        maa1 = state['maa1']
        maa2 = state['maa2']
        smresult = state['smresult']
        smcst = state['smcst']
        mfi_err = state['mfi_err']
        mst.put("Redo")
        print("Redo")
        fdo=1
        mfitplot()
    else:
        mst.put("No more actions to redo.")
        print("No more actions to redo.")


def fmrmv():
    global mbrmv, flmrmv, mirmv, kmin, kmax, mfi, mfi_err, mfi_x, cki, mfp, mresult, smresult, smcst
    msave_state()
    i = mfiti.get()
    flmrmv *= -1
    if flmrmv == 1:
        mirmv = i
        mbrmv.config(text='End Remove', bg='red')
    else:
        ti = sorted([i, mirmv])
        for i in np.linspace(ti[0], ti[1], ti[1]-ti[0]+1, dtype=int):
            mfp[i] = 1
            kmin[i], kmax[i] = klim.min[i], klim.max[i]
            if i not in mfi_x:
                mfi_x.append(i)
            if i in mfi:
                mfi.remove(i)
            if i in mfi_err:
                mfi_err.remove(i)
            if i in cki:
                cki.remove(i)
            mresult[i] = []
            try:
                for j in range(6):
                    smresult[i][j] = 'nofit'
                    smcst[i][j] = 0
            except:
                pass
        mplfi()
        mbrmv.config(text='Remove', bg='white')
        mfitplot()


def fmedmove(event):
    global medxdata, medydata, medfitout
    if event.xdata != None:
        medfitout.get_tk_widget().config(cursor="crosshair")
        medxdata.config(text='xdata:'+str(' %.3f' % event.xdata))
        medydata.config(text='ydata:'+str(' %.3f' % event.ydata))
    else:
        medfitout.get_tk_widget().config(cursor="")
        try:
            medxdata.config(text='xdata:')
            medydata.config(text='ydata:')
        except NameError:
            pass


def savemfit():
    global smresult, smcst, fev, fwhm, pos, skmin, skmax, smaa1, smaa2, smfp, smfi
    smresult = pack_fitpar(mresult)
    path = fd.asksaveasfilename(title="Save MDC Fitted Data", initialdir=dpath,
                                initialfile=name+"_mfit", filetype=[("NPZ files", ".npz"),], defaultextension=".npz")
    try:
        mgg.focus_force()
    except:
        pass
    if len(path) > 2:
        mendg.destroy()
        np.savez(path, path=dpath, fev=fev, fwhm=fwhm, pos=pos, skmin=skmin,
                 skmax=skmax, smaa1=smaa1, smaa2=smaa2, smfp=smfp, smfi=smfi, smresult=smresult, smcst=smcst)
    else:
        mendg.focus_force()


def fmresidual():
    plt.figure()
    s3,s4=[],[]
    for i in range(len(ev)):
        if i in mfi_err or i in mfi:
            # x = fmxx[i, np.argwhere(fmxx[i, :] >= -20)].flatten()
            # y = fmyy[i, np.argwhere(fmxx[i, :] >= -20)].flatten()
            # lbg=lnr_bg(fmyy[i, :len(x)])
            x, x_arg = filter(fmx[i, :], kmin[i], kmax[i])
            y = fmy[i, x_arg]
            lbg = lnr_bg(y)
            s3.append(np.std(gl2(x, *maa2[i, :])+lbg-y))  # STD
            s4.append(np.sqrt(np.mean((gl2(x, *maa2[i, :])+lbg-y)**2)))  # RMS
        else:
            s3.append(0)
            s4.append(0)
    plt.plot(ev,s3,label='STD',c='r')
    plt.plot(ev,s4,label='RMS',c='b')
    plt.title('Residual')
    plt.xlabel('Kinetic Energy (eV)')
    plt.ylabel('Intensity (Counts)')
    plt.legend()
    plt.show()
def fmarea():
    plt.figure()
    s1,s2=[],[]
    for i in range(len(ev)):
        if i in mfi_err or i in mfi:
            # x = fmxx[i, np.argwhere(fmxx[i, :] >= -20)].flatten()
            # y = fmyy[i, np.argwhere(fmxx[i, :] >= -20)].flatten()
            x, x_arg = filter(fmx[i, :], kmin[i], kmax[i])
            ty = gl1(x, *maa2[i, :4])
            s1.append(np.sum(np.array([((ty[i]+ty[i+1])/2)for i in range(len(x)-1)])
                        # Area 1
                        * np.array(([(x[i+1]-x[i])for i in range(len(x)-1)]))))
            ty = gl1(x, *maa2[i, -4:])
            s2.append(np.sum(np.array([((ty[i]+ty[i+1])/2)for i in range(len(x)-1)])
                        # Area 2
                        * np.array(([(x[i+1]-x[i])for i in range(len(x)-1)]))))
        else:
            s1.append(0)
            s2.append(0)
    plt.plot(ev,s1,label='Area 1',c='r')
    plt.plot(ev,s2,label='Area 2',c='b')
    plt.title('Area')
    plt.xlabel('Kinetic Energy (eV)')
    plt.ylabel('Intensity (Counts)')
    plt.legend()
    plt.show()
def fmfwhm():
    global pos, fwhm, fev, rpos, ophi
    fev, pos, fwhm = [], [], []
    f=plt.figure()
    a1=f.add_subplot(311)
    a2=f.add_subplot(312)
    a3=f.add_subplot(313)
    x1=[]
    x2=[]
    y1=[]
    y2=[]
    for i, v in enumerate(mfi):
        if mfp[v] == 1:
            fev.append(ev[v])
            pos.append(maa1[v, 0])
            fwhm.append(maa1[v, 2])
            x1.append(ev[v])
            y1.append(maa1[v, 2])
        elif mfp[v] == 2:
            x1.append(ev[v])
            x2.append(ev[v])
            y1.append(maa2[v, 2])
            y2.append(maa2[v, 6])
            
            fev.append(ev[v])
            fev.append(ev[v])
            pos.append(maa2[v, 0])
            pos.append(maa2[v, 4])
            fwhm.append(maa2[v, 2])
            fwhm.append(maa2[v, 6])
    fev = np.float64(fev)
    rpos = np.float64(pos)
    
    ophi = np.arcsin(rpos/(2*m*fev*1.602176634*10**-19)**0.5/10**-10*(h/2/np.pi))*180/np.pi
    pos = (2*m*fev*1.602176634*10**-19)**0.5 * np.sin((np.float64(k_offset.get())+ophi)/180*np.pi)*10**-10/(h/2/np.pi)

    rpos = res(fev, rpos)
    ophi = res(fev, ophi)
    fwhm = res(fev, fwhm)
    pos = res(fev, pos)
    fev = res(fev, fev)
    
    ha=a1.scatter(x1,y1,c='r')
    a1.set_title('FWHM')
    a1.set_ylabel(r'FWHM ($\frac{2\pi}{\AA}$)')
    a1.legend([ha],['Comp 1'])
    hb=a2.scatter(x2,y2,c='b')
    a2.set_ylabel(r'FWHM ($\frac{2\pi}{\AA}$)')
    a2.legend([hb],['Comp 2'])
    h2=a3.scatter(x2,y2,c='b')
    h1=a3.scatter(x1,y1,c='r')
    a3.set_xlabel('Kinetic Energy (eV)')
    a3.set_ylabel(r'FWHM ($\frac{2\pi}{\AA}$)')
    a3.legend([h1,h2],['Comp 1','Comp 2'])
    plt.tight_layout()
    plt.show()

def fmimse():
    global pos, fwhm, fev, rpos, ophi
    fev, pos, fwhm = [], [], []
    f=plt.figure()
    a1=f.add_subplot(221)
    a2=f.add_subplot(222)
    a3=f.add_subplot(223)
    a4=f.add_subplot(224)
    y=[]
    pos1=[]
    pos2=[]
    fwhm1=[]
    fwhm2=[]
    for i, v in enumerate(mfi):
        if mfp[v] == 1:
            fev.append(ev[v])
            pos.append(maa1[v, 0])
            fwhm.append(maa1[v, 2])
        elif mfp[v] == 2:
            y.append(ev[v])
            pos1.append(maa2[v, 0])
            pos2.append(maa2[v, 4])
            fwhm1.append(maa2[v, 2])
            fwhm2.append(maa2[v, 6])
            
            fev.append(ev[v])
            fev.append(ev[v])
            pos.append(maa2[v, 0])
            pos.append(maa2[v, 4])
            fwhm.append(maa2[v, 2])
            fwhm.append(maa2[v, 6])
    y = np.float64(y)
    fev = np.float64(fev)
    rpos = np.float64(pos)
    
    ophi = np.arcsin(rpos/(2*m*fev*1.602176634*10**-19)**0.5/10**-10*(h/2/np.pi))*180/np.pi
    pos = (2*m*fev*1.602176634*10**-19)**0.5 * np.sin((np.float64(k_offset.get())+ophi)/180*np.pi)*10**-10/(h/2/np.pi)
    
    rpos = res(fev, rpos)
    ophi = res(fev, ophi)
    fwhm = res(fev, fwhm)
    pos = res(fev, pos)
    fev = res(fev, fev)
    
    pos1 = res(y, pos1)
    pos2 = res(y, pos2)
    fwhm1 = res(y, fwhm1)
    fwhm2 = res(y, fwhm2)
    y = res(y, y)
    
    xx = np.diff(y)
    yy1 = np.diff(pos1)
    yy2 = np.diff(pos2)
    
    # eliminate infinite vf
    for i in range(len(yy1)):
        if xx[i]/yy1[i] > 20000:
            yy1[i] = 0
    for i in range(len(yy2)):
        if xx[i]/yy2[i] > 20000:
            yy2[i] = 0
    
    v1 = xx/yy1
    v2 = xx/yy2
    yy1 = v1*fwhm1[1::]/2
    yy2 = v2*fwhm2[1::]/2
    xx/=2
    print(len(y))
    print(len(xx))
    x = ((y[-1:0:-1]+xx[::-1])-vfe)*1000
    print(len(x))
    ha=a1.scatter(x,v1,c='r')
    hb=a2.scatter(x,v2,c='b')
    h1=a3.scatter(x,yy1*1000,c='r')
    h2=a4.scatter(x,yy2*1000,c='b')
    a1.set_title('Group Velocity')
    a1.set_xlabel('Binding Energy (meV)', font='Arial', fontsize=size(14))
    a1.set_ylabel(r'v ($eV\AA$)', font='Arial', fontsize=size(14))
    a1.legend([ha],['Comp 1'])
    a2.set_title('Group Velocity')
    a2.set_xlabel('Binding Energy (meV)', font='Arial', fontsize=size(14))
    a2.set_ylabel(r'v ($eV\AA$)', font='Arial', fontsize=size(14))
    a2.legend([hb],['Comp 2'])
    a3.set_title('Imaginary Part')
    a3.set_xlabel('Binding Energy (meV)', font='Arial', fontsize=size(14))
    a3.set_ylabel(r'Im $\Sigma$ (meV)', font='Arial', fontsize=size(14))
    a3.legend([h1],['Comp 1'])
    a4.set_title('Imaginary Part')
    a4.set_xlabel('Binding Energy (meV)', font='Arial', fontsize=size(14))
    a4.set_ylabel(r'Im $\Sigma$ (meV)', font='Arial', fontsize=size(14))
    a4.legend([h2],['Comp 2'])
    plt.tight_layout()
    plt.show()
    
def fmpreview():
    mprvg = tk.Toplevel(g)
    mprvg.geometry('300x320')
    mprvg.title(' Preview MDC Result')
    bmresidual = tk.Button(mprvg, text='Residual', command=fmresidual, width=30, height=2, font=('Arial', size(16), "bold"), bg='white', bd=10)
    bmresidual.pack()
    bmarea = tk.Button(mprvg, text='Area', command=fmarea, width=30, height=2, font=('Arial', size(16), "bold"), bg='white', bd=10)
    bmarea.pack()
    bmfwhm = tk.Button(mprvg, text='FWHM', command=fmfwhm, width=30, height=2, font=('Arial', size(16), "bold"), bg='white', bd=10)
    bmfwhm.pack()
    bmimse = tk.Button(mprvg, text='Imaginary Part', command=fmimse, width=30, height=2, font=('Arial', size(16), "bold"), bg='white', bd=10)
    bmimse.pack()
    mprvg.update()
    w=mprvg.winfo_reqwidth()
    h=mprvg.winfo_reqheight()
    mprvg.geometry(f'{w}x{h}')
    mprvg.update()
    
scki = []

def mprend(p=0):
    global rpos, pos, fwhm, fev, medxdata, medydata, medfitout, skmin, skmax, smaa1, smaa2, smfp, smfi, fpr, scki
    fev, pos, fwhm = [], [], []
    skmin, skmax, smaa1, smaa2 = kmin, kmax, maa1, maa2
    smfp = mfp
    smfi = mfi
    for i, v in enumerate(mfi):
        if mfp[v] == 1:
            fev.append(ev[v])
            pos.append(maa1[v, 0])
            fwhm.append(maa1[v, 2])
        elif mfp[v] == 2:
            if p == 1:
                fev.append(ev[v])
                pos.append(maa2[v, 0])
                fwhm.append(maa2[v, 2])
            elif p == 2:
                fev.append(ev[v])
                pos.append(maa2[v, 4])
                fwhm.append(maa2[v, 6])
            else:
                fev.append(ev[v])
                fev.append(ev[v])
                pos.append(maa2[v, 0])
                pos.append(maa2[v, 4])
                fwhm.append(maa2[v, 2])
                fwhm.append(maa2[v, 6])
            
    fwhm = res(fev, fwhm)
    pos = res(fev, pos)
    # skmin = res(smfi, skmin)
    # skmax = res(smfi, skmax)
    # smfp = res(smfi, smfp)
    fev = res(fev, fev)
    smfi = res(smfi, smfi)
            
    rpos, fev, pos, fwhm = np.float64(pos), np.float64(
        fev), np.float64(pos), np.float64(fwhm)

def fmend():
    global rpos, pos, fwhm, fev, medxdata, medydata, medfitout, skmin, skmax, smaa1, smaa2, smfp, smfi, fpr, scki, mendg
    mprend()
    scki = cki
    fpr = 1
    if 'mendg' in globals():
        mendg.destroy()
    mendg = tk.Toplevel(g)
    mendg.title('MDC Lorentz Fit Result')
    fr = tk.Frame(master=mendg, bd=5)
    fr.grid(row=0, column=0)
    mfitfig = Figure(figsize=(8*scale, 6*scale), layout='constrained')
    medfitout = FigureCanvasTkAgg(mfitfig, master=fr)
    medfitout.get_tk_widget().grid(row=0, column=0)
    medfitout.mpl_connect('motion_notify_event', fmedmove)

    a = mfitfig.subplots()
    a.scatter(pos+fwhm/2, fev, c='r', s=scale*scale*10)
    a.scatter(pos-fwhm/2, fev, c='r', s=scale*scale*10)
    a.scatter(pos, fev, c='k', s=scale*scale*10)
    a.set_xlabel(r'k ($\frac{2\pi}{\AA}$)', font='Arial', fontsize=size(14))
    a.set_ylabel('Kinetic Energy (eV)', font='Arial', fontsize=size(14))
    medfitout.draw()
    xydata = tk.Frame(master=fr, bd=5)
    xydata.grid(row=1, column=0)

    medxdata = tk.Label(xydata, text='xdata:', font=(
        "Arial", size(12), "bold"), width='15', height='1', bd=10, bg='white')
    medxdata.grid(row=0, column=0)
    medydata = tk.Label(xydata, text='ydata:', font=(
        "Arial", size(12), "bold"), width='15', height='1', bd=10, bg='white')
    medydata.grid(row=0, column=1)

    bsave = tk.Button(master=mendg, text='Save Fitted Data', command=savemfit,
                      width=30, height=2, font=('Arial', size(14), "bold"), bg='white', bd=10)
    bsave.grid(row=1, column=0)
    
    mendg.update()


def fmend1():
    global rpos, pos, fwhm, fev, medxdata, medydata, medfitout, skmin, skmax, smaa1, smaa2, smfp, smfi, fpr, scki, mendg
    mprend(p=1)
    scki = cki
    fpr = 1
    if 'mendg' in globals():
        mendg.destroy()
    mendg = tk.Toplevel(g)
    mendg.title('MDC Lorentz Fit Result')
    fr = tk.Frame(master=mendg, bd=5)
    fr.grid(row=0, column=0)
    mfitfig = Figure(figsize=(8*scale, 6*scale), layout='constrained')
    medfitout = FigureCanvasTkAgg(mfitfig, master=fr)
    medfitout.get_tk_widget().grid(row=0, column=0)
    medfitout.mpl_connect('motion_notify_event', fmedmove)

    a = mfitfig.subplots()
    a.scatter(pos+fwhm/2, fev, c='r', s=scale*scale*10)
    a.scatter(pos-fwhm/2, fev, c='r', s=scale*scale*10)
    a.scatter(pos, fev, c='k', s=scale*scale*10)
    a.set_xlabel(r'k ($\frac{2\pi}{\AA}$)', font='Arial', fontsize=size(14))
    a.set_ylabel('Kinetic Energy (eV)', font='Arial', fontsize=size(14))
    medfitout.draw()
    xydata = tk.Frame(master=fr, bd=5)
    xydata.grid(row=1, column=0)

    medxdata = tk.Label(xydata, text='xdata:', font=(
        "Arial", size(12), "bold"), width='15', height='1', bd=10, bg='white')
    medxdata.grid(row=0, column=0)
    medydata = tk.Label(xydata, text='ydata:', font=(
        "Arial", size(12), "bold"), width='15', height='1', bd=10, bg='white')
    medydata.grid(row=0, column=1)

    bsave = tk.Button(master=mendg, text='Save Fitted Data', command=savemfit,
                      width=30, height=2, font=('Arial', size(14), "bold"), bg='white', bd=10)
    bsave.grid(row=1, column=0)
    
    mendg.update()

def fmend2():
    global rpos, pos, fwhm, fev, medxdata, medydata, medfitout, skmin, skmax, smaa1, smaa2, smfp, smfi, fpr, scki, mendg
    mprend(p=2)
    scki = cki
    fpr = 1
    if 'mendg' in globals():
        mendg.destroy()
    mendg = tk.Toplevel(g)
    mendg.title('MDC Lorentz Fit Result')
    fr = tk.Frame(master=mendg, bd=5)
    fr.grid(row=0, column=0)
    mfitfig = Figure(figsize=(8*scale, 6*scale), layout='constrained')
    medfitout = FigureCanvasTkAgg(mfitfig, master=fr)
    medfitout.get_tk_widget().grid(row=0, column=0)
    medfitout.mpl_connect('motion_notify_event', fmedmove)

    a = mfitfig.subplots()
    a.scatter(pos+fwhm/2, fev, c='r', s=scale*scale*10)
    a.scatter(pos-fwhm/2, fev, c='r', s=scale*scale*10)
    a.scatter(pos, fev, c='k', s=scale*scale*10)
    a.set_xlabel(r'k ($\frac{2\pi}{\AA}$)', font='Arial', fontsize=size(14))
    a.set_ylabel('Kinetic Energy (eV)', font='Arial', fontsize=size(14))
    medfitout.draw()
    xydata = tk.Frame(master=fr, bd=5)
    xydata.grid(row=1, column=0)

    medxdata = tk.Label(xydata, text='xdata:', font=(
        "Arial", size(12), "bold"), width='15', height='1', bd=10, bg='white')
    medxdata.grid(row=0, column=0)
    medydata = tk.Label(xydata, text='ydata:', font=(
        "Arial", size(12), "bold"), width='15', height='1', bd=10, bg='white')
    medydata.grid(row=0, column=1)

    bsave = tk.Button(master=mendg, text='Save Fitted Data', command=savemfit,
                      width=30, height=2, font=('Arial', size(14), "bold"), bg='white', bd=10)
    bsave.grid(row=1, column=0)
    
    mendg.update()

def fmfall():
    t = threading.Thread(target=mfitjob)
    t.daemon = True
    t.start()


def func_cki():
    global cki, kmin, kmax
    if mfiti.get() not in cki:
        cki.append(mfiti.get())
    if len(cki) >= 2:
        cki.sort()
        for i in range(len(cki)-1):
            kmin[cki[i]:cki[i+1] +
                 1] = np.linspace(kmin[cki[i]], kmin[cki[i+1]], cki[i+1]-cki[i]+1)
            kmax[cki[i]:cki[i+1] +
                 1] = np.linspace(kmax[cki[i]], kmax[cki[i+1]], cki[i+1]-cki[i]+1)


def fchki(*e):
    global mfitout, mdxdata, mdydata, mbcomp1, mbcomp2, mbgv, flmcomp1, flmcomp2
    i = mfiti.get()
    mbgv = 0
    try:
        flmcomp1,flmcomp2 = -1, -1
        mfitout.get_tk_widget().delete('rec')
        mdxdata.config(text='dx:')
        mdydata.config(text='dy:')
        if mfp[i] == 2:
            mbcomp1.config(state='active', bg='white')
            mbcomp2.config(state='active', bg='white')
        else:
            mbcomp1.config(state='disabled', bg='white')
            mbcomp2.config(state='disabled', bg='white')
    except:
        pass
    mfitplot()
    mprplot(mxl)


def mplfi():
    global miout, mifig, mlind, mrind
    i = mfiti.get()
    mifig.clear()
    miax = mifig.add_axes([0, 0, 1, 1])
    miax.scatter(mfi_x, [0 for i in range(len(mfi_x))], marker='|', c='k')
    miax.scatter(mfi, [0 for i in range(len(mfi))], marker='|', c='b')
    miax.scatter(mfi_err, [0 for i in range(len(mfi_err))], marker='|', c='r')
    if i in mfi_x:
        mlind.config(bg='white')
        mrind.config(bg='white')
    if i in mfi:
        mlind.config(bg='blue')
        mrind.config(bg='blue')
    if i in mfi_err:
        mlind.config(bg='red')
        mrind.config(bg='red')
    try:
        miax.set_xlim([np.min([mfi, mfi_x, mfi_err]),
                      np.max([mfi, mfi_x, mfi_err])])
    except ValueError:
        pass
    miax.set_yticks([])
    mprplot(mxl)
    miout.draw()

def mfbgu(event):
    global mbgv
    i=mfiti.get()
    mbase[i] = int(base.get())  # 待調整
    # fmxx[i, :] = fmxx[i, :]/fmxx[i, :]*-50
    # fmyy[i, :] = fmyy[i, :]/fmyy[i, :]*-50
    ecut = data.sel(eV=ev[i], method='nearest')
    if npzf:x = phi
    else:x = (2*m*ev[i]*1.602176634*10**-19)**0.5*np.sin(phi/180*np.pi)*10**-10/(h/2/np.pi)
    y = ecut.to_numpy().reshape(len(x))
    xx, x_arg = filter(x, kmin[i], kmax[i])
    # tx = x[np.argwhere(x >= kmin[i])].flatten()
    # xx = tx[np.argwhere(tx <= kmax[i])].flatten()
    # ty = y[np.argwhere(x >= kmin[i])].flatten()
    # yy = ty[np.argwhere(tx <= kmax[i])].flatten()
    yy = y[x_arg]
    yy = np.where(yy > mbase[i], yy, mbase[i])
    d = sorted(abs(np.diff(np.append(yy[0:5],yy[-6:-1]))))
    t=0
    ti=0
    while t==0:
        t=d[ti]
        ti+=1
        if ti==len(d):
            break
    print(t)
    try:
        mbgv+=t/2
        mfit()
        mfitplot()
    except:
        pass

def mfbgd(event):
    global mbgv
    i=mfiti.get()
    mbase[i] = int(base.get())  # 待調整
    # fmxx[i, :] = fmxx[i, :]/fmxx[i, :]*-50
    # fmyy[i, :] = fmyy[i, :]/fmyy[i, :]*-50
    ecut = data.sel(eV=ev[i], method='nearest')
    if npzf:x = phi
    else:x = (2*m*ev[i]*1.602176634*10**-19)**0.5*np.sin(phi/180*np.pi)*10**-10/(h/2/np.pi)
    y = ecut.to_numpy().reshape(len(x))
    xx, x_arg = filter(x, kmin[i], kmax[i])
    # tx = x[np.argwhere(x >= kmin[i])].flatten()
    # xx = tx[np.argwhere(tx <= kmax[i])].flatten()
    # ty = y[np.argwhere(x >= kmin[i])].flatten()
    # yy = ty[np.argwhere(tx <= kmax[i])].flatten()
    yy = y[x_arg]
    yy = np.where(yy > mbase[i], yy, mbase[i])
    d = sorted(abs(np.diff(np.append(yy[0:5],yy[-6:-1]))))
    t=0
    ti=0
    while t==0:
        t=d[ti]
        ti+=1
        if ti==len(d):
            break
    print(t)
    try:
        mbgv-=t/2
        mfit()
        mfitplot()
    except:
        pass

def _mpr2draw():
    global mfitprfig2, mfitprout2, mfprb
    i = mfiti.get()
    try:
        mfitprfig2.clear()
        mfprb = mfitprfig2.subplots()
        mfprb.set_xlabel(r'k ($\frac{2\pi}{\AA}$)', font='Arial', fontsize=size(12))
        if emf=='KE':
            mfprb.set_ylabel('Kinetic Energy (eV)', font='Arial', fontsize=size(12))
        else:
            mfprb.set_ylabel('Binding Energy (eV)', font='Arial', fontsize=size(12))
            mfprb.invert_yaxis()
        mprend()
        if emf == 'KE':
            mfprb.scatter(pos + fwhm / 2, fev, c='r', s=scale*scale*0.5)
            mfprb.scatter(pos - fwhm / 2, fev, c='r', s=scale*scale*0.5)
            mfprb.scatter(pos, fev, c='k', s=scale*scale*0.5)
        else:
            mfprb.scatter(pos + fwhm / 2, vfe - fev, c='r', s=scale*scale*0.5)
            mfprb.scatter(pos - fwhm / 2, vfe - fev, c='r', s=scale*scale*0.5)
            mfprb.scatter(pos, vfe - fev, c='k', s=scale*scale*0.5)

        if emf == 'KE':
            mfprb.plot(mfprb.get_xlim(), [ev[i], ev[i]], 'b-', alpha=0.5)
        else:
            mfprb.plot(mfprb.get_xlim(), [vfe - ev[i], vfe - ev[i]], 'b-', alpha=0.5)
        
        mfitprout2.draw()
    except:
        pass
    
def mpr2draw():
    t = threading.Thread(target=_mpr2draw)
    t.daemon = True
    t.start()
    
def _mpr3draw():
    global mfitprfig3, mfitprout3, mfprc
    i = mfiti.get()
    try:
        mfitprfig3.clear()
        mfprc = mfitprfig3.subplots(2, 1)
        mfprc[1].set_xlabel('Binding Energy (eV)')
        mfprc[0].set_ylabel(r'FWHM ($\frac{2\pi}{\AA}$)')
        mfprc[1].set_ylabel(r'FWHM ($\frac{2\pi}{\AA}$)')
        mfprc[0].set_xticks([])
        mfprc[0].invert_xaxis()
        mfprc[1].invert_xaxis()
        x1=[]
        x2=[]
        y1=[]
        y2=[]
        for j, v in enumerate(mfi):
            if mfp[v] == 1:
                x1.append(vfe-ev[v])
                y1.append(maa1[v, 2])
            elif mfp[v] == 2:
                x1.append(vfe-ev[v])
                x2.append(vfe-ev[v])
                y1.append(maa2[v, 2])
                y2.append(maa2[v, 6])
        y1 = res(x1, y1)
        y2 = res(x2, y2)
        x1 = res(x1, x1)
        x2 = res(x2, x2)
        mfprc[0].plot(x1, y1, c='r', marker='o', markersize=scale*0.5, label='Comp 1')    #plot
        mfprc[1].plot(x2, y2, c='b', marker='o', markersize=scale*0.5, label='Comp 2')    #plot
        # mfprc[0].scatter(x1, y1, c='r', s=scale*scale*0.5, label='Comp 1')    #scatter
        # mfprc[1].scatter(x2, y2, c='b', s=scale*scale*0.5, label='Comp 2')    #scatter
        l1 = mfprc[0].legend()
        l2 = mfprc[1].legend()
        l1.draw_frame(False)
        l2.draw_frame(False)
        mfprc[0].plot([vfe - ev[i], vfe - ev[i]], mfprc[0].get_ylim(), 'b-', alpha=0.5)
        mfprc[1].plot([vfe - ev[i], vfe - ev[i]], mfprc[1].get_ylim(), 'r-', alpha=0.5)
        mfitprout3.draw()
    except:
        pass
    
def mpr3draw():
    t = threading.Thread(target=_mpr3draw)
    t.daemon = True
    t.start()

def _mprplot_job1():
    global mfitprfig1, mfitprout1, mfpra, mfprl1, mfprl2, mfprl3, mfpr
    i = mfiti.get()
    try:
        xl=mprxl
        if mfpr == 0:
            mfpr = 1
            mfitprfig1.clear()
            mfpra = mfitprfig1.subplots()
            mprend()
            if emf == 'KE':
                px, py = np.meshgrid(phi, ev)
                tev = py.copy()
                mfpra.set_xlabel(r'k ($\frac{2\pi}{\AA}$)', font='Arial', fontsize=size(8))
                mfpra.set_ylabel('Kinetic Energy (eV)', font='Arial', fontsize=size(12))
            else:
                px, py = np.meshgrid(phi, vfe - ev)
                tev = vfe - py.copy()
                mfpra.set_xlabel(r'k ($\frac{2\pi}{\AA}$)', font='Arial', fontsize=size(8))
                mfpra.set_ylabel('Binding Energy (eV)', font='Arial', fontsize=size(12))
                mfpra.invert_yaxis()
            if npzf:
                px = phi
            else:
                px = (2 * m * tev * 1.6 * 10 ** -19) ** 0.5 * np.sin(px / 180 * np.pi) * 10 ** -10 / (h / 2 / np.pi)
            pz = data.to_numpy()
            mfpra.pcolormesh(px, py, pz, cmap=value3.get())
            oyl = mfpra.get_ylim()

            if emf == 'KE':
                mfprl1,=mfpra.plot([xl[0], xl[1]], [ev[i], ev[i]], 'r-')
            else:
                mfprl1,=mfpra.plot([xl[0], xl[1]], [vfe - ev[i], vfe - ev[i]], 'r-')

            de = (ev[1] - ev[0]) * 8
            mfprl2,=mfpra.plot([xl[0], xl[0]], [ev[i] - de, ev[i] + de], 'r-')
            mfprl3,=mfpra.plot([xl[1], xl[1]], [ev[i] - de, ev[i] + de], 'r-')
            mfpra.set_ylim(oyl)
        else:
            mprend()
            de = (ev[1] - ev[0]) * 8
            if emf == 'KE':
                mfpra.set_xlabel(r'k ($\frac{2\pi}{\AA}$)', font='Arial', fontsize=size(8))
                mfpra.set_ylabel('Kinetic Energy (eV)', font='Arial', fontsize=size(12))
                mfprl1.set_xdata([xl[0], xl[1]])
                mfprl1.set_ydata([ev[i], ev[i]])
                mfprl2.set_ydata([ev[i] - de, ev[i] + de])
                mfprl3.set_ydata([ev[i] - de, ev[i] + de])
                # mfprl1,=mfpra.plot([xl[0], xl[1]], [ev[i], ev[i]], 'r-')
            else:
                mfpra.set_xlabel(r'k ($\frac{2\pi}{\AA}$)', font='Arial', fontsize=size(8))
                mfpra.set_ylabel('Binding Energy (eV)', font='Arial', fontsize=size(12))
                mfprl1.set_xdata([xl[0], xl[1]])
                mfprl1.set_ydata([vfe - ev[i], vfe - ev[i]])
                mfprl2.set_ydata([vfe - ev[i] - de, vfe - ev[i] + de])
                mfprl3.set_ydata([vfe - ev[i] - de, vfe - ev[i] + de])
                # mfprl1,=mfpra.plot([xl[0], xl[1]], [vfe - ev[i], vfe - ev[i]], 'r-')
            mfprl2.set_xdata([xl[0], xl[0]])
            mfprl3.set_xdata([xl[1], xl[1]])
            # mfprl2,=mfpra.plot([xl[0], xl[0]], [ev[i] - de, ev[i] + de], 'r-')
            # mfprl3,=mfpra.plot([xl[1], xl[1]], [ev[i] - de, ev[i] + de], 'r-')
            
        mfitprout1.draw()
    except:
        pass
    
    
def mprplot_job1():
    t = threading.Thread(target=_mprplot_job1)
    t.daemon = True
    t.start()

def mprplot(xl):
    global mprxl
    if mpr==1:
        mprxl = xl
        mpr2draw()
        mpr3draw()
        mprplot_job1()

def mprbgjob1():
    while True:
        if mpr==1:
            try:
                mfitprout1.draw()
            except:
                pass
def mprbg1():
    t = threading.Thread(target=mprbgjob1)
    t.daemon = True
    t.start()
def mprbgjob2():
    while True:
        if mpr==1:
            try:
                mfitprout2.draw()
            except:
                pass
def mprbg2():
    t = threading.Thread(target=mprbgjob2)
    t.daemon = True
    t.start()
def mprbgjob3():
    while True:
        if mpr==1:
            try:
                mfitprout3.draw()
            except:
                pass
def mprbg3():
    t = threading.Thread(target=mprbgjob3)
    t.daemon = True
    t.start() 

def f_pr():
    global mfpr, mpr, mfitprfig1, mfitprfig2, mfitprfig3, mfitprout1, mfitprout2, mfitprout3
    mfpr=0
    if mpr==1:
        mpr=0
        b_pr.config(text='Real Time Preview OFF', fg='red')
        mfitprfig1.clear()
        mfitprfig2.clear()
        mfitprfig3.clear()
        mfitprout1.draw()
        mfitprout2.draw()
        mfitprout3.draw()
    else:
        mpr=1
        mprplot(mxl)
        b_pr.config(text='Real Time Preview ON', fg='green')

def filter(y, a, b):
    """
    Filters the input array y based on the conditions defined by a and b.
    Returns two arrays: one containing the filtered values and another containing
    the indices of the filtered values in the original array.
    If a is greater than b, it swaps them to ensure a is always less than or equal to b.
    If no values in y meet the condition, it returns empty arrays.
    
    Parameters:
        y (array-like): The input array to be filtered.
        a (float): The lower bound for filtering.
        b (float): The upper bound for filtering.
    Returns:
        (filtered y, index of filtered y) (tuple): A tuple of two ndarrays.
    
    Example:
        >>> y = [1, 2, 3, 4, 5]
        >>> a = 2
        >>> b = 4
        >>> filter(y, a, b)
        (array([2, 3, 4]), array([1, 2, 3]))
    """
    if a > b:
        a, b = b, a  # Ensure a is less than or equal to b
    return np.array([x for x in y if a <= x <= b]), np.array([i for i, x in enumerate(y) if a <= x <= b])

def mfitplot():  # mfiti Scale
    global mfitax, mxl, myl, klmin, klmax, tmxl, kmin, kmax, maa2, flmcomp, lm1, lm2, lm3, lm4, lm5, lm6, mxf1, mxf2, mwf1, mwf2, maf1, maf2, mt1, mt2, mt3, mt4, mt5, fdo, mf_prswap
    i = mfiti.get()
    mfitfig.clear()
    mfitax = mfitfig.subplots()
    # 'Pos:'+str(round(maa1[i,0],3))+r' $(\frac{2\pi}{\AA})$'+', FWHM:'+str(round(maa1[i,2],3))+r' $(\frac{2\pi}{\AA})$'
    if emf=='KE':
        mfitax.set_title('Kinetic Energy:' + str(round(mvv[i], 3))+' eV, '+str(mfp[i])+' Peak')
    else:
        mfitax.set_title('Binding Energy:' + str(round(vfe-mvv[i], 3))+' eV, '+str(mfp[i])+' Peak')
    mfitax.scatter(fmx[i, :], fmy[i, :], c='k', s=scale*scale*4)
    tyl = mfitax.get_ylim()
    txl = mfitax.get_xlim()
    dy = (tyl[1]-tyl[0])/20
    dx = (txl[1]-txl[0])/50
    tymin = tyl[0]
    tymax = tyl[1]
    txmin = txl[0]
    txmax = txl[1]
    mfitax.axhline(tymax+dy, c='grey')
    # x = fmxx[i, np.argwhere(fmxx[i, :] >= -20)].flatten()
    # y = fmyy[i, np.argwhere(fmxx[i, :] >= -20)].flatten()
    x, x_arg = filter(fmx[i, :], kmin[i], kmax[i])
    y = fmy[i, x_arg]
    lbg = lnr_bg(y)
    if i in mfi_x:
        for l, v in zip([lm1, lm2, lm3, lm4, lm5, lm6], ['', '', '', '', '', '']):
            l.config(text=v)
        try:
            mxf1.set(str(smcst[i][0]))
            mxf2.set(str(smcst[i][1]))
            mwf1.set(str(smcst[i][2]))
            mwf2.set(str(smcst[i][3]))
            maf1.set(str(smcst[i][4]))
            maf2.set(str(smcst[i][5]))
        except:
            pass
    if mfp[i] == 1:
        try:
            mxf1.set(str(smcst[i][0]))
            mxf2.set(str(smcst[i][1]))
            mwf1.set(str(smcst[i][2]))
            mwf2.set(str(smcst[i][3]))
            maf1.set(str(smcst[i][4]))
            maf2.set(str(smcst[i][5]))
        except:
            pass
        if maa1[i, 0] == (kmin[i]+kmax[i])/2 and maa1[i, 2] == 0.5:
            fl, = mfitax.plot(x, gl1(x, *maa1[i, :])+lbg, 'r-', lw=2)
        else:
            gl1_1 = gl1(x, *maa1[i, :])+lbg
            fl, = mfitax.plot(x, gl1(x, *maa1[i, :])+lbg, 'b-', lw=2)
            mfitax.fill_between(x, lbg, gl1_1, facecolor='blue', alpha=0.5)
        if i in mfi_err or i in mfi:
            if i in mfi:
                mfitax.plot(x, gl1(x, *maa1[i, :]) +
                            lbg-y+tymax+dy, color='gray', lw=1)
            else:
                mfitax.plot(x, gl1(x, *maa1[i, :]) +
                            lbg-y+tymax+dy, color='red', lw=1)
            # s=(np.sum((gl1(x,*maa1[i,:])+lbg-y)**2)/(max(x)-min(x)))**0.5
            s = np.std(gl1(x, *maa1[i, :])+lbg-y)  # STD
            mt1=mfitax.text(txmin+dx, tymax-dy, 'Residual STD: '+str(round(s, 2)), fontsize=size(12))
            s = np.sqrt(np.mean((gl1(x, *maa1[i, :])+lbg-y)**2))  # RMS
            mt2=mfitax.text(txmin+dx, tymax-2*dy,
                        'Residual RMS: '+str(round(s, 2)), fontsize=size(12))
            ty = gl1(x, *maa1[i, :])
            s = np.sum(np.array([((ty[i]+ty[i+1])/2)for i in range(len(x)-1)])
                    # Area
                    * np.array(([(x[i+1]-x[i])for i in range(len(x)-1)])))
            mt3=mfitax.text(txmin+dx, tymax-3*dy, 'Area: '+str(round(s, 2)), fontsize=size(12))
            vv = []
            for ii in range(6):
                if ii > 2:
                    vv.append(f"")
                else:
                    vv.append(f"{gformat(maa1[i, ii])}")
            for l, n, v in zip([lm1, lm2, lm3, lm4, lm5, lm6], [f"x: ", f"h: ", f"w: ", f"", f"", f""], vv):
                l.config(text=n+v)
                l.config(anchor='center')
            try:
                vv = smresult[i]
                for l, v in zip([lm1, lm2, lm3, lm4, lm5, lm6], vv):
                    l.config(text=v)
                    l.config(anchor='w')
            except:
                pass
            try:
                fitpar1(mresult[i], lm1, lm2, lm3, lm4, lm5, lm6)
            except:
                pass
    elif mfp[i] == 2:
        flmcomp = 0
        if maa2[i, 0] == (kmin[i]+kmax[i])/2 and maa2[i, 2] == 0.5:
            fl, = mfitax.plot(x, gl2(x, *maa2[i, :])+lbg, 'r-', lw=2)
        else:
            if flmcomp1 == 1:
                maa2[i, :4] = [
                    mcpx1, mcpy1-lbg[np.argwhere(abs(x-mcpx1) < 0.01)].flatten()[0], 0.02, 0]
                flmcomp = 1
            elif flmcomp2 == 1:
                maa2[i, -4:] = [mcpx2, mcpy2 -
                                lbg[np.argwhere(abs(x-mcpx2) < 0.01)].flatten()[0], 0.02, 0]
                flmcomp = 1
            gl2_1 = gl1(x, *maa2[i, :4])+lbg
            gl2_2 = gl1(x, *maa2[i, -4:])+lbg
            fl, = mfitax.plot(x, gl2(x, *maa2[i, :])+lbg, 'b-', lw=2)
            mfitax.fill_between(x, lbg, gl2_1, facecolor='green', alpha=0.5)
            mfitax.fill_between(x, lbg, gl2_2, facecolor='purple', alpha=0.5)
        if i in mfi_err or i in mfi:
            if i in mfi:
                mfitax.plot(x, gl2(x, *maa2[i, :]) +
                            lbg-y+tymax+dy, color='gray', lw=1)
            else:
                mfitax.plot(x, gl2(x, *maa2[i, :]) +
                            lbg-y+tymax+dy, color='red', lw=1)
            # s=(np.sum((gl2(x,*maa2[i,:])+lbg-y)**2)/(max(x)-min(x)))**0.5
            s = np.std(gl2(x, *maa2[i, :])+lbg-y)  # STD
            mt1=mfitax.text(txmin+dx, tymax-dy, 'Residual STD: '+str(round(s, 2)), fontsize=size(12))
            s = np.sqrt(np.mean((gl2(x, *maa2[i, :])+lbg-y)**2))  # RMS
            mt2=mfitax.text(txmin+dx, tymax-2*dy,
                        'Residual RMS: '+str(round(s, 2)), fontsize=size(12))
            ty = gl1(x, *maa2[i, :4])
            s = np.sum(np.array([((ty[i]+ty[i+1])/2)for i in range(len(x)-1)])
                    # Area 1
                    * np.array(([(x[i+1]-x[i])for i in range(len(x)-1)])))
            mt3=mfitax.text(txmin+dx, tymax-3*dy, 'Area 1: '+str(round(s, 2)), fontsize=size(12))
            ty = gl1(x, *maa2[i, -4:])
            s = np.sum(np.array([((ty[i]+ty[i+1])/2)for i in range(len(x)-1)])
                    # Area 2
                    * np.array(([(x[i+1]-x[i])for i in range(len(x)-1)])))
            mt4=mfitax.text(txmin+dx, tymax-4*dy, 'Area 2: '+str(round(s, 2)), fontsize=size(12))
            try:
                if smcst[i][4] != 0 and smcst[i][5] != 0:
                    mt5=mfitax.text(txmin+dx, tymax-5*dy, 'A1:A2='+str(smcst[i][4])+':'+str(smcst[i][5]), fontsize=size(12))
                mxf1.set(str(smcst[i][0]))
                mxf2.set(str(smcst[i][1]))
                mwf1.set(str(smcst[i][2]))
                mwf2.set(str(smcst[i][3]))
                maf1.set(str(smcst[i][4]))
                maf2.set(str(smcst[i][5]))
            except:
                pass
            vv = []
            for ii in range(6):
                if ii < 3:
                    vv.append(f"{gformat(maa2[i, ii])}")
                else:
                    vv.append(f"{gformat(maa2[i, ii+1])}")

            for l, n, v in zip([lm1, lm3, lm5, lm2, lm4, lm6], [f"x1: ", f"h1: ", f"w1: ", f"x2: ", f"h2: ", f"w2: "], vv):
                l.config(text=n+v)
                l.config(anchor='center')
            try:
                vv = smresult[i]
                for l, v in zip([lm1, lm2, lm3, lm4, lm5, lm6], vv):
                    if 'nofit' not in v:
                        l.config(text=v)
                        l.config(anchor='w')
            except:
                pass
            try:
                if fdo==0 or i not in mf_prswap:
                    fitpar2(mresult[i], lm1, lm2, lm3, lm4, lm5, lm6)
                else:
                    mresult[i]=smresult[i]
                    fdo=0
                    try:
                        if mf_prswap:
                            mf_prswap.remove(i)
                    except:
                        pass
            except:
                pass
    # mfitax.plot(fmxx[i, np.argwhere(fmxx[i, :] >= -20)], lbg, 'g--')
    mfitax.plot(x, lbg, 'g--')
    # if bg_warn==1:  #shirley base line warn
    #     mfitax.plot(fmxx[i,np.argwhere(fmxx[i,:]>=-20)],lbg,'r--')
    # else:
    #     mfitax.plot(fmxx[i,np.argwhere(fmxx[i,:]>=-20)],lbg,'g--')

    # mfitax.scatter(fmxx[i, np.argwhere(fmxx[i, :] >= -20)], y, c='g', s=scale*scale*4)
    mfitax.scatter(x, y, c='g', s=scale*scale*4)
    if (kmin[i], kmax[i]) != (klim.min[i], klim.max[i]):
        klmin = mfitax.axvline(kmin[i], c='r')
        klmax = mfitax.axvline(kmax[i], c='r')
    else:
        klmin = mfitax.axvline(kmin[i], c='grey')
        klmax = mfitax.axvline(kmax[i], c='grey')
        fl.set_alpha(0.3)
    mfitax.set_xlabel(r'k ($\frac{2\pi}{\AA}$)', fontsize=size(14))
    mfitax.set_ylabel('Intensity (Counts)', fontsize=size(14))
    mfitax.set_xticklabels(np.round(mfitax.get_xticks(),2), fontsize=size(12))
    mfitax.set_yticklabels(np.round(mfitax.get_yticks(),2), fontsize=size(12))
    mxl = mfitax.get_xlim()
    myl = mfitax.get_ylim()
    tmxl = np.copy(mxl)
    mfitout.draw()
    mplfi()


def mmove(event):
    global mxdata, mydata, mdxdata, mdydata, x2, y2, mfitax, mfitout, klmin, klmax, kmin, kmax, tpx1, tpx2, tpy1, tpy2, tx2, ty2, mcpx1, mcpy1, mcpx2, mcpy2
    if event.xdata != None:
        if mmof == -1:
            x2, y2 = event.xdata, event.ydata
            px2, py2 = event.x, event.y
            if flmcomp1 == 1:
                mcpx1 = x2
                mcpy1 = y2
                mfitplot()
            elif flmcomp2 == 1:
                mcpx2 = x2
                mcpy2 = y2
                mfitplot()
            elif fklmin == 1 and tkmin+(x2-x1) >= mxl[0] and tkmin+(x2-x1) <= mxl[1]:
                klmin.remove()
                klmin = mfitax.axvline(x2, c='r')
                kmin[mfiti.get()] = x2
                klmax.set_color('r')
                mfitout.draw()
            elif fklmax == 1 and tkmax+(x2-x1) >= mxl[0] and tkmax+(x2-x1) <= mxl[1]:
                klmax.remove()
                klmax = mfitax.axvline(x2, c='r')
                kmax[mfiti.get()] = x2
                klmin.set_color('r')
                mfitout.draw()
            elif fkregion == 1 and tkmin+(x2-x1) >= mxl[0] and tkmax+(x2-x1) <= mxl[1]:
                klmin.remove()
                klmin = mfitax.axvline(tkmin+(x2-x1), c='r')
                kmin[mfiti.get()] = tkmin+(x2-x1)
                klmax.remove()
                klmax = mfitax.axvline(tkmax+(x2-x1), c='r')
                kmax[mfiti.get()] = tkmax+(x2-x1)
                mfitout.draw()
            elif fklmin == 0 and fklmax == 0 and fkregion == 0:
                mfitout.get_tk_widget().delete('rec')
                tpx1, tpy1, tpx2, tpy2 = px1, py1, px2, py2
                mfitout.get_tk_widget().create_rectangle(
                    (px1, 600-py1), (px2, 600-py2), outline='grey', width=2, tag='rec')
                [tpx1, tpx2] = sorted([tpx1, tpx2])
                [tpy1, tpy2] = sorted([tpy1, tpy2])
                tx2, ty2 = x2, y2
                mdxdata.config(text='dx:'+str(' %.3f' % abs(x2-x1)))
                mdydata.config(text='dy:'+str(' %.3f' % abs(y2-y1)))
        mxdata.config(text='xdata:'+str(' %.3f' % event.xdata))
        mydata.config(text='ydata:'+str(' %.3f' % event.ydata))
    else:
        mfitout.get_tk_widget().config(cursor="")
        try:
            mxdata.config(text='xdata:')
            mydata.config(text='ydata:')
        except NameError:
            pass

    # print("event.xdata", event.xdata)
    # print("event.ydata", event.ydata)
    # print("event.inaxes", event.inaxes)
    # print("x", event.x)
    # print("y", event.y)
mmof = 1


def mpress(event):
    # event.button 1:left 3:right 2:mid
    # event.dblclick : bool
    # print('%s click: button=%d, x=%d, y=%d, xdata=%f, ydata=%f' %
    #       ('double' if event.dblclick else 'single', event.button,
    #        event.x, event.y, event.xdata, event.ydata))
    global x1, y1, mmof, px1, py1, mfitax, mfitout, klmin, klmax, fklmin, fklmax, cki, mbase, fkregion, tkmin, tkmax, tx1, ty1
    if event.button == 1 and event.inaxes:
        x1, y1 = event.xdata, event.ydata
        px1, py1 = event.x, event.y
        fklmin, fklmax, fkregion = 0, 0, 0
        tkmin, tkmax = kmin[mfiti.get()], kmax[mfiti.get()]
        if flmcomp1 == 1:
            pass
        elif flmcomp2 == 1:
            pass
        elif mfitout.get_tk_widget().find_withtag('rec') != () and px1 > tpx1 and px1 < tpx2 and py1 > tpy1 and py1 < tpy2:
            pass
        elif abs(x1-kmin[mfiti.get()]) < (tmxl[1]-tmxl[0])/80:
            fklmin = 1

        elif abs(x1-kmax[mfiti.get()]) < (tmxl[1]-tmxl[0])/80:
            fklmax = 1

        elif x1 > kmin[mfiti.get()] and x1 < kmax[mfiti.get()]:
            fkregion = 1

        elif mfitout.get_tk_widget().find_withtag('rec') == ():
            tx1, ty1 = x1, y1
        mmof = -1
    elif event.button == 3:
        try:
            mfitout.get_tk_widget().delete('rec')
            mdxdata.config(text='dx:')
            mdydata.config(text='dy:')
            mt1.set_visible(True)
            mt2.set_visible(True)
            mt3.set_visible(True)
            mt4.set_visible(True)
            mt5.set_visible(True)
        except:
            pass
        mfitax.set_xlim(mxl)
        mfitax.set_ylim(myl)
        mprplot(mxl)
        mfitout.draw()
        mmof = 1


def mrelease(event):
    global x1, y1, x2, y2, mmof, mfitout, mfitax, fklmax, fklmin, klmin, klmax, kmin, kmax, fkregion, tmxl, mbgv
    if event.button == 1 and mmof == -1 and event.inaxes:
        x2, y2 = event.xdata, event.ydata
        if kmin[mfiti.get()] > kmax[mfiti.get()]:
            kmin[mfiti.get()], kmax[mfiti.get()
                                    ] = kmax[mfiti.get()], kmin[mfiti.get()]
            klmin, klmax = klmax, klmin
        else:
            kmin[mfiti.get()], kmax[mfiti.get()
                                    ] = kmin[mfiti.get()], kmax[mfiti.get()]
            klmin, klmax = klmin, klmax
        if fklmin == 0 and fklmax == 0 and fkregion == 0 and (x2, y2) == (x1, y1) and px1 > tpx1 and px1 < tpx2 and py1 > tpy1 and py1 < tpy2:
            try:
                mfitout.get_tk_widget().delete('rec')
                mt1.set_visible(False)
                mt2.set_visible(False)
                mt3.set_visible(False)
                mt4.set_visible(False)
                mt5.set_visible(False)
            except:
                pass
            mfitax.set_xlim(sorted([tx1, tx2]))
            mfitax.set_ylim(sorted([ty1, ty2]))
            mprplot(sorted([tx1, tx2]))
            tmxl = sorted([x1, x2])
            mfitout.draw()
        elif fklmin == 1 or fklmax == 1 or fkregion == 1:
            func_cki()
            x1, x2, y1, y2 = [], [], [], []
            mbgv=0
            mfit()
            mfitplot()
        mmof = 1


def tmstate():
    try:
        while True:
            mstate.config(text=str(mst.get()))
    except KeyboardInterrupt:
        pass


def mfli(event):
    global mfiti
    i=mfiti.get()
    if i>0:
        mfiti.set(i-1)
    else:
        mfiti.set(len(ev)-1)
        
def mfri(event):
    global mfiti
    i=mfiti.get()
    if i<len(ev)-1:
        mfiti.set(i+1)
    else:
        mfiti.set(0)

def mflind():
    global mfiti
    ti = mfiti.get()
    if ti in mfi:
        for i in range(ti+1):
            if ti-i not in mfi:
                mfiti.set(ti-i)
                break
    elif ti in mfi_err:
        for i in range(ti+1):
            if ti-i not in mfi_err:
                mfiti.set(ti-i)
                break
    elif ti in mfi_x:
        for i in range(ti+1):
            if ti-i in mfi or ti-i in mfi_err:
                mfiti.set(ti-i)
                break
        if i == ti and ti != 0:
            mfiti.set(ti-1)


def mfrind():
    global mfiti
    ti = mfiti.get()
    if ti in mfi:
        for i in range(len(ev)-ti):
            if ti+i not in mfi:
                mfiti.set(ti+i)
                break
    elif ti in mfi_err:
        for i in range(len(ev)-ti):
            if ti+i not in mfi_err:
                mfiti.set(ti+i)
                break
    elif ti in mfi_x:
        for i in range(len(ev)-ti):
            if ti+i in mfi or ti+i in mfi_err:
                mfiti.set(ti+i)
                break
        if i == len(ev)-ti-1 and ti != len(ev)-1:
            mfiti.set(ti+1)


def mfcomp1():
    global mbcomp1, flmcomp1, mbcomp2, flmcomp2
    if flmcomp2 == -1:
        flmcomp1 *= -1
        if flmcomp1 == 1:
            mbcomp1.config(text='Comp 1', bg='green')
        else:
            mbcomp1.config(text='Comp 1', bg='white')
    else:
        flmcomp2 *= -1
        flmcomp1 *= -1
        mbcomp1.config(text='Comp 1', bg='green')
        mbcomp2.config(text='Comp 2', bg='white')


def mfcomp2():
    global mbcomp1, flmcomp1, mbcomp2, flmcomp2
    if flmcomp1 == -1:
        flmcomp2 *= -1
        if flmcomp2 == 1:
            mbcomp2.config(text='Comp 2', bg='purple')
        else:
            mbcomp2.config(text='Comp 2', bg='white')
    else:
        flmcomp1 *= -1
        flmcomp2 *= -1
        mbcomp2.config(text='Comp 2', bg='purple')
        mbcomp1.config(text='Comp 1', bg='white')


def ffitcp():
    mfit()
    mfitplot()


def fmaccept():
    global mfi, mfi_x, mfi_err
    msave_state()
    i = mfiti.get()
    if i not in mfi:
        mfi.append(i)
    if i in mfi_x:
        mfi_x.remove(i)
    if i in mfi_err:
        mfi_err.remove(i)
    mfitplot()


def fmreject():
    global mfi, mfi_x, mfi_err, mbreject, flmreject, mirej
    msave_state()
    i = mfiti.get()
    flmreject *= -1
    if flmreject == 1:
        mirej = i
        mbreject.config(text='End Reject', bg='red')
    else:
        ti = sorted([i, mirej])
        for i in np.linspace(ti[0], ti[1], ti[1]-ti[0]+1, dtype=int):
            if i not in mfi_x:
                mfi_x.append(i)
            if i in mfi:
                mfi.remove(i)
            if i in mfi_err:
                mfi_err.remove(i)
        mbreject.config(text='Reject', bg='white')
        mfitplot()
    


def o_fmwf1(*e):
    global mwf1
    if '' == mwf1.get():
        mwf1.set('0')
        min_w1.select_range(0, 1)


def fmwf1(*e):
    t = threading.Thread(target=o_fmwf1)
    t.daemon = True
    t.start()


def o_fmwf2(*e):
    global mwf2
    if '' == mwf2.get():
        mwf2.set('0')
        min_w2.select_range(0, 1)


def fmwf2(*e):
    t = threading.Thread(target=o_fmwf2)
    t.daemon = True
    t.start()


def o_fmaf1(*e):
    global maf1
    if '' == maf1.get():
        maf1.set('0')
        min_a1.select_range(0, 1)


def fmaf1(*e):
    t = threading.Thread(target=o_fmaf1)
    t.daemon = True
    t.start()


def o_fmaf2(*e):
    global maf2
    if '' == maf2.get():
        maf2.set('0')
        min_a2.select_range(0, 1)


def fmaf2(*e):
    t = threading.Thread(target=o_fmaf2)
    t.daemon = True
    t.start()


def o_fmxf1(*e):
    global mxf1
    if '' == mxf1.get():
        mxf1.set('1')
        min_x1.select_range(0, 1)


def fmxf1(*e):
    t = threading.Thread(target=o_fmxf1)
    t.daemon = True
    t.start()


def o_fmxf2(*e):
    global mxf2
    if '' == mxf2.get():
        mxf2.set('0')
        min_x2.select_range(0, 1)


def fmxf2(*e):
    t = threading.Thread(target=o_fmxf2)
    t.daemon = True
    t.start()


def fmposcst():
    global mbposcst, flmposcst, min_x1, min_x2
    flmposcst *= -1
    if flmposcst == 1:
        min_x1.config(state='normal')
        min_x2.config(state='normal')
        mbposcst.config(bg='purple')
    else:
        min_x1.config(state='disabled')
        min_x2.config(state='disabled')
        mbposcst.config(bg='white')


def mjob():     # MDC Fitting GUI
    global g, mfiti, mfitfig, mfitout, mgg, mxdata, mydata, mdxdata, mdydata, miout, mifig, mfi, mfi_err, mfi_x, mbrmv, flmrmv, mbcgl2, mfp, flmcgl2, fpr, mst, mstate, mwf1, mwf2, maf1, maf2, mxf1, mxf2, mlind, mrind, mbcomp1, flmcomp1, mbcomp2, flmcomp2, min_w1, min_w2, min_a1, min_a2, min_x1, min_x2, lm1, lm2, lm3, lm4, lm5, lm6, mresult, smresult, mbposcst, flmposcst, smcst, mbreject, flmreject, mfitprfig1, mfitprout1, mfitprfig2, mfitprout2, mfitprfig3, mfitprout3, mfpr, mprf, mpr, b_pr, mbgv, fdo
    mgg = tk.Toplevel(g, bg='white')
    mdpi = mgg.winfo_fpixels('1i')
    t_sc_w = windll.user32.GetSystemMetrics(0)
    tx = int(t_sc_w*windll.shcore.GetScaleFactorForDevice(0)/100) if g.winfo_x()+g.winfo_width()/2 > t_sc_w else 0
    mgg.geometry(f"1900x1000+{tx}+{sc_y}")
    mgg.title('MDC Lorentz Fit')
    fdo=0
    mpr=0   #button flag 1:ON 0:OFF initial 0:OFF
    # b_pr = tk.Button(mgg, text='Real Time Preview ON', command=f_pr, width=20, height=2, font=('Arial', size(12), "bold"), bg='white')
    # b_pr.grid(row=0, column=0)
    
    mfpr = 0    #preview plot pcolormesh flag 1:setdata 0:pcolormesh
    fr_pr1 = tk.Frame(master=mgg, bg='white')
    fr_pr1.grid(row=1, column=0)
    b_pr = tk.Button(fr_pr1, text='Real Time Preview OFF', command=f_pr, width=20, height=2, font=('Arial', size(12), "bold"), bg='white',fg='red')
    b_pr.grid(row=0, column=0)
    mfitprfig2 = Figure(figsize=(3*scale, 3*scale), layout='constrained')
    mfitprout2 = FigureCanvasTkAgg(mfitprfig2, master=fr_pr1)
    mfitprout2.get_tk_widget().grid(row=1, column=0)
    mfitprfig3 = Figure(figsize=(3*scale, 3*scale), layout='constrained')
    mfitprout3 = FigureCanvasTkAgg(mfitprfig3, master=fr_pr1)
    mfitprout3.get_tk_widget().grid(row=2, column=0)
    
    fr_pr2 = tk.Frame(master=mgg, bg='white')
    fr_pr2.grid(row=2, column=0)
    mfitprfig1 = Figure(figsize=(3*scale, 2*scale), layout='constrained')
    mfitprout1 = FigureCanvasTkAgg(mfitprfig1, master=fr_pr2)
    mfitprout1.get_tk_widget().grid(row=0, column=0)
    mst = queue.Queue(maxsize=0)
    mstate = tk.Label(mgg, text='', font=(
        "Arial", size(14), "bold"), bg="white", fg="black")
    mstate.grid(row=0, column=1)
    fr = tk.Frame(master=mgg, bg='white')
    fr.grid(row=1, column=1)
    frind = tk.Frame(master=fr, bg='white')
    frind.grid(row=0, column=0)
    mlind = tk.Button(frind, text='<<', command=mflind, width=10,
                      height=2, font=('Arial', size(14), "bold"), bg='white')
    mlind.grid(row=0, column=0)
    mrind = tk.Button(frind, text='>>', command=mfrind, width=10,
                      height=2, font=('Arial', size(14), "bold"), bg='white')
    mrind.grid(row=0, column=2)

    mfiti = tk.IntVar()
    mfiti.set(0)
    mfiti.trace_add('write', fchki)
    if ScaleFactor <= 100:
        tlength = int(1/0.975*6*mdpi)  # 100
        twidth = int(1/0.975*0.2*mdpi)
    elif ScaleFactor <= 125:
        tlength = int(1/0.985*6*mdpi)  # 125
        twidth = int(1/0.985*0.2*mdpi)
    elif ScaleFactor <= 150:
        tlength = int(1*6*mdpi)  # 150
        twidth = int(1*0.2*mdpi)
    elif ScaleFactor <= 175:
        tlength = int(0.99*6*mdpi)  # 175
        twidth = int(0.99*0.2*mdpi)
    elif ScaleFactor <= 200:
        tlength = int(0.985*6*mdpi)  # 200
        twidth = int(0.985*0.2*mdpi)
    elif ScaleFactor <= 225:
        tlength = int(0.98*6*mdpi)  # 225
        twidth = int(0.98*0.2*mdpi)
    elif ScaleFactor <= 250:
        tlength = int(0.977*6*mdpi)  # 250
        twidth = int(0.977*0.2*mdpi)
    elif ScaleFactor <= 275:
        tlength = int(0.975*6*mdpi)  # 275
        twidth = int(0.975*0.2*mdpi)
    elif ScaleFactor <= 300:
        tlength = int(0.97*6*mdpi)  # 300
        twidth = int(0.97*0.2*mdpi)
    tlength = int(tlength*scale)
    twidth = int(twidth*scale)
    chi = tk.Scale(frind, label='Index', from_=0, to=len(ev)-1, orient='horizontal',
                   variable=mfiti, state='active', bg='white', fg='black', length=tlength, width=twidth, resolution=1)
    chi.grid(row=0, column=1)

    mfi, mfi_err, mfi_x = [], [], [i for i in range(len(ev))]
    mifig = Figure(figsize=(6*scale, 0.2*scale), layout='tight')
    miout = FigureCanvasTkAgg(mifig, master=frind)
    miout.get_tk_widget().grid(row=1, column=1)

    mfitfig = Figure(figsize=(8*scale, 6*scale), layout='constrained')
    mfitout = FigureCanvasTkAgg(mfitfig, master=fr)
    mfitout.get_tk_widget().grid(row=1, column=0)
    mfitout.mpl_connect('motion_notify_event', mmove)
    mfitout.mpl_connect('button_press_event', mpress)
    mfitout.mpl_connect('button_release_event', mrelease)

    xydata = tk.Frame(master=fr, bd=5, bg='white')
    xydata.grid(row=2, column=0)

    mxdata = tk.Label(xydata, text='xdata:', font=(
        "Arial", size(12), "bold"), width='15', height='1', bd=5, bg='white')
    mxdata.grid(row=0, column=0)
    mydata = tk.Label(xydata, text='ydata:', font=(
        "Arial", size(12), "bold"), width='15', height='1', bd=5, bg='white')
    mydata.grid(row=0, column=1)
    mdxdata = tk.Label(xydata, text='dx:', font=(
        "Arial", size(12), "bold"), width='15', height='1', bd=5, bg='white')
    mdxdata.grid(row=0, column=2)
    mdydata = tk.Label(xydata, text='dy:', font=(
        "Arial", size(12), "bold"), width='15', height='1', bd=5, bg='white')
    mdydata.grid(row=0, column=3)

    # bstop=tk.Button(gg,command=stop,text='Stop',font=('Arial',20),bd=5)
    # bstop.grid(row=1,column=0)

    frpara = tk.Frame(master=mgg, bd=5, bg='white')
    frpara.grid(row=1, column=2)
    
    mfp = [1 for i in range(len(ev))]
    try:
        if fpr == 1:
            mfp = list(smfp)
            mfi = list(smfi)
    except:
        pass
    flmcgl2 = -1
    frre = tk.Frame(master=frpara, bd=5, bg='white')
    frre.grid(row=0, column=0)
    b_mundo = tk.Button(frre, text='Undo', command=mundo,width=25, height=1, font=('Arial', size(14), "bold"), bg='white')
    b_mundo.grid(row=0, column=0)
    b_mredo = tk.Button(frre, text='Redo', command=mredo,width=25, height=1, font=('Arial', size(14), "bold"), bg='white')
    b_mredo.grid(row=0, column=1)
    frpara00 = tk.Frame(master=frpara, bd=5, bg='white')
    frpara00.grid(row=1, column=0)

    frfitpar = tk.Frame(master=frpara00, bd=5, bg='white')
    frfitpar.grid(row=0, column=0)
    lm1 = tk.Label(frfitpar, anchor='w', text='', font=(
        "Arial", size(16), "bold"), width='50', height='1', bd=5, bg='white')
    lm1.grid(row=0, column=0)
    lm2 = tk.Label(frfitpar, anchor='w', text='', font=(
        "Arial", size(16), "bold"), width='50', height='1', bd=5, bg='white')
    lm2.grid(row=1, column=0)
    lm3 = tk.Label(frfitpar, anchor='w', text='', font=(
        "Arial", size(16), "bold"), width='50', height='1', bd=5, bg='white')
    lm3.grid(row=2, column=0)
    lm4 = tk.Label(frfitpar, anchor='w', text='', font=(
        "Arial", size(16), "bold"), width='50', height='1', bd=5, bg='white')
    lm4.grid(row=3, column=0)
    lm5 = tk.Label(frfitpar, anchor='w', text='', font=(
        "Arial", size(16), "bold"), width='50', height='1', bd=5, bg='white')
    lm5.grid(row=4, column=0)
    lm6 = tk.Label(frfitpar, anchor='w', text='', font=(
        "Arial", size(16), "bold"), width='50', height='1', bd=5, bg='white')
    lm6.grid(row=5, column=0)

    frYN = tk.Frame(master=frfitpar, bd=5, bg='white')
    frYN.grid(row=6, column=0)
    mbaccept = tk.Button(frYN, text='Accept', command=fmaccept,
                         width=25, height=1, font=('Arial', size(14), "bold"), bg='white')
    mbaccept.grid(row=0, column=0)
    mbreject = tk.Button(frYN, text='Reject', command=fmreject,
                         width=25, height=1, font=('Arial', size(14), "bold"), bg='white')
    mbreject.grid(row=0, column=1)

    l1 = tk.Label(frpara00, text='Index Operation', font=(
        "Arial", size(12), "bold"), width='15', height='1', bd=5, bg='white')
    l1.grid(row=1, column=0)
    froperind = tk.Frame(master=frpara00, bd=5, bg='white')
    froperind.grid(row=2, column=0)
    mbcgl2 = tk.Button(froperind, text='Add 2 Peaks', command=fmcgl2,
                       width=25, height=1, font=('Arial', size(14), "bold"), bg='white')
    mbcgl2.grid(row=0, column=0)
    mbrmv = tk.Button(froperind, text='Remove', command=fmrmv,
                      width=25, height=1, font=('Arial', size(14), "bold"), bg='white')
    mbrmv.grid(row=0, column=1)
    mbcomp1 = tk.Button(froperind, text='Comp 1', command=mfcomp1,
                        width=14, height=1, font=('Arial', size(14), "bold"), bg='white')
    mbcomp1.grid(row=1, column=0)
    mbcomp2 = tk.Button(froperind, text='Comp 2', command=mfcomp2,
                        width=14, height=1, font=('Arial', size(14), "bold"), bg='white')
    mbcomp2.grid(row=1, column=1)

    mbfitcp = tk.Button(master=frpara00, text='Fit Components', command=ffitcp,
                        width=40, height=1, font=('Arial', size(14), "bold"), bg='white')
    mbfitcp.grid(row=3, column=0)

    frwr = tk.Frame(master=frpara00, bd=5, bg='white')
    frwr.grid(row=4, column=0)
    l2 = tk.Label(frwr, text='FWHM Ratio', font=(
        "Arial", size(12), "bold"), width='15', height='1', bd=5, bg='white')
    l2.grid(row=0, column=1)
    l3 = tk.Label(frwr, text=':', font=("Arial", size(12), "bold"),
                  width='15', height='1', bd=5, bg='white')
    l3.grid(row=1, column=1)
    mwf1 = tk.StringVar()
    mwf1.set('0')
    mwf1.trace_add('write', fmwf1)
    min_w1 = tk.Entry(frwr, font=("Arial", size(12), "bold"),
                      width=7, textvariable=mwf1, bd=5)
    min_w1.grid(row=1, column=0)
    mwf2 = tk.StringVar()
    mwf2.set('0')
    mwf2.trace_add('write', fmwf2)
    min_w2 = tk.Entry(frwr, font=("Arial", size(12), "bold"),
                      width=7, textvariable=mwf2, bd=5)
    min_w2.grid(row=1, column=2)

    frar = tk.Frame(master=frpara00, bd=5, bg='white')
    frar.grid(row=5, column=0)
    l2 = tk.Label(frar, text='Area Ratio', font=(
        "Arial", size(12), "bold"), width='15', height='1', bd=5, bg='white')
    l2.grid(row=0, column=1)
    l3 = tk.Label(frar, text=':', font=("Arial", size(12), "bold"),
                  width='15', height='1', bd=5, bg='white')
    l3.grid(row=1, column=1)
    maf1 = tk.StringVar()
    maf1.set('0')
    maf1.trace_add('write', fmaf1)
    min_a1 = tk.Entry(frar, font=("Arial", size(12), "bold"),
                      width=7, textvariable=maf1, bd=5)
    min_a1.grid(row=1, column=0)
    maf2 = tk.StringVar()
    maf2.set('0')
    maf2.trace_add('write', fmaf2)
    min_a2 = tk.Entry(frar, font=("Arial", size(12), "bold"),
                      width=7, textvariable=maf2, bd=5)
    min_a2.grid(row=1, column=2)

    mbposcst = tk.Button(frpara00, text='Position constraint', command=fmposcst,
                         width=25, height=1, font=('Arial', size(14), "bold"), bg='white')
    mbposcst.grid(row=6, column=0)

    frxr = tk.Frame(master=frpara00, bd=5, bg='white', padx=30)
    frxr.grid(row=7, column=0)
    l3 = tk.Label(frxr, text='x2 =', font=("Arial", size(12), "bold"),
                  width='5', height='1', bd=5, bg='white')
    l3.grid(row=0, column=0)
    mxf1 = tk.StringVar()
    mxf1.set('1')
    mxf1.trace_add('write', fmxf1)
    min_x1 = tk.Entry(frxr, font=("Arial", size(12), "bold"), width=7,
                      textvariable=mxf1, bd=5, state='disabled')
    min_x1.grid(row=0, column=1)
    l3 = tk.Label(frxr, text='* x1 +', font=("Arial", size(12), "bold"),
                  width='5', height='1', bd=5, bg='white')
    l3.grid(row=0, column=2)
    mxf2 = tk.StringVar()
    mxf2.set('0')
    mxf2.trace_add('write', fmxf2)
    min_x2 = tk.Entry(frxr, font=("Arial", size(12), "bold"), width=7,
                      textvariable=mxf2, bd=5, state='disabled')
    min_x2.grid(row=0, column=3)

    frout = tk.Frame(master=mgg, bd=5, bg='white')
    frout.grid(row=2, column=1)
    bfall = tk.Button(frout, text='Fit All', command=fmfall,
                      width=25, height=1, font=('Arial', size(14), "bold"), bg='white')
    bfall.grid(row=0, column=0)

    flmreject = -1
    flmposcst = -1
    flmrmv = -1
    flmcomp1 = -1
    flmcomp2 = -1

    bprv = tk.Button(frout, text='Preview', command=fmpreview, width=25,
                     height=1, font=('Arial', size(14), "bold"), bg='white')
    bprv.grid(row=1, column=0)
    
    bend = tk.Button(frout, text='Export All', command=fmend, width=25,
                     height=1, font=('Arial', size(14), "bold"), bg='white')
    bend.grid(row=2, column=0)

    frexp = tk.Frame(frout, bd=5, bg='white')
    frexp.grid(row=3, column=0)

    bend1 = tk.Button(frexp, text='Export Comp 1', command=fmend1, width=25,
                      height=1, font=('Arial', size(14), "bold"), bg='white')
    bend1.grid(row=0, column=0)
    
    bend2 = tk.Button(frexp, text='Export Comp 2', command=fmend2, width=25,
                      height=1, font=('Arial', size(14), "bold"), bg='white')
    bend2 .grid(row=0, column=1)
    
    mbgv=0
    mgg.bind("<Up>",mfbgu)
    mgg.bind("<Down>",mfbgd)
    mgg.bind("<Left>",mfli)
    mgg.bind("<Right>",mfri)
    
    ##### test ##### 
    # mprbg1()
    # mprbg2()
    # mprbg3()
    
    mresult = [[]for i in range(len(ev))]
    try:
        flsmresult = smresult
        flsmcst = smcst
    except:
        smcst=np.zeros(len(ev)*6).reshape(len(ev),6)
        smresult = [1]
    if mprfit == 1:
        fmfall()
    else:
        mfitplot()
    tt = threading.Thread(target=tmstate)
    tt.daemon = True
    tt.start()
    mgg.update()
    screen_width = mgg.winfo_reqwidth()
    screen_height = mgg.winfo_reqheight()
    tx = int(t_sc_w*windll.shcore.GetScaleFactorForDevice(0)/100) if g.winfo_x()+g.winfo_width()/2 > t_sc_w else 0
    mgg.geometry(f"{screen_width}x{screen_height}+{tx}+{sc_y}")
    mgg.update()


#################################### prefit ######################################################
mprfit = 0

class oklim():
    def __init__(self, npzf, ev, phi):
        if npzf:
            avg = np.mean(phi)
            l = max(phi) - min(phi)
            self.min = np.float64([avg - l/40 for i in ev])
            self.max = np.float64([avg + l/40 for i in ev])
        else:
            self.min = np.float64((2*m*ev*1.602176634*10**-19)**0.5*np.sin(-0.5/180*np.pi)*10**-10/(h/2/np.pi))
            self.max = np.float64((2*m*ev*1.602176634*10**-19)**0.5*np.sin(0.5/180*np.pi)*10**-10/(h/2/np.pi))
        

def fitm():
    global ev, phi, data, mvv, maa1, maa2, fmxx, fmyy, fmx, fmy, kmin, kmax, cki, mbase, mprfit, mf_prswap, smresult, klim
    mprfit = 0
    cki = []
    mbase = [0 for i in range(len(ev))]
    mf_prswap = []
    klim = oklim(npzf, ev, phi)
    if fpr == 1:
        try:
            kmin, kmax = skmin, skmax
        except NameError:
            kmin, kmax = klim.min.copy(), klim.max.copy()
        if len(scki) >= 2:
            cki = scki
    else:
        kmin, kmax = klim.min.copy(), klim.max.copy()
    # fmxx = np.float64((np.ones(len(phi)*len(ev))).reshape(len(ev), len(phi)))
    # fmyy = np.float64((np.ones(len(phi)*len(ev))).reshape(len(ev), len(phi)))
    # fmxx *= -50
    # fmyy *= -50
    fmx = np.float64(np.arange(len(phi)*len(ev)).reshape(len(ev), len(phi)))
    fmy = np.float64(np.arange(len(phi)*len(ev)).reshape(len(ev), len(phi)))
    mvv = np.float64(np.arange(len(ev)))
    maa1 = np.float64(np.arange(4*len(ev)).reshape(len(ev), 4))
    maa2 = np.float64(np.arange(8*len(ev)).reshape(len(ev), 8))
    pbar = tqdm.tqdm(total=len(ev), desc='MDC', colour='green')
    for i, v in enumerate(ev):
        ecut = data.sel(eV=v, method='nearest')
        if npzf:x = phi
        else:x = np.float64((2*m*v*1.602176634*10**-19)**0.5*np.sin(phi/180*np.pi)*10**-10/(h/2/np.pi))
        y = ecut.to_numpy().reshape(len(x))
        xx, x_arg = filter(x, kmin[i], kmax[i])
        # tx = x[np.argwhere(x >= kmin[i])].flatten()
        # xx = tx[np.argwhere(tx <= kmax[i])].flatten()
        # ty = y[np.argwhere(x >= kmin[i])].flatten()
        # yy = ty[np.argwhere(tx <= kmax[i])].flatten()
        # yy = y[x_arg]
        # yy = np.where(yy > int(base.get()), yy, int(base.get()))
        try:
            if i in smfi and fpr == 1:
                a1 = smaa1[i, :]
                a2 = smaa2[i, :]
                smrx1 = smresult[i, 0]
                smrx2 = smresult[i, 1]
                smrh1 = smresult[i, 2]
                smrh2 = smresult[i, 3]
                smrw1 = smresult[i, 4]
                smrw2 = smresult[i, 5]
                if smaa1[i, 1] == 10 or smaa2[i, 1] == 10:
                    mprfit = 1
                else:
                    # fmxx[i, :len(xx)] = xx
                    # tx = fmxx[i, np.argwhere(fmxx[i, :] >= -20)].flatten()
                    tx = xx
                    ty = gl1(tx, *a2[:4])
                    s1 = np.sum(np.array([((ty[i]+ty[i+1])/2)for i in range(len(tx)-1)])
                            # Area 1
                            * np.array(([(tx[i+1]-tx[i])for i in range(len(tx)-1)])))
                    ty = gl1(tx, *a2[-4:])
                    s2 = np.sum(np.array([((ty[i]+ty[i+1])/2)for i in range(len(tx)-1)])
                            # Area 2
                            * np.array(([(tx[i+1]-tx[i])for i in range(len(tx)-1)])))
                    if s1 < s2:
                        t1, t2 = a2[:4], a2[-4:]
                        a2 = np.array([t2, t1]).flatten()
                        mf_prswap.append(i)
                        smrx1 = smrx1.replace('x2', 'x1').replace('x1:', 'x2:')
                        smrx2 = smrx2.replace('x1', 'x2').replace('x2:', 'x1:')
                        smrh1 = smrh1.replace('h1:', 'h2:')
                        smrh2 = smrh2.replace('h2:', 'h1:')
                        smrw1 = smrw1.replace('w1:', 'w2:').replace('w2', 'w1')
                        smrw2 = smrw2.replace('w2:', 'w1:').replace('w1', 'w2')
                        smr = np.array([smrx2,smrx1,smrh2,smrh1,smrw2,smrw1]).flatten()
                    else:
                        smr = np.array([smrx1,smrx2,smrh1,smrh2,smrw1,smrw2]).flatten()
            else:
                a1 = [(kmin[i]+kmax[i])/2, (np.max(y) -
                                            int(base.get())), 0.5, int(base.get())]
                a2 = [(kmin[i]+kmax[i])/2, (np.max(y)-int(base.get())), 0.5, int(base.get()),
                      (kmin[i]+kmax[i])/2, (np.max(y)-int(base.get())), 5, int(base.get())]
                smr = ['' for i in range(6)]
        except:
            a1 = [(kmin[i]+kmax[i])/2, (np.max(y) -
                                        int(base.get())), 0.5, int(base.get())]
            a2 = [(kmin[i]+kmax[i])/2, (np.max(y)-int(base.get())), 0.5, int(base.get()),
                  (kmin[i]+kmax[i])/2, (np.max(y)-int(base.get())), 0.5, int(base.get())]
            smr = ['' for i in range(6)]

        # fmxx[i, :len(xx)] = xx
        # fmyy[i, :len(yy)] = yy
        fmxx, fmyy = 1, 1 # 未使用 暫時保留
        
        fmx[i, :] = x
        fmy[i, :] = y
        mvv[i] = v
        maa1[i, :] = a1
        maa2[i, :] = a2
        try:
            smresult[i, :]=smr
        except:
            pass
        pbar.update(1)
    pbar.close()
    global mgg
    try:
        mgg.destroy()
    except:
        pass
    tt1 = threading.Thread(target=mjob)
    tt1.daemon = True
    tt1.start()


eprfit = 0


def fite():
    global ev, phi, data, evv, eaa1, eaa2, fexx, feyy, fex, fey, emin, emax, cei, ebase, eprfit
    cei = []
    ebase = [0 for i in range(len(phi))]
    if fpr == 1:
        try:
            emin, emax = semin, semax
        except NameError:
            emin = np.float64([np.min(ev) for i in range(len(phi))])
            emax = np.float64([np.max(ev) for i in range(len(phi))])
        if len(scei) >= 2:
            cei = scei
    else:
        emin = np.float64([np.min(ev) for i in range(len(phi))])
        emax = np.float64([np.max(ev) for i in range(len(phi))])
    fexx = np.float64((np.ones(len(ev)*len(phi))).reshape(len(phi), len(ev)))
    feyy = np.float64((np.ones(len(ev)*len(phi))).reshape(len(phi), len(ev)))
    fexx *= -50
    feyy *= -50
    fex = np.float64(np.arange(len(ev)*len(phi)).reshape(len(phi), len(ev)))
    fey = np.float64(np.arange(len(ev)*len(phi)).reshape(len(phi), len(ev)))
    evv = np.float64(np.arange(len(phi)))
    eaa1 = np.float64(np.arange(4*len(phi)).reshape(len(phi), 4))
    eaa2 = np.float64(np.arange(8*len(phi)).reshape(len(phi), 8))
    pbar = tqdm.tqdm(total=len(phi), desc='EDC', colour='blue')
    for i, v in enumerate(phi):
        angcut = data.sel(phi=v, method='nearest')
        x = np.float64(ev)
        y = angcut.to_numpy().reshape(len(x))
        tx = x[np.argwhere(x >= emin[i])].flatten()
        xx = tx[np.argwhere(tx <= emax[i])].flatten()
        ty = y[np.argwhere(x >= emin[i])].flatten()
        yy = ty[np.argwhere(tx <= emax[i])].flatten()
        yy = np.where(yy > int(base.get()), yy, int(base.get()))
        try:
            if i in sefi and fpr == 1:
                a1 = seaa1[i, :]
                a2 = seaa2[i, :]
                if seaa1[i, 1] == 10 or seaa2[i, 1] == 10:
                    eprfit = 1
            else:
                a1 = [(emin[i]+emax[i])/2, (np.max(y) -
                                            int(base.get())), 5, int(base.get())]
                a2 = [(emin[i]+emax[i])/2, (np.max(y)-int(base.get())), 5, int(base.get()),
                      (emin[i]+emax[i])/2, (np.max(y)-int(base.get())), 5, int(base.get())]
        except:
            a1 = [(emin[i]+emax[i])/2, (np.max(y) -
                                        int(base.get())), 5, int(base.get())]
            a2 = [(emin[i]+emax[i])/2, (np.max(y)-int(base.get())), 5, int(base.get()),
                  (emin[i]+emax[i])/2, (np.max(y)-int(base.get())), 5, int(base.get())]

        fexx[i, :len(xx)] = xx
        feyy[i, :len(yy)] = yy
        fex[i, :] = x
        fey[i, :] = y
        evv[i] = v
        eaa1[i, :] = a1
        eaa2[i, :] = a2
        pbar.update(1)
    pbar.close()
    global egg
    try:
        egg.destroy()
    except:
        pass
    tt2 = threading.Thread(target=ejob)
    tt2.daemon = True
    tt2.start()


def cmfit(*e):
    t1 = threading.Thread(target=fitm)
    t1.start()


def cefit(*e):
    t1 = threading.Thread(target=fite)
    t1.start()

############################################################
############################################################
############################################################
############################################################


def o_fitgl():
    try:
        # global pos,fwhm,epos,efwhm,base,k_offset,st,evv,eaa,fexx,feyy,fex,fey,mvv,maa,fmxx,fmyy,fmx,fmy
        global st
        print('fitting')
        st.put('fitting')
        t1 = threading.Thread(target=fitm)
        t2 = threading.Thread(target=fite)
        t1.start()
        t2.start()
        t1.join()
        t2.join()
        print('Done')
        st.put('Done')
    except:
        pass


def clmfit():
    global rpos, pos, fwhm, fev, ophi
    rpos = []
    pos = []
    fwhm = []
    fev = []
    ophi = []


def clefit():
    global fphi, epos, ffphi, efwhm, fk
    fphi = []
    epos = []
    ffphi = []
    efwhm = []
    fk = []


def cminrange(*e):
    if vcmax.get()-vcmin.get() < 1:
        try:
            vcmax.set(vcmin.get())
        except:
            pass
    try:
        h0.set_clim([vcmin.get(), vcmax.get()])
        out.draw()
    except:
        pass


def cmaxrange(*e):
    if vcmax.get()-vcmin.get() < 1:
        try:
            vcmin.set(vcmax.get())
        except:
            pass
    try:
        h0.set_clim([vcmin.get(), vcmax.get()])
        out.draw()
    except:
        pass


def o_fbb_offset(*e):
    global bb_offset
    if '' == bb_offset.get():
        bb_offset.set('0')
        bboffset.select_range(0, 1)
    os.chdir(cdir)
    np.savez(os.path.join(cdir, '.MDC_cut', 'bb.npz'), path=bpath, be=be, k=k, bbo=float(bb_offset.get()), bbk=float(bbk_offset.get()))


def fbb_offset(*e):
    t = threading.Thread(target=o_fbb_offset)
    t.daemon = True
    t.start()


def o_fbbk_offset(*e):
    global bbk_offset
    if '' == bbk_offset.get():
        bbk_offset.set('1')
        bbkoffset.select_range(0, 1)
    os.chdir(cdir)
    np.savez(os.path.join(cdir, '.MDC_cut', 'bb.npz'), path=bpath, be=be, k=k, bbo=float(bb_offset.get()), bbk=float(bbk_offset.get()))


def fbbk_offset(*e):
    t = threading.Thread(target=o_fbbk_offset)
    t.daemon = True
    t.start()


def o_fbase(*e):
    global base
    if '' == base.get():
        base.set('0')
        in_fit.select_range(0, 1)


def fbase(*e):
    t = threading.Thread(target=o_fbase)
    t.daemon = True
    t.start()


def o_flowlim(*e):
    global lowlim
    if '' == lowlim.get():
        lowlim.set('0')
        in_lowlim.select_range(0, 1)


def flowlim(*e):
    t = threading.Thread(target=o_flowlim)
    t.daemon = True
    t.start()


def o_reload(*e):
    global k_offset, fev, ophi, rpos, pos, ffphi, fwhm, fk, st, kmin, kmax, smresult, smcst, smaa1, smaa2, smfp, smfi, skmin, skmax, epos, efwhm, ffphi, fk, emin, emax, seaa1, seaa2, sefp, sefi, semin, semax
    if '' == k_offset.get():
        k_offset.set('0')
        koffset.select_range(0, 1)
    try:
        ophi = np.arcsin(rpos/(2*m*fev*1.602176634*10**-19)**0.5/10**-10*(h/2/np.pi))*180/np.pi
    except NameError:
        return
    except TypeError:
        return
    pos = (2*m*fev*1.602176634*10**-19)**0.5*np.sin((np.float64(k_offset.get())+ophi)/180*np.pi)*10**-10/(h/2/np.pi)
    ophimin = np.arcsin((rpos-fwhm/2)/(2*m*fev*1.602176634*10**-19)**0.5/10**-10*(h/2/np.pi))*180/np.pi
    ophimax = np.arcsin((rpos+fwhm/2)/(2*m*fev*1.602176634*10**-19)**0.5/10**-10*(h/2/np.pi))*180/np.pi
    kmin = (2*m*fev*1.602176634*10**-19)**0.5*np.sin((np.float64(k_offset.get())+ophimin)/180*np.pi)*10**-10/(h/2/np.pi)
    kmax = (2*m*fev*1.602176634*10**-19)**0.5*np.sin((np.float64(k_offset.get())+ophimax)/180*np.pi)*10**-10/(h/2/np.pi)
    # okmphi = np.arcsin(kmin/(2*m*fev*1.602176634*10**-19)**0.5 /
    #                    10**-10*(h/2/np.pi))*180/np.pi
    # kmin = (2*m*fev*1.602176634*10**-19)**0.5 * \
    #     np.sin((np.float64(k_offset.get())+okmphi) /
    #            180*np.pi)*10**-10/(h/2/np.pi)
    # okMphi = np.arcsin(kmax/(2*m*fev*1.602176634*10**-19)**0.5 /
    #                    10**-10*(h/2/np.pi))*180/np.pi
    # kmax = (2*m*fev*1.602176634*10**-19)**0.5 * \
    #     np.sin((np.float64(k_offset.get())+okMphi) /
    #            180*np.pi)*10**-10/(h/2/np.pi)
    os.chdir(cdir)
    try:
        np.savez(os.path.join(cdir, '.MDC_cut', 'mfit.npz'), ko=k_offset.get(), fev=fev, rpos=rpos, ophi=ophi, fwhm=fwhm, pos=pos, kmin=kmin,
                 kmax=kmax, skmin=skmin, skmax=skmax, smaa1=smaa1, smaa2=smaa2, smfp=smfp, smfi=smfi)
        np.savez(os.path.join(cdir, '.MDC_cut', 'mfit.npz'), ko=k_offset.get(), fev=fev, rpos=rpos, ophi=ophi, fwhm=fwhm, pos=pos, kmin=kmin,
                 kmax=kmax, skmin=skmin, skmax=skmax, smaa1=smaa1, smaa2=smaa2, smfp=smfp, smfi=smfi, smresult=smresult, smcst=smcst)
    except:
        try:
            ffphi = np.float64(k_offset.get())+fphi
            fk = (2*m*epos*1.602176634*10**-19)**0.5 * \
                np.sin(ffphi/180*np.pi)*10**-10/(h/2/np.pi)
            np.savez(os.path.join(cdir, '.MDC_cut', 'efit.npz'), ko=k_offset.get(), fphi=fphi, epos=epos, ffphi=ffphi, efwhm=efwhm, fk=fk,
                 emin=emin, emax=emax, semin=semin, semax=semax, seaa1=seaa1, seaa2=seaa2, sefp=sefp, sefi=sefi)
        except:
            pass
        pass

    print('k_offset changed')
    st.put('k_offset changed')


def climon():
    cm.set(h0.get_clim()[0])
    cM.set(h0.get_clim()[1])
    lcmax.config(fg='black')
    lcmin.config(fg='black')
    Cmax.config(from_=cm.get(), to=cM.get(), state='active', fg='black')
    Cmin.config(from_=cm.get(), to=cM.get(), state='active', fg='black')
    vcmin.set(cm.get())
    vcmax.set(cM.get())


def climoff():
    cm.set(-10000)
    cM.set(10000)
    lcmax.config(fg='white')
    lcmin.config(fg='white')
    Cmax.config(from_=cm.get(), to=cM.get(), state='disabled', fg='white')
    Cmin.config(from_=cm.get(), to=cM.get(), state='disabled', fg='white')
    vcmin.set(cm.get())
    vcmax.set(cM.get())


def chcmp(*e):
    norm = mpl.colors.Normalize(vmin=-1, vmax=1)
    a = lcmpd.subplots()
    h = lcmpd.colorbar(mpl.cm.ScalarMappable(
        norm=norm, cmap=value3.get()), cax=a, orientation='vertical', label='')
    h.set_ticks(h.get_ticks())
    h.set_ticklabels(h.get_ticks(), font='Arial')
    cmpg.draw()


def Chcmp(*e):
    global st, f, out, h0, h1, h2, f0
    limg.config(image=img[np.random.randint(len(img))])
    try:
        if value.get() == 'MDC Normalized':
            plot1()
            print('Colormap changed')
            st.put('Colormap changed')
        else:
            h0.set_cmap(value3.get())
            h0.set_clim([vcmin.get(), vcmax.get()])
            try:
                h1.set_cmap(value3.get())
                h1.set_clim([vcmin.get(), vcmax.get()])
                h2.set_cmap(value3.get())
                h2.set_clim([vcmin.get(), vcmax.get()])
                f.canvas.draw_idle()
                f0.canvas.draw_idle()
            except:
                pass
            out.draw()
            print('Colormap changed')
            st.put('Colormap changed')
    except:
        print('Fail to execute')
        st.put('Fail to execute')


def o_exptm():
    global name, pos, fwhm, fev, st
    print('Processing...')
    st.put('Processing...')
    # os.chdir(rdd.removesuffix(rdd.split('/')[-1]))
    os.chdir(os.path.dirname(rdd))
    print('export to ',os.path.dirname(rdd))
    ff = open(name+'_mdc_fitted_data.txt', 'w',
              encoding='utf-8')  # tab 必須使用 '\t' 不可"\t"
    ff.write('K.E. (eV)'+'\t'+'FWHM (k)'+'\t'+'Position (k)'+'\n')
    for i in range(len(fev)):
        ff.write(str(fev[i])+'\t'+str(fwhm[i])+'\t'+str(pos[i])+'\n')
    ff.close()
    print('Done')
    st.put('Done')


def o_expte():
    global name, epos, efwhm, ffphi, st
    print('Processing...')
    st.put('Processing...')
    # os.chdir(rdd.removesuffix(rdd.split('/')[-1]))
    os.chdir(os.path.dirname(rdd))
    print('export to ',os.path.dirname(rdd))
    ff = open(name+'_edc_fitted_data.txt', 'w',
              encoding='utf-8')  # tab 必須使用 '\t' 不可"\t"
    if npzf:ff.write('k (2pi/A)'+'\t'+'FWHM (eV)'+'\t'+'Position (eV)'+'\n')
    else:ff.write('Angle (deg)'+'\t'+'FWHM (eV)'+'\t'+'Position (eV)'+'\n')
    for i in range(len(ffphi)):
        ff.write(str(ffphi[i])+'\t'+str(efwhm[i])+'\t'+str(epos[i])+'\n')
    ff.close()
    print('Done')
    st.put('Done')


def interp(x: float, xp: float, fp: float) -> np.ndarray:
    """
    Interpolates a 1-D function.
    Given the data points (xp, fp), this function returns the interpolated values at the points x.
    If the values in x are outside the range of xp, linear extrapolation is used.
    A more general version of np.interp, which can handle decreasing x-coordinates.
    
    Args
    ----------
        x (float): The x-coordinates at which to evaluate the interpolated values.
        xp (float): The x-coordinates of the data points.
        fp (float): The y-coordinates of the data points.

    Returns
    ----------
        out (ndarray) : The interpolated values, same shape as x.
    
    Example
    ----------
        >>> interp(1.5, [1, 2], [2, 3])
        2.5
        >>> interp([1.5, 2.5], [1, 2], [2, 3])
        array([2.5, 3.5])
    """
    if xp[1] >= xp[0]:
        y=np.interp(x,xp,fp)
        try:
            if len(np.array(x))>1:
                for i,v in enumerate(x):
                    if v < xp[0]:
                        y[i]=(v-xp[0])/(xp[1]-xp[0])*(fp[1]-fp[0])+fp[0]
                    elif v > xp[-1]:
                        y[i]=(v-xp[-1])/(xp[-2]-xp[-1])*(fp[-2]-fp[-1])+fp[-1]
        except:
            v=x
            if v < xp[0]:
                y=(v-xp[0])/(xp[1]-xp[0])*(fp[1]-fp[0])+fp[0]
            elif v > xp[-1]:
                y=(v-xp[-1])/(xp[-2]-xp[-1])*(fp[-2]-fp[-1])+fp[-1]
    else:
        xp,fp=xp[::-1],fp[::-1]
        y=np.interp(x,xp,fp)
        try:
            if len(np.array(x))>1:
                for i,v in enumerate(x):
                    if v < xp[0]:
                        y[i]=(v-xp[0])/(xp[1]-xp[0])*(fp[1]-fp[0])+fp[0]
                    elif v > xp[-1]:
                        y[i]=(v-xp[-1])/(xp[-2]-xp[-1])*(fp[-2]-fp[-1])+fp[-1]
        except:
            v=x
            if v < xp[0]:
                y=(v-xp[0])/(xp[1]-xp[0])*(fp[1]-fp[0])+fp[0]
            elif v > xp[-1]:
                y=(v-xp[-1])/(xp[-2]-xp[-1])*(fp[-2]-fp[-1])+fp[-1]
    return y


def o_bareband():
    file = fd.askopenfilename(title="Select TXT file",
                              filetypes=(("TXT files", "*.txt"),))
    # global be,k,rx,ry,ix,iy,limg,img
    global be, k, limg, img, st, bpath
    if len(file) > 0:
        bpath = file
        print('Loading...')
        st.put('Loading...')
        # t_k = []
        # t_ke = []
        # with open(file) as f:
        #     for i, line in enumerate(f):
        #         if i != 0:  # ignore 1st row data (index = 0)
        #             t_k.append(line.split('\t')[0])
        #             t_ke.append(line.split('\t')[1].replace('\n', ''))
        try:
            d=np.loadtxt(file,delimiter='\t',encoding='utf-8',dtype=float,skiprows=1,usecols=(0,1))
        except UnicodeError:
            d=np.loadtxt(file,delimiter='\t',encoding='utf-16',dtype=float,skiprows=1,usecols=(0,1))
        t_k = d[:,0]
        t_ke = d[:,1]
        # [::-1] inverse the order for np.interp (xp values should be increasing)
        be = np.float64(t_ke)*1000
        # [::-1] inverse the order for np.interp (xp values should be increasing)
        k = np.float64(t_k)
        os.chdir(cdir)
        np.savez(os.path.join(cdir, '.MDC_cut', 'bb.npz'), path=bpath, be=be, k=k, bbo=float(bb_offset.get()), bbk=float(bbk_offset.get()))
        limg.config(image=img[np.random.randint(len(img))])
        print('Done')
        st.put('Done')
    else:
        limg.config(image=img[np.random.randint(len(img))])
        print('No file selected')
        st.put('No file selected')
        
def im_smooth(data, kernel_size=17):
    return cv2.GaussianBlur(data, (kernel_size, kernel_size), 0)

def laplacian_operation(data):
    return -cv2.Laplacian(data, cv2.CV_64F)

def laplacian_filter(data, kernel_size=17):
    im=im_smooth(data, kernel_size)
    laplacian=laplacian_operation(im)
    return laplacian

def sdgd_filter(data, phi, ev):
    # not used
    
    # 計算數據的梯度
    grad_phi = np.diff(smooth(data))/np.diff(phi)
    grad_ev = np.diff(smooth(data.transpose(),l=40))/np.diff(ev)
    grad_ev = grad_ev.transpose()

    # 計算梯度方向
    # magnitude = np.sqrt(grad_phi**2 + grad_ev**2)
    # direction = np.arctan2(grad_ev, grad_phi)

    # 計算梯度方向上的二階導數
    grad_phi_phi = np.diff(smooth(grad_phi))/np.diff(phi[0:-1])
    grad_ev_ev = np.diff(smooth(grad_ev.transpose(),l=40))/np.diff(ev[0:-1])
    grad_ev_ev = grad_ev_ev.transpose()
    grad_phi_ev = np.diff(smooth(grad_phi.transpose(),l=40))/np.diff(ev)
    grad_phi_ev = grad_phi_ev.transpose()
    a=grad_phi_phi[0:-2,:]*grad_phi[0:-2,0:-1]**2
    b=2*grad_phi_ev[0:-1,0:-1]*grad_phi[0:-2,0:-1]*grad_ev[0:-1,0:-2]
    c=grad_ev_ev[:,0:-2]*grad_ev[0:-1,0:-2]**2
    # 計算 SDGD
    sdgd = -(a + b + c)/(grad_phi[0:-2,0:-1]**2 + grad_ev[0:-1,0:-2]**2)
    # sdgd = grad_phi_phi[0:-2,:]
    # sdgd = -grad_ev_ev[:,0:-2]
    return sdgd

def o_plot1(*e):
    global value, value1, value2, data, ev, phi, mfpath, fig, out, pflag, k_offset, value3, limg, img, optionList, h0, ao, xl, yl, st
    if value.get() in optionList:
        try:
            b_sw.grid_remove()
        except:
            pass
        limg.config(image=img[np.random.randint(len(img))])
        print('Plotting...')
        st.put('Plotting...')
        pflag = 1
        value1.set('---Plot2---')
        value2.set('---Plot3---')
        fig.clear()
        try:
            ev
        except:
            print('Please load Raw Data')
            st.put('Please load Raw Data')
        if value.get() == 'Raw Data':
            rplot(fig, out)
        else:
            if value.get() == 'First Derivative':   #axis: phi
                ao = fig.subplots()
                pz = np.diff(smooth(data.to_numpy()))/np.diff(phi)
                if emf=='KE':
                    px, py = np.meshgrid(phi[0:-1]+np.diff(phi)/2, ev)
                    tev = py.copy()
                else:
                    px, py = np.meshgrid(phi[0:-1]+np.diff(phi)/2, vfe-ev)
                    tev = vfe-py.copy()
                if npzf:
                    px = phi[0:-1]+np.diff(phi)/2
                else:
                    px = (2*m*tev*1.602176634*10**-19)**0.5*np.sin((np.float64(k_offset.get())+px+np.diff(phi)/2)/180*np.pi)*10**-10/(h/2/np.pi)
                h0 = ao.pcolormesh(px, py, pz, cmap=value3.get())
                cb = fig.colorbar(h0)
                cb.set_ticklabels(cb.get_ticks(), font='Arial')
                
            # if value.get() == 'First Derivative':    #axis: eV
            #     ao = fig.subplots()
            #     pz = np.diff(smooth(data.to_numpy().transpose()))/np.diff(ev)
            #     pz = pz.transpose()
            #     if emf=='KE':
            #         px, py = np.meshgrid(phi, ev[0:-1]+np.diff(ev)/2)
            #         tev = py.copy()
            #     else:
            #         px, py = np.meshgrid(phi, vfe-ev[0:-1]-np.diff(ev)/2)
            #         tev = vfe-py.copy()
            #     px = (2*m*tev*1.602176634*10**-19)**0.5*np.sin((np.float64(k_offset.get())+px)/180*np.pi)*10**-10/(h/2/np.pi)
            #     h0 = ao.pcolormesh(px, py, pz, cmap=value3.get())
            #     cb = fig.colorbar(h0)
            #     cb.set_ticklabels(cb.get_ticks(), font='Arial')
            
            elif value.get() == 'Second Derivative':    #axis: phi, eV
                ao = fig.subplots()
                # pz = np.diff(smooth(data.to_numpy()))/np.diff(phi)
                # pz = np.diff(smooth(pz.transpose()))/np.diff(ev)
                # pz = sdgd_filter(data.to_numpy(), phi, ev)
                # if emf=='KE':
                #     px, py = np.meshgrid(phi[0:-2], ev[0:-2])
                # else:
                #     px, py = np.meshgrid(phi[0:-2], vfe-ev[0:-2])
                # px = (2*m*np.full_like(np.zeros([len(phi[0:-2]), len(ev[0:-2])], dtype=float), ev[0:-2]+np.diff(ev[0:-1])/2*2)*1.602176634*10**-19).transpose(
                # )**0.5*np.sin((np.float64(k_offset.get())+px+np.diff(phi[0:-1])/2*2)/180*np.pi)*10**-10/(h/2/np.pi)
                
                pz = laplacian_filter(data.to_numpy(), im_kernel)
                if emf=='KE':
                    px, py = np.meshgrid(phi, ev)
                    tev = py.copy()
                else:
                    px, py = np.meshgrid(phi, vfe-ev)
                    tev = vfe-py.copy()
                if npzf:
                    px = phi
                else:
                    px = (2*m*tev*1.602176634*10**-19)**0.5*np.sin((np.float64(k_offset.get())+px)/180*np.pi)*10**-10/(h/2/np.pi)
                
                h0 = ao.pcolormesh(px, py, pz, cmap=value3.get())
                cb = fig.colorbar(h0)
                cb.set_ticklabels(cb.get_ticks(), font='Arial')
                
            # elif value.get() == 'Second Derivative':    #axis: phi
            #     ao = fig.subplots()
            #     pz = np.diff(smooth(data.to_numpy()))/np.diff(phi)
            #     pz = -np.diff(smooth(pz))/np.diff(phi[0:-1])
                # if emf=='KE':
                #     px, py = np.meshgrid(phi[0:-2], ev)
                # else:
                #     px, py = np.meshgrid(phi[0:-2], vfe-ev)
                # px = (2*m*np.full_like(np.zeros([len(phi[0:-2]), len(ev)], dtype=float), ev)*1.602176634*10**-19).transpose(
                # )**0.5*np.sin((np.float64(k_offset.get())+px+np.diff(phi[0:-1])/2*2)/180*np.pi)*10**-10/(h/2/np.pi)
            #     h0 = ao.pcolormesh(px, py, pz, cmap=value3.get())
            #     cb = fig.colorbar(h0)
            #     cb.set_ticklabels(cb.get_ticks(), font='Arial')
                
            # elif value.get() == 'Second Derivative':    #axis: eV
            #     ao = fig.subplots()
            #     pz = np.diff(smooth(data.to_numpy().transpose()))/np.diff(ev)
            #     pz = -np.diff(smooth(pz))/np.diff(ev[0:-1])
            #     pz = pz.transpose()
                # if emf=='KE':
                #     px, py = np.meshgrid(phi, ev[0:-2])
                # else:
                #     px, py = np.meshgrid(phi, vfe-ev[0:-2])
                # px = (2*m*np.full_like(np.zeros([len(phi), len(ev[0:-2])], dtype=float), ev[0:-2]+np.diff(ev[0:-1])/2*2)*1.602176634*10**-19).transpose(
                # )**0.5*np.sin((np.float64(k_offset.get())+px)/180*np.pi)*10**-10/(h/2/np.pi)
            #     h0 = ao.pcolormesh(px, py, pz, cmap=value3.get())
            #     cb = fig.colorbar(h0)
            #     cb.set_ticklabels(cb.get_ticks(), font='Arial')
                
            else:
                if 'MDC Curves' not in value.get():
                    fig.clear()
                    ao = fig.subplots()
                elif value.get() == 'MDC Curves':
                    fig.clear()
                    ao = fig.add_axes([0.2, 0.13, 0.5, 0.8])
                else:
                    fig.clear()
                    at = fig.add_axes([0.25, 0.13, 0.5, 0.8])
                    at.set_xticks([])
                    at.set_yticks([])
                    ao = fig.add_axes([0.1, 0.13, 0.4, 0.8])
                    ao1 = fig.add_axes([0.5, 0.13, 0.4, 0.8])
                if value.get() == 'E-k Diagram':
                    # h1=a.scatter(mx,my,c=mz,marker='o',s=scale*scale*0.9,cmap=value3.get());
                    if emf=='KE':
                        px, py = np.meshgrid(phi, ev)
                        tev = py.copy()
                    else:
                        px, py = np.meshgrid(phi, vfe-ev)
                        tev = vfe-py.copy()
                    if npzf:
                        px = phi
                    else:
                        px = (2*m*tev*1.602176634*10**-19)**0.5*np.sin((np.float64(k_offset.get())+px)/180*np.pi)*10**-10/(h/2/np.pi)
                    pz = data.to_numpy()
                    h0 = ao.pcolormesh(px, py, pz, cmap=value3.get())
                    cb = fig.colorbar(h0)
                    cb.set_ticklabels(cb.get_ticks(), font='Arial')
                    
                elif value.get() == 'MDC Normalized':
                    pbar = tqdm.tqdm(
                        total=len(ev)-1, desc='MDC Normalized', colour='red')
                    for n in range(len(ev)-1):
                        ecut = data.sel(eV=ev[n], method='nearest')
                        if npzf:
                            x = phi
                        else:
                            x = (2*m*ev[n]*1.602176634*10**-19)**0.5*np.sin(
                            (np.float64(k_offset.get())+phi)/180*np.pi)*10**-10/(h/2/np.pi)
                        y = ecut.to_numpy().reshape(len(ecut))
                        # mz[len(phi)*n:len(phi)*(n+1)]=np.array(y,dtype=float)
                        # mx[len(phi)*n:len(phi)*(n+1)]=x
                        # ty=np.arange(len(x), dtype=float)
                        # my[len(phi)*n:len(phi)*(n+1)]=np.full_like(ty, ev[n])
                        # a.scatter(x,np.full_like(ty, ev[n]),c=np.array(y,dtype=int),marker='o',s=scale*scale*0.9,cmap=value3.get());
                        if emf=='KE':
                            px, py = np.meshgrid(x, ev[n:(n+2)])
                        else:
                            px, py = np.meshgrid(x, vfe-ev[n:(n+2)])
                        ao.pcolormesh(px, py, np.full_like(
                            np.zeros([2, len(phi)], dtype=float), y), cmap=value3.get())
                        pbar.update(1)
                        # print(str(round((n+1)/(len(ev)-1)*100))+'%'+' ('+str(len(ev)-1)+')')
                        st.put(str(round((n+1)/(len(ev)-1)*100)) +
                               '%'+' ('+str(len(ev)-1)+')')
                    pbar.close()
                elif value.get() == 'MDC Curves':
                    pbar = tqdm.tqdm(
                        total=len(ev)//d, desc='MDC', colour='red')
                    y = np.zeros([len(ev),len(phi)],dtype=float)
                    for n in range(len(ev)):
                        ecut = data.sel(eV=ev[n], method='nearest')
                        if npzf:
                            x = phi
                        else:
                            x = (2*m*ev[n]*1.602176634*10**-19)**0.5*np.sin(
                            (np.float64(k_offset.get())+phi)/180*np.pi)*10**-10/(h/2/np.pi)
                        y[n][:] = ecut.to_numpy().reshape(len(ecut))
                    for n in range(len(ev)//d):
                        yy=y[n*d][:]+n*np.max(y)/d
                        yy=smooth(yy,l,p)
                        ao.plot(x, yy, c='black')
                        pbar.update(1)
                        # print(str(round((n+1)/(len(ev))*100))+'%'+' ('+str(len(ev))+')')
                        st.put(str(round((n+1)/(len(ev)//d)*100)) +
                               '%'+' ('+str(len(ev)//d)+')')
                    pbar.close()
                elif value.get() == 'E-k with MDC Curves':
                    pbar = tqdm.tqdm(
                        total=len(ev)//d, desc='MDC', colour='red')
                    y = np.zeros([len(ev),len(phi)],dtype=float)
                    for n in range(len(ev)):
                        ecut = data.sel(eV=ev[n], method='nearest')
                        if npzf:
                            x = phi
                        else:
                            x = (2*m*ev[n]*1.602176634*10**-19)**0.5*np.sin(
                            (np.float64(k_offset.get())+phi)/180*np.pi)*10**-10/(h/2/np.pi)
                        y[n][:] = ecut.to_numpy().reshape(len(ecut))
                    for n in range(len(ev)//d):
                        yy=y[n*d][:]+n*np.max(y)/d
                        yy=smooth(yy,l,p)
                        ao1.plot(x, yy, c='black')
                        pbar.update(1)
                        # print(str(round((n+1)/(len(ev))*100))+'%'+' ('+str(len(ev))+')')
                        st.put(str(round((n+1)/(len(ev)//d)*100)) +
                               '%'+' ('+str(len(ev)//d)+')')
                    pbar.close()
                    if emf=='KE':
                        px, py = np.meshgrid(phi, ev)
                        tev = py.copy()
                    else:
                        px, py = np.meshgrid(phi, vfe-ev)
                        tev = vfe-py.copy()
                    if npzf:
                        px = phi
                    else:
                        px = (2*m*tev*1.602176634*10**-19)**0.5*np.sin((np.float64(k_offset.get())+px)/180*np.pi)*10**-10/(h/2/np.pi)
                    pz = data.to_numpy()
                    h0 = ao.pcolormesh(px, py, pz, cmap=value3.get())
                    ylb=ao1.twinx()
                    ylb.set_ylabel('Intensity (a.u.)', font='Arial', fontsize=size(14))
                    ylb.set_yticklabels([])
                    # cb = fig.colorbar(h0, ax=ao1)
                    # cb.set_ticklabels(cb.get_ticks(), font='Arial')
            if 'E-k with' not in value.get():
                ao.set_title(value.get(), font='Arial', fontsize=size(16))
            else:
                at.set_title(value.get(), font='Arial', fontsize=size(18))
            ao.set_xlabel(r'k ($\frac{2\pi}{\AA}$)', font='Arial', fontsize=size(14))
            if 'MDC Curves' not in value.get():
                if emf=='KE':
                    ao.set_ylabel('Kinetic Energy (eV)', font='Arial', fontsize=size(14))
                else:
                    ao.set_ylabel('Binding Energy (eV)', font='Arial', fontsize=size(14))
                    ao.invert_yaxis()
            else:
                if 'E-k with' in value.get():
                    if emf=='KE':
                        ao.set_ylabel('Kinetic Energy (eV)', font='Arial', fontsize=size(14))
                        ao.set_ylim([ev[0], ev[n*d]])
                    else:
                        ao.set_ylabel('Binding Energy (eV)', font='Arial', fontsize=size(14))
                        ao.invert_yaxis()
                        ao.set_ylim([vfe-ev[0], vfe-ev[n*d]])
                    ao1.set_xlabel(r'k ($\frac{2\pi}{\AA}$)', font='Arial', fontsize=size(14))
                    ao1.set_yticklabels([])
                    ao1.set_xlim([min(x), max(x)])
                    ao1.set_ylim([0, np.max(n*np.max(y)/d)])
                else:
                    ylr=ao.twinx()
                    ao.set_yticklabels([])
                    ao.set_ylabel('Intensity (a.u.)', font='Arial', fontsize=size(14))
                    ylr.set_ylabel(r'$\longleftarrow$ Binding Energy', font='Arial', fontsize=size(14))
                    ylr.set_yticklabels([])
                    ao.set_xlim([min(x), max(x)])
                    ao.set_ylim([0, np.max(n*np.max(y)/d)])
                
            xl = ao.get_xlim()
            yl = ao.get_ylim()
        try:
            if value.get() != 'MDC Normalized' and value.get() != 'MDC Curves':
                climon()
                out.draw()
            else:
                climoff()
                out.draw()
        except:
            pass
        print('Done')
        st.put('Done')


def o_plot2(*e):
    global fig, out, fwhm, fev, pos, value, value1, value2, k, be, rx, ry, ix, iy, pflag, limg, img, bb_offset, bbk_offset, optionList1, st
    if 'gg' in globals():
        gg.destroy()
    if value1.get() in optionList1:
        try:
            b_sw.grid_remove()
        except:
            pass
        limg.config(image=img[np.random.randint(len(img))])
        print('Plotting...')
        st.put('Plotting...')
        pflag = 2
        value.set('---Plot1---')
        value2.set('---Plot3---')
        fig.clear()
        climoff()
        if value1.get() == 'MDC fitted Data':
            try:
                x = (vfe-fev)*1000
                # y = (fwhm*6.626*10**-34/2/3.1415926/(10**-10))**2/2/(9.11*10**-31)/(1.602176634*10**-19)*1000
            except:
                print(r'Please Load MDC fitted file')
                st.put(r'Please Load MDC fitted file')
            try:
                a = fig.subplots(2, 1)
                a[0].set_title('MDC Fitting Result', font='Arial', fontsize=size(18))
                a[0].set_xlabel('Binding Energy (meV)',
                                font='Arial', fontsize=size(14))
                a[0].set_ylabel(
                    r'Position ($\frac{2\pi}{\AA}$)', font='Arial', fontsize=size(14))
                a[0].tick_params(direction='in')
                a[0].scatter(x, pos, c='black', s=scale*scale*5)

                a[1].set_xlabel('Binding Energy (meV)',
                                font='Arial', fontsize=size(14))
                a[1].set_ylabel(
                    r'FWHM ($\frac{2\pi}{\AA}$)', font='Arial', fontsize=size(14))
                a[1].tick_params(direction='in')
                a[1].scatter(x, fwhm, c='black', s=scale*scale*5)
                
                a[0].invert_xaxis()
                a[1].invert_xaxis()
            except:
                print('Please load MDC fitted file')
                st.put('Please load MDC fitted file')
        elif value1.get() == 'EDC fitted Data':
            try:
                x = fk
            except:
                print(r'Please Load EDC fitted file')
                st.put(r'Please Load EDC fitted file')
            try:
                a = fig.subplots(2, 1)
                a[0].set_title('EDC Fitting Result', font='Arial', fontsize=size(18))
                a[0].set_xlabel(
                    r'Position ($\frac{2\pi}{\AA}$)', font='Arial', fontsize=size(14))
                a[0].set_ylabel('Binding Energy (meV)',
                                font='Arial', fontsize=size(14))
                a[0].tick_params(direction='in')
                a[0].scatter(x, (vfe-epos)*1000, c='black', s=scale*scale*5)

                a[1].set_xlabel(
                    r'Position ($\frac{2\pi}{\AA}$)', font='Arial', fontsize=size(14))
                a[1].set_ylabel('FWHM (meV)', font='Arial', fontsize=size(14))
                a[1].tick_params(direction='in')
                a[1].scatter(x, efwhm*1000, c='black', s=scale*scale*5)
                
                a[0].invert_yaxis()
            except:
                print('Please load EDC fitted file')
                st.put('Please load EDC fitted file')
        elif value1.get() == 'Real Part':
            try:
                x = (vfe-fev)*1000
                y = pos
            except:
                print('Please load MDC fitted file')
                st.put('Please load MDC fitted file')
            try:
                yy = interp(y, k*np.float64(bbk_offset.get()), be -
                            # interp x into be,k set
                            np.float64(bb_offset.get()))
            except:
                print('Please load Bare Band file')
                st.put('Please load Bare Band file')
            a = fig.subplots(2, 1)
            a[0].set_title('Real Part', font='Arial', fontsize=size(18))
            a[0].plot(x, -(x+yy), c='black', linestyle='-', marker='.')

            rx = x
            ry = -(x+yy)
            a[0].tick_params(direction='in')
            a[0].set_xlabel('Binding Energy (meV)', font='Arial', fontsize=size(14))
            a[0].set_ylabel(r'Re $\Sigma$ (meV)', font='Arial', fontsize=size(14))

            h1 = a[1].scatter(y, x, c='black', s=scale*scale*5)
            h2 = a[1].scatter(k*np.float64(bbk_offset.get()),
                              -be+np.float64(bb_offset.get()), c='red', s=scale*scale*5)

            a[1].legend([h1, h2], ['fitted data', 'bare band'])
            a[1].tick_params(direction='in')
            a[1].set_ylabel('Binding Energy (meV)', font='Arial', fontsize=size(14))
            a[1].set_xlabel(
                r'Pos ($\frac{2\pi}{\AA}$)', font='Arial', fontsize=size(14))
            
            a[0].invert_xaxis()
            a[1].invert_yaxis()

            # a[0].set_xlim([-1000,50])
            # a[0].set_ylim([-100,500])
            # a[1].set_ylim([-600,200])
            # a[1].set_xlim([-0.05,0.05])
        elif value1.get() == 'Imaginary Part':
            try:
                tbe = (vfe-fev)*1000
            except:
                print(r'Please Load MDC fitted file')
                st.put(r'Please Load MDC fitted file')
            try:
                x = interp(tbe, -be+np.float64(bb_offset.get()),
                           k*np.float64(bbk_offset.get()))
                y = interp(x, k*np.float64(bbk_offset.get()),
                           -be+np.float64(bb_offset.get()))
            except:
                print('Please load Bare Band file')
                st.put('Please load Bare Band file')
            xx = np.diff(x)
            yy = np.diff(y)

            # eliminate vf in gap
            for i in range(len(yy)):
                if yy[i]/xx[i] > 20000:
                    yy[i] = 0
            v = yy/xx
            # v = np.append(v, v[-1])  # fermi velocity
            try:
                v=interp(pos,x[0:-1]+xx/2,v)
                yy = np.abs(v*fwhm/2)
            except:
                print('Please load MDC fitted file')
                st.put('Please load MDC fitted file')
            xx = tbe
            ax = fig.subplots(2, 1)
            a = ax[0]
            b = ax[1]
            a.set_title('Imaginary Part', font='Arial', fontsize=size(18))
            a.plot(xx, yy, c='black', linestyle='-', marker='.')

            ix = xx
            iy = yy
            a.tick_params(direction='in')
            a.set_xlabel('Binding Energy (eV)', font='Arial', fontsize=size(14))
            a.set_ylabel(r'Im $\Sigma$ (meV)', font='Arial', fontsize=size(14))

            x = (vfe-fev)*1000
            y = fwhm
            b.plot(x, y, c='black', linestyle='-', marker='.')
            b.tick_params(direction='in')
            b.set_xlabel('Binding Energy (eV)', font='Arial', fontsize=size(14))
            b.set_ylabel(r'FWHM ($\frac{2\pi}{\AA}$)',
                         font='Arial', fontsize=size(14))
            
            a.invert_xaxis()
            b.invert_xaxis()
        out.draw()
        print('Done')
        st.put('Done')


def o_plot3(*e):
    global fig, out, rx, ry, ix, iy, fwhm, pos, value, value1, value2, pflag, k, be, k_offset, value3, limg, img, bb_offset, bbk_offset, optionList2, h0, bo, xl, yl, posmin, posmax, eposmin, eposmax, tb0, tb0_, tb1, tb1_, tb2, st, dl, b_sw
    if value2.get() in optionList2:
        limg.config(image=img[np.random.randint(len(img))])
        print('Plotting...')
        st.put('Plotting...')
        pflag = 3
        value.set('---Plot1---')
        value1.set('---Plot2---')
        fig.clear()
        ophi = np.arcsin(rpos/(2*m*fev*1.602176634*10**-19)**0.5 /
                        10**-10*(h/2/np.pi))*180/np.pi
        pos = (2*m*fev*1.602176634*10**-19)**0.5 * \
            np.sin((np.float64(k_offset.get())+ophi)/180*np.pi)*10**-10/(h/2/np.pi)
        try:
            x = (vfe-fev)*1000
            y = pos
        except:
            print('Please load MDC fitted file')
            st.put('Please load MDC fitted file')
        if 'Data Plot with Pos' in value2.get():
            try:
                b_sw.grid_remove()
            except:
                pass
        else:
            try:
                b_sw.grid(row=0, column=4)
            except:
                pass    
        if value2.get() != 'Data Plot with Pos':
            try:
                yy = interp(y, k*np.float64(bbk_offset.get()), be -
                            # interp x into be,k set
                            np.float64(bb_offset.get()))
                rx = x
                ry = -(x+yy)
                tbe = (vfe-fev)*1000
                x = interp(tbe, -be+np.float64(bb_offset.get()),
                           k*np.float64(bbk_offset.get()))
                y = interp(x, k*np.float64(bbk_offset.get()),
                           -be+np.float64(bb_offset.get()))
                xx = np.diff(x)
                yy = np.diff(y)

                # eliminate vf in gap
                for i in range(len(yy)):
                    if yy[i]/xx[i] > 20000:
                        yy[i] = 0
                v = yy/xx
                # v = np.append(v, v[-1])  # fermi velocity
                v=interp(pos,x[0:-1]+xx/2,v)
                yy = np.abs(v*fwhm/2)
                xx = tbe
                ix = xx
                iy = yy
            except:
                print('Please load Bare Band file')
                st.put('Please load Bare Band file')
        if value2.get() == 'Real & Imaginary':
            a = fig.subplots(2, 1)
            a[0].set_title(r'Self Energy $\Sigma$', font='Arial', fontsize=size(18))
            if dl==0:
                a[0].scatter(rx, ry, edgecolors='black', c='w')
            elif dl==1:
                a[0].plot(rx, ry, c='black')
            elif dl==2:
                a[0].plot(rx, ry, c='black', linestyle='-', marker='.')
            a[0].tick_params(direction='in')
            a[0].set_xlabel('Binding Energy (meV)', font='Arial', fontsize=size(14))
            a[0].set_ylabel(r'Re $\Sigma$ (meV)', font='Arial', fontsize=size(14))
            if dl==0:
                a[1].scatter(ix, iy, edgecolors='black', c='w')
            elif dl==1:
                a[1].plot(ix, iy, c='black')
            elif dl==2:
                a[1].plot(ix, iy, c='black', linestyle='-', marker='.')
            a[1].tick_params(direction='in')
            a[1].set_xlabel('Binding Energy (meV)', font='Arial', fontsize=size(14))
            a[1].set_ylabel(r'Im $\Sigma$ (meV)', font='Arial', fontsize=size(14))
            a[0].invert_xaxis()
            a[1].invert_xaxis()
        elif 'KK Transform' in value2.get():
            ################################################################################## Hilbert Transform
            ##################################################################################
            tbe = (vfe-fev)*1000
            ###################################################插入KK缺失值 棄用
            # de = np.diff(tbe)
            # de = np.append(de, de[-1])
            # rm=mode(de)
            # rm=rm.mode
            # otbe=tbe
            # for i,v in enumerate(de):
            #     if abs(v-rm)>abs(rm/2):
            #         print(v,rm)
            #         ap_tbe = tbe[i]+rm
            #         de = np.append(de[0:i+1],np.append([rm],de[i+1::]))
            #         tbe = np.append(tbe[0:i+1],np.append([interp(ap_tbe,otbe,otbe)],tbe[i+1::]))
            #         ry = np.append(ry[0:i+1],np.append([interp(ap_tbe,otbe,ry)],ry[i+1::]))
            #         iy = np.append(iy[0:i+1],np.append([interp(ap_tbe,otbe,iy)],iy[i+1::]))
            ###################################################插入KK缺失值 棄用
            
            ix=(tbe-tbe[-1])*-1
            cix=np.append(ix+ix[0],ix)
            tix=cix[0:len(cix)-1]*-1
            # kx=ix
            kx = np.append(cix,tix[::-1])
            ky = np.linspace(0, 1, len(kx))
            ciy=np.append(iy*0+np.mean(iy),iy)
            tiy=ciy[0:len(ciy)-1]
            ciy = np.append(ciy,tiy[::-1])

            #for imaginary part
            ix=(tbe-tbe[-1])*-1
            cix=np.append(ix+ix[0],ix)
            tix=cix[0:len(cix)-1]*-1
            kx = np.append(cix,tix[::-1])
            ky = np.linspace(0, 1, len(kx))
            cry=np.append(ry*0,ry)
            tcry=cry[0:len(cry)-1]*-1
            cry = np.append(cry,tcry[::-1])

            # Hilbert transform
            analytic_signal_r = hilbert(cry)
            amplitude_envelope_r = np.abs(analytic_signal_r)
            instantaneous_phase_r = np.unwrap(np.angle(analytic_signal_r))
            instantaneous_frequency_r = np.diff(instantaneous_phase_r) / (2.0 * np.pi)

            analytic_signal_i = hilbert(ciy)
            amplitude_envelope_i = np.abs(analytic_signal_i)
            instantaneous_phase_i = np.unwrap(np.angle(analytic_signal_i))
            instantaneous_frequency_i = np.diff(instantaneous_phase_i) / (2.0 * np.pi)

            # Reconstructed real and imaginary parts
            reconstructed_real = np.imag(analytic_signal_i)
            reconstructed_imag = -np.imag(analytic_signal_r)
            ################################################################################## # Export data points as txt files
            ##################################################################################
            
            # np.savetxt('re_sigma.txt', np.column_stack((tbe, ry)), delimiter='\t', header='Binding Energy (meV)\tRe Sigma (meV)', comments='')
            # np.savetxt('kk_re_sigma.txt', np.column_stack((tbe, reconstructed_real[len(ix):2*len(ix)])), delimiter='\t', header='Binding Energy (meV)\tRe Sigma KK (meV)', comments='')
            # np.savetxt('im_sigma.txt', np.column_stack((tbe, iy)), delimiter='\t', header='Binding Energy (meV)\tIm Sigma (meV)', comments='')
            # np.savetxt('kk_im_sigma.txt', np.column_stack((tbe, reconstructed_imag[len(ix):2*len(ix)])), delimiter='\t', header='Binding Energy (meV)\tIm Sigma KK (meV)', comments='')
            
            ##################################################################################
            ################################################################################## # Export data points as txt files
                # Plot
            if 'Real Part' not in value2.get() and 'Imaginary Part' not in value2.get():
                ax = fig.subplots(2, 1)
                a = ax[0]
                b = ax[1]
                # Plot imaginary data and its Hilbert transformation
                a.set_title(r'Self Energy $\Sigma$', font='Arial', fontsize=size(18))
                if dl==0:
                    a.scatter(tbe, ry, edgecolors='black', c='w', label=r'Re $\Sigma$')
                    a.scatter(tbe, reconstructed_real[len(ix):2*len(ix)]+(ry-np.mean(reconstructed_real[len(ix):2*len(ix)])), edgecolors='red', c='w', label=r'Re $\Sigma_{KK}$=KK(Im $\Sigma$)')
                elif dl==1:
                    a.plot(tbe, ry, c='black', label=r'Re $\Sigma$')
                    a.plot(tbe, reconstructed_real[len(ix):2*len(ix)]+(ry-np.mean(reconstructed_real[len(ix):2*len(ix)])), c='red', label=r'Re $\Sigma_{KK}$=KK(Im $\Sigma$)')
                elif dl==2:
                    a.plot(tbe, ry, c='black', linestyle='-', marker='.', label=r'Re $\Sigma$')
                    a.plot(tbe, reconstructed_real[len(ix):2*len(ix)]+(ry-np.mean(reconstructed_real[len(ix):2*len(ix)])), c='red', linestyle='-', marker='.', label=r'Re $\Sigma_{KK}$=KK(Im $\Sigma$)')
                a.set_xlabel('Binding Energy (eV)', font='Arial', fontsize=size(14))
                a.set_ylabel(r'Re $\Sigma$ (meV)', font='Arial', fontsize=size(14))
                a.legend()
                if dl==0:
                    b.scatter(tbe, iy, edgecolors='black', c='w', label=r'Im $\Sigma$')
                    b.scatter(tbe, reconstructed_imag[len(ix):2*len(ix)]+(iy-np.mean(reconstructed_imag[len(ix):2*len(ix)])), edgecolors='red', c='w', label=r'Im $\Sigma_{KK}$=KK(Re $\Sigma$)')
                elif dl==1:
                    b.plot(tbe, iy, c='black', label=r'Im $\Sigma$')
                    b.plot(tbe, reconstructed_imag[len(ix):2*len(ix)]+(iy-np.mean(reconstructed_imag[len(ix):2*len(ix)])), c='red', label=r'Im $\Sigma_{KK}$=KK(Re $\Sigma$)')
                elif dl==2:
                    b.plot(tbe, iy, c='black', linestyle='-', marker='.', label=r'Im $\Sigma$')
                    b.plot(tbe, reconstructed_imag[len(ix):2*len(ix)]+(iy-np.mean(reconstructed_imag[len(ix):2*len(ix)])), c='red', linestyle='-', marker='.', label=r'Im $\Sigma_{KK}$=KK(Re $\Sigma$)')
                b.set_xlabel('Binding Energy (meV)', font='Arial', fontsize=size(14))
                b.set_ylabel(r'Im $\Sigma$ (meV)', font='Arial', fontsize=size(14))
                b.legend()
                a.invert_xaxis()
                b.invert_xaxis()
            elif 'Real Part' in value2.get():
                ax = fig.subplots()
                ttbe=tbe/1000
                if 'nd' in value2.get():
                    ax.set_title(r'Self Energy $\Sigma$ Real Part', font='Arial', fontsize=size(20))
                    ty=np.diff(smooth(ry,20,3))/np.diff(ttbe)
                    np.save(name+'_re_sigma.npy', np.column_stack((ttbe[0:-1], ty)))
                    if dl==0:
                        ax.scatter(ttbe[0:-1], ty, edgecolors='black', c='w', label=r'Re $\Sigma$')
                    elif dl==1:
                        ax.plot(ttbe[0:-1], ty, c='black', label=r'Re $\Sigma$')
                    elif dl==2:
                        ax.plot(ttbe[0:-1], ty, c='black', linestyle='-', marker='.', label=r'Re $\Sigma$')
                    ax.set_xlabel('Binding Energy (eV)', font='Arial', fontsize=size(18))
                    ax.set_ylabel(r'$2^{nd} der. Re \Sigma$', font='Arial', fontsize=size(18))
                    ax.set_xticklabels(ax.get_xticklabels(),fontsize=size(16))
                    ax.set_yticks([0])
                    ax.set_yticklabels(ax.get_yticklabels(),fontsize=size(16))
                else:
                    ax.set_title(r'Self Energy $\Sigma$ Real Part', font='Arial', fontsize=size(20))
                    if dl==0:
                        ax.scatter(ttbe, ry, edgecolors='black', c='w', label=r'Re $\Sigma$')
                        ax.scatter(ttbe, reconstructed_real[len(ix):2*len(ix)]+(ry-np.mean(reconstructed_real[len(ix):2*len(ix)])), edgecolors='red', c='w', label=r'Re $\Sigma_{KK}$=KK(Im $\Sigma$)')
                    elif dl==1:
                        ax.plot(ttbe, ry, c='black', label=r'Re $\Sigma$')
                        ax.plot(ttbe, reconstructed_real[len(ix):2*len(ix)]+(ry-np.mean(reconstructed_real[len(ix):2*len(ix)])), c='red', label=r'Re $\Sigma_{KK}$=KK(Im $\Sigma$)')
                    elif dl==2:
                        ax.plot(ttbe, ry, c='black', linestyle='-', marker='.', label=r'Re $\Sigma$')
                        ax.plot(ttbe, reconstructed_real[len(ix):2*len(ix)]+(ry-np.mean(reconstructed_real[len(ix):2*len(ix)])), c='red', linestyle='-', marker='.', label=r'Re $\Sigma_{KK}$=KK(Im $\Sigma$)')
                    ax.set_xlabel('Binding Energy (eV)', font='Arial', fontsize=size(18))
                    ax.set_ylabel(r'Re $\Sigma$ (meV)', font='Arial', fontsize=size(18))
                    ax.set_xticklabels(ax.get_xticklabels(),fontsize=size(16))
                    ax.set_yticklabels(ax.get_yticklabels(),fontsize=size(16))
                    l=ax.legend(fontsize=size(16))
                    l.draw_frame(False)
                ax.invert_xaxis()
            elif 'Imaginary Part' in value2.get():
                ax = fig.subplots()
                ttbe=tbe/1000
                if 'st' in value2.get():
                    ax.set_title(r'Self Energy $\Sigma$ Imaginary Part', font='Arial', fontsize=size(20))
                    ty=np.diff(smooth(iy,20,3))/np.diff(ttbe)
                    np.save(name+'_im_sigma.npy', np.column_stack((ttbe[0:-1], ty)))
                    if dl==0:
                        ax.scatter(ttbe[0:-1], ty, edgecolors='black', c='w', label=r'Im $\Sigma$')
                    elif dl==1:
                        ax.plot(ttbe[0:-1], ty, c='black', label=r'Im $\Sigma$')
                    elif dl==2:
                        ax.plot(ttbe[0:-1], ty, c='black', linestyle='-', marker='.', label=r'Im $\Sigma$')
                    ax.set_xlabel('Binding Energy (eV)', font='Arial', fontsize=size(18))
                    ax.set_ylabel(r'$1^{st} der. Im \Sigma$', font='Arial', fontsize=size(18))
                    ax.set_xticklabels(ax.get_xticklabels(),fontsize=size(16))
                    ax.set_yticks([0])
                    ax.set_yticklabels(ax.get_yticklabels(),fontsize=size(16))
                else:
                    ax.set_title(r'Self Energy $\Sigma$ Imaginary Part', font='Arial', fontsize=size(20))
                    if dl==0:
                        ax.scatter(ttbe, iy, edgecolors='black', c='w', label=r'Im $\Sigma$')
                        ax.scatter(ttbe, reconstructed_imag[len(ix):2*len(ix)]+(iy-np.mean(reconstructed_imag[len(ix):2*len(ix)])), edgecolors='red', c='w', label=r'Im $\Sigma_{KK}$=KK(Re $\Sigma$)')
                    elif dl==1:
                        ax.plot(ttbe, iy, c='black', label=r'Im $\Sigma$')
                        ax.plot(ttbe, reconstructed_imag[len(ix):2*len(ix)]+(iy-np.mean(reconstructed_imag[len(ix):2*len(ix)])), c='red', label=r'Im $\Sigma_{KK}$=KK(Re $\Sigma$)')
                    elif dl==2:
                        ax.plot(ttbe, iy, c='black', linestyle='-', marker='.', label=r'Im $\Sigma$')
                        ax.plot(ttbe, reconstructed_imag[len(ix):2*len(ix)]+(iy-np.mean(reconstructed_imag[len(ix):2*len(ix)])), c='red', linestyle='-', marker='.', label=r'Im $\Sigma_{KK}$=KK(Re $\Sigma$)')
                    ax.set_xlabel('Binding Energy (eV)', font='Arial', fontsize=size(18))
                    ax.set_ylabel(r'Im $\Sigma$ (meV)', font='Arial', fontsize=size(18))
                    ax.set_xticklabels(ax.get_xticklabels(),fontsize=size(16))
                    ax.set_yticklabels(ax.get_yticklabels(),fontsize=size(16))
                    l=ax.legend(fontsize=size(16))
                    l.draw_frame(False)
                ax.invert_xaxis()
            ##################################################################################
            ################################################################################## Hilbert Transform
            
            
            
            ################################################################################## KK definition
            ##################################################################################
            # ax = fig.subplots(2, 1)
            # a = ax[0]
            # b = ax[1]
            # a.set_title('Self Energy', font='Arial', fontsize=size(18))
            # a.plot(rx, ry, c='black', linestyle='-',
            #        marker='.', label=r'Re $\Sigma$')
            # a.tick_params(direction='in')
            # a.set_xlabel('Binding Energy (eV)', font='Arial', fontsize=size(14))
            # a.set_ylabel(r'Re $\Sigma$ (meV)', font='Arial', fontsize=size(14))

            
            # ix=(tbe-tbe[-1])*-1
            # cix=np.append(ix+ix[0],ix)
            # tix=cix[0:len(cix)-1]*-1
            # # kx=ix
            # kx = np.append(cix,tix[::-1])
            # ky = np.linspace(0, 1, len(kx))
            # ciy=np.append(iy*0,iy)
            # tiy=ciy[0:len(ciy)-1]
            # ciy = np.append(ciy,tiy[::-1])
            # # de=np.linspace(0,1,len(kx))
            # # de[0:-1]=np.diff(kx)
            # # de[-1]=de[-2]
            # de = np.diff(kx)
            # de = np.append(de, de[-1])

            # for i in range(len(kx)):
            #     # ky[i]=np.trapz(y=iy/(iy-kx[i]),x=iy,dx=de)
            #     intg = 0
            #     for j in range(len(kx)):
            #         if i != j:
            #             tval = ciy[j]/(kx[j]-kx[i])*de[j]
            #             if str(ciy[j]) == 'nan':
            #                 tval = 0
            #             intg += tval
            #     ky[i] = -1/np.pi*intg/2
            # a.plot(tbe, ky[len(ix):2*len(ix)], c='red', linestyle='-', marker='.', label=r'Re $\Sigma_{KK}$=KK(Im $\Sigma$)')
            # # a.plot(tbe, ky, c='red', linestyle='-', marker='.', label=r'Re $\Sigma_{KK}$=KK(Im $\Sigma$)')
            # handles, labels = a.get_legend_handles_labels()
            # a.legend(handles, labels)
            # # a.legend([h1,h2],['measured data','KK transform'])

            # #   KK Re
            # b.plot(tbe, ciy[len(ix):2*len(ix)], c='black', linestyle='-', marker='.', label=r'Im $\Sigma$')
            # # b.plot(tbe, iy, c='black', linestyle='-', marker='.', label=r'Im $\Sigma$')
            # b.tick_params(direction='in')
            # b.set_xlabel('Binding Energy (meV)', font='Arial', fontsize=size(14))
            # b.set_ylabel(r'Im $\Sigma$ (meV)', font='Arial', fontsize=size(14))
            
            
            # ix=(tbe-tbe[-1])*-1
            # cix=np.append(ix+ix[0],ix)
            # tix=cix[0:len(cix)-1]*-1
            # kx = np.append(cix,tix[::-1])
            # ky = np.linspace(0, 1, len(kx))
            # ciy=np.append(ry*0,ry)
            # tiy=ciy[0:len(ciy)-1]*-1
            # ciy = np.append(ciy,tiy[::-1])
            
            # # kx = rx
            # ky = np.linspace(0, 1, len(kx))
            # # de=np.linspace(0,1,len(kx))
            # # de[0:-1]=np.diff(kx)
            # # de[-1]=de[-2]
            # de = np.diff(kx)
            # de = np.append(de, de[-1])

            # for i in range(len(kx)):
            #     # ky[i]=np.trapz(y=iy/(iy-kx[i]),x=iy,dx=de)
            #     intg = 0
            #     for j in range(len(kx)):
            #         if i != j:
            #             tval = ciy[j]/(kx[j]-kx[i])*de[j]
            #             if str(ciy[j]) == 'nan':
            #                 tval = 0
            #             intg += tval
            #     ky[i] = 1/np.pi*intg
            # b.plot(tbe, ky[len(ix):2*len(ix)], c='red', linestyle='-', marker='.',
            #        label=r'Im $\Sigma_{KK}$=KK(Re $\Sigma$)')
            # handles, labels = b.get_legend_handles_labels()
            # b.legend(handles, labels)
            # a.invert_xaxis()
            # b.invert_xaxis()
            
            
            ##################################################################################
            ################################################################################## KK definition
            
            
        elif value2.get() == 'Data Plot with Pos' or value2.get() == 'Data Plot with Pos and Bare Band':
            bo = fig.subplots()
            if emf=='KE':
                px, py = np.meshgrid(phi, ev)
                tev = py.copy()
            else:
                px, py =np.meshgrid(phi, vfe-ev)
                tev = vfe-py.copy()
            if npzf:
                px = phi
            else:
                px = (2*m*tev*1.602176634*10**-19)**0.5*np.sin((np.float64(k_offset.get())+px)/180*np.pi)*10**-10/(h/2/np.pi)
            pz = data.to_numpy()
            h0 = bo.pcolormesh(px, py, pz, cmap=value3.get())
            txl = bo.get_xlim()
            tyl = bo.get_ylim()
            cb = fig.colorbar(h0)
            # cb.set_ticklabels(cb.get_ticks(), font='Arial', fontsize=size(14), minor=False)
            cb.set_ticklabels(cb.get_ticks(), font='Arial')
            
            #   MDC Norm
            # for i in range(len(ev)):
            #     b.scatter(mx[len(phi)*i:len(phi)*(i+1)],my[len(phi)*i:len(phi)*(i+1)],c=mz[len(phi)*i:len(phi)*(i+1)],marker='o',s=scale*scale*0.9,cmap='viridis',alpha=0.3)
            # a.set_title('MDC Normalized')
            bo.set_title(value2.get(), font='Arial', fontsize=size(18))
            # a.set_xlabel(r'k ($\frac{2\pi}{\AA}$)',fontsize=size(14))
            # a.set_ylabel('Kinetic Energy (eV)',fontsize=size(14))
            bo.set_xlabel(r'k ($\frac{2\pi}{\AA}$)', font='Arial', fontsize=size(16))
            if emf=='KE':
                bo.set_ylabel('Kinetic Energy (eV)', font='Arial', fontsize=size(16))
            else:
                bo.set_ylabel('Binding Energy (eV)', font='Arial', fontsize=size(16))
            # b.set_xticklabels(labels=b.get_xticklabels(),fontsize=size(14))
            # b.set_yticklabels(labels=b.get_yticklabels(),fontsize=size(14))
            try:
                if mp == 1:
                    if emf=='KE':
                        tb0 = bo.scatter(pos, fev, marker='.', s=scale*scale*0.3, c='black')
                    else:
                        tb0 = bo.scatter(pos, vfe-fev, marker='.', s=scale*scale*0.3, c='black')
                if mf == 1:
                    ophimin = np.arcsin(
                        (rpos-fwhm/2)/(2*m*fev*1.602176634*10**-19)**0.5/10**-10*(h/2/np.pi))*180/np.pi
                    ophimax = np.arcsin(
                        (rpos+fwhm/2)/(2*m*fev*1.602176634*10**-19)**0.5/10**-10*(h/2/np.pi))*180/np.pi
                    posmin = (2*m*fev*1.602176634*10**-19)**0.5*np.sin(
                        (np.float64(k_offset.get())+ophimin)/180*np.pi)*10**-10/(h/2/np.pi)
                    posmax = (2*m*fev*1.602176634*10**-19)**0.5*np.sin(
                        (np.float64(k_offset.get())+ophimax)/180*np.pi)*10**-10/(h/2/np.pi)
                    if emf=='KE':
                        tb0_ = bo.scatter([posmin, posmax], [
                                        fev, fev], marker='|', c='grey', s=scale*scale*10, alpha=0.8)
                    else:
                        tb0_ = bo.scatter([posmin, posmax], [vfe-fev, vfe-fev], marker='|', c='grey', s=scale*scale*10, alpha=0.8)    
            except:
                pass
            try:
                if ep == 1:
                    if emf=='KE':
                        tb1 = bo.scatter(fk, epos, marker='.', s=scale*scale*0.3, c='black')
                    else:
                        tb1 = bo.scatter(fk, vfe-epos, marker='.', s=scale*scale*0.3, c='black')
                if ef == 1:
                    eposmin = epos-efwhm/2
                    eposmax = epos+efwhm/2
                    if emf=='KE':
                        tb1_ = bo.scatter(
                            [fk, fk], [eposmin, eposmax], marker='_', c='grey', s=scale*scale*10, alpha=0.8)
                    else:
                        tb1_ = bo.scatter(
                            [fk, fk], [vfe-eposmin, vfe-eposmax], marker='_', c='grey', s=scale*scale*10, alpha=0.8)
                    
            except:
                pass
            try:
                if value2.get() == 'Data Plot with Pos and Bare Band':
                    if emf=='KE':
                        tb2, = bo.plot(k*np.float64(bbk_offset.get()), (be -
                                    np.float64(bb_offset.get()))/1000+vfe, linewidth=scale*0.3, c='red', linestyle='--')
                    else:
                        tb2, = bo.plot(k*np.float64(bbk_offset.get()), (-be +
                                np.float64(bb_offset.get()))/1000, linewidth=scale*0.3, c='red', linestyle='--')
                    bo.set_xlim(txl)
                    bo.set_ylim(tyl)
            except:
                bo.set_title('Data Plot with Pos w/o Bare Band',
                             font='Arial', fontsize=size(18))
                print('Please load Bare Band file')
                st.put('Please load Bare Band file')
            if emf=='BE':
                bo.invert_yaxis()
        try:
            if value2.get() != 'Real & Imaginary' and 'KK Transform' not in value2.get():
                xl = bo.get_xlim()
                yl = bo.get_ylim()
                climon()
                out.draw()
            else:
                climoff()
                out.draw()
        except:
            pass
        print('Done')
        st.put('Done')


props = dict(facecolor='green', alpha=0.3)


def select_callback(eclick, erelease):
    """
    Callback for line selection.

    *eclick* and *erelease* are the press and release events.
    """
    global ta0, ta0_, ta1, ta1_, ta2, a, f
    x1, y1 = eclick.xdata, eclick.ydata
    x2, y2 = erelease.xdata, erelease.ydata
    if eclick.button == 1:
        a.set_xlim(sorted([x1, x2]))
        if emf=='KE':
            a.set_ylim(sorted([y1, y2]))
        else:
            a.set_ylim(sorted([y1, y2], reverse=True))
        f.show()
        if abs(x1-x2) < (xl[1]-xl[0])/3*2 or abs(y1-y2) < (yl[1]-yl[0])/3*2:
            try:
                if mp == 1:
                    ta0.remove()
                if mf == 1:
                    ta0_.remove()
            except:
                pass
            try:
                if ep == 1:
                    ta1.remove()
                if ef == 1:
                    ta1_.remove()
            except:
                pass
            try:
                ta2.remove()
            except:
                pass
            if value2.get() == 'Data Plot with Pos and Bare Band' or value2.get() == 'Data Plot with Pos':
                try:
                    if mp == 1:
                        if emf=='KE':
                            ta0 = a.scatter(pos, fev, marker='.', s=scale*scale*30, c='black')
                        else:
                            ta0 = a.scatter(pos, vfe-fev, marker='.', s=scale*scale*30, c='black')
                    if mf == 1:
                        if emf=='KE':
                            ta0_ = a.scatter([posmin, posmax], [
                                         fev, fev], marker='|', c='grey', s=scale*scale*50, alpha=0.8)
                        else:
                            ta0_ = a.scatter([posmin, posmax], [vfe-fev, vfe-fev], marker='|', c='grey', s=scale*scale*50, alpha=0.8)
                except:
                    pass
                try:
                    if ep == 1:
                        if emf=='KE':
                            ta1 = a.scatter(fk, epos, marker='.', s=scale*scale*30, c='black')
                        else:
                            ta1 = a.scatter(fk, vfe-epos, marker='.', s=scale*scale*30, c='black')
                            
                    if ef == 1:
                        if emf=='KE':
                            ta1_ = a.scatter(
                                [fk, fk], [eposmin, eposmax], marker='_', c='grey', s=scale*scale*50, alpha=0.8)
                        else:
                            ta1_ = a.scatter(
                                [fk, fk], [vfe-eposmin, vfe-eposmax], marker='_', c='grey', s=scale*scale*50, alpha=0.8)
                except:
                    pass

                if value2.get() == 'Data Plot with Pos and Bare Band':
                    if emf=='KE':
                        ta2, = a.plot(k*np.float64(bbk_offset.get()), (be -
                                    np.float64(bb_offset.get()))/1000+vfe, linewidth=scale*2, c='red', linestyle='--')
                    else:
                        ta2, = a.plot(k*np.float64(bbk_offset.get()), (-be +
                                    np.float64(bb_offset.get()))/1000, linewidth=scale*2, c='red', linestyle='--')
            f.show()
        else:
            try:
                if mp == 1:
                    ta0.remove()
                    if emf=='KE':
                        ta0 = a.scatter(pos, fev, marker='.', s=scale*scale*0.3, c='black')
                    else:
                        ta0 = a.scatter(pos, vfe-fev, marker='.', s=scale*scale*0.3, c='black')
                        
                if mf == 1:
                    ta0_.remove()
                    if emf=='KE':
                        ta0_ = a.scatter([posmin, posmax], [fev, fev],
                                        marker='|', c='grey', s=scale*scale*10, alpha=0.8)
                    else:
                        ta0_ = a.scatter([posmin, posmax], [vfe-fev, vfe-fev],
                                        marker='|', c='grey', s=scale*scale*10, alpha=0.8)
            except:
                pass
            try:
                if ep == 1:
                    ta1.remove()
                    if emf=='KE':
                        ta1 = a.scatter(fk, epos, marker='.', s=scale*scale*0.3, c='black')
                    else:
                        ta1 = a.scatter(fk, vfe-epos, marker='.', s=scale*scale*0.3, c='black')
                        
                if ef == 1:
                    ta1_.remove()
                    if emf=='KE':
                        ta1_ = a.scatter([fk, fk], [eposmin, eposmax],
                                     marker='_', c='grey', s=scale*scale*10, alpha=0.8)
                    else:
                        ta1_ = a.scatter([fk, fk], [vfe-eposmin, vfe-eposmax],
                                     marker='_', c='grey', s=scale*scale*10, alpha=0.8)
            except:
                pass
            try:
                if value2.get() == 'Data Plot with Pos and Bare Band':
                    ta2.remove()
                    if emf =='KE':
                        ta2, = a.plot(k*np.float64(bbk_offset.get()), (be -
                                  np.float64(bb_offset.get()))/1000+vfe, linewidth=scale*0.3, c='red', linestyle='--')
                    else:
                        ta2, = a.plot(k*np.float64(bbk_offset.get()), (-be +
                                  np.float64(bb_offset.get()))/1000, linewidth=scale*0.3, c='red', linestyle='--')
            except:
                pass
            f.show()
    else:
        a.set_xlim(xl)
        a.set_ylim(yl)
        try:
            if mp == 1:
                ta0.remove()
                if emf=='KE':
                    ta0 = a.scatter(pos, fev, marker='.', s=scale*scale*0.3, c='black')
                else:
                    ta0 = a.scatter(pos, vfe-fev, marker='.', s=scale*scale*0.3, c='black')
                    
            if mf == 1:
                ta0_.remove()
                if emf=='KE':
                    ta0_ = a.scatter([posmin, posmax], [fev, fev],
                                 marker='|', c='grey', s=scale*scale*10, alpha=0.8)
                else:
                    ta0_ = a.scatter([posmin, posmax], [vfe-fev, vfe-fev],
                                 marker='|', c='grey', s=scale*scale*10, alpha=0.8)
        except:
            pass
        try:
            if ep == 1:
                ta1.remove()
                if emf=='KE':
                    ta1 = a.scatter(fk, epos, marker='.', s=scale*scale*0.3, c='black')
                else:
                    ta1 = a.scatter(fk, vfe-epos, marker='.', s=scale*scale*0.3, c='black')
                    
            if ef == 1:
                ta1_.remove()
                if emf=='KE':
                    ta1_ = a.scatter([fk, fk], [eposmin, eposmax],
                                 marker='_', c='grey', s=scale*scale*10, alpha=0.8)
                else:
                    ta1_ = a.scatter([fk, fk], [vfe-eposmin, vfe-eposmax],
                                 marker='_', c='grey', s=scale*scale*10, alpha=0.8)
        except:
            pass
        try:
            if value2.get() == 'Data Plot with Pos and Bare Band':
                ta2.remove()
                if emf=='KE':
                    ta2, = a.plot(k*np.float64(bbk_offset.get()), (be -
                                np.float64(bb_offset.get()))/1000+vfe, linewidth=scale*0.3, c='red', linestyle='--')
                else:
                    ta2, = a.plot(k*np.float64(bbk_offset.get()), (-be +
                              np.float64(bb_offset.get()))/1000, linewidth=scale*0.3, c='red', linestyle='--')
        except:
            pass
        f.show()
    # print(f"({x1:3.2f}, {y1:3.2f}) --> ({x2:3.2f}, {y2:3.2f})")
    # print(f"The buttons you used were: {eclick.button} {erelease.button}")
# def toggle_selector(event):
#     print('Key pressed.')
#     if event.key == 't':
#         for selector in selectors:
#             name = type(selector).__name__
#             if selector.active:
#                 print(f'{name} deactivated.')
#                 selector.set_active(False)
#             else:
#                 print(f'{name} activated.')
#                 selector.set_active(True)


def cur_move(event):
    global f, a, xx, yy
    if event.inaxes == a and event.xdata is not None and event.ydata is not None:
        f.canvas.get_tk_widget().config(cursor="crosshair")
        try:
            xx.remove()
            yy.remove()
        except:
            pass
        xx=a.axvline(event.xdata, color='red')
        yy=a.axhline(event.ydata, color='red')
    f.show()
    

def cur_on_move(event):
    if event.inaxes == a and event.xdata is not None and event.ydata is not None:
        annot.xy = (event.xdata, event.ydata)
        text = f"x={event.xdata:.3f}\ny={event.ydata:.3f}"
        annot.set_text(text)
        # 取得座標軸範圍
        xlim = a.get_xlim()
        ylim = a.get_ylim()
        # 設定 annotation 方向
        offset_x, offset_y = 20, 20
        # 靠近右邊界
        if event.xdata > xlim[1] - (xlim[1]-xlim[0])*0.15:
            offset_x = -60
        # 靠近左邊界
        elif event.xdata < xlim[0] + (xlim[1]-xlim[0])*0.15:
            offset_x = 20
        # 靠近上邊界
        if event.ydata > ylim[1] - (ylim[1]-ylim[0])*0.15:
            offset_y = -40
        # 靠近下邊界
        elif event.ydata < ylim[0] + (ylim[1]-ylim[0])*0.15:
            offset_y = 20
        annot.set_position((offset_x, offset_y))
        annot.set_visible(True)
        f.canvas.draw_idle()
    else:
        annot.set_visible(False)
        f.canvas.draw_idle()

def onselect(xmin, xmax):
    global f, f0, h1, h2
    if xmin > xmax:
        xmin, xmax = xmax, xmin
    # vcmin.set(xmin)
    # vcmax.set(xmax)
    h2.set_clim(xmin, xmax)
    # f0.canvas.draw_idle()
    f0.show()
    h1.set_clim(xmin, xmax)
    # f.canvas.draw_idle()
    f.show()


def onmove_callback(xmin, xmax):
    global f, f0, h1, h2
    if xmin > xmax:
        xmin, xmax = xmax, xmin
    # vcmin.set(xmin)
    # vcmax.set(xmax)
    h2.set_clim(xmin, xmax)
    # f0.canvas.draw_idle()
    f0.show()
    h1.set_clim(xmin, xmax)
    # f.canvas.draw_idle()
    f.show()

cf = True

def cut_move(event):
    global cxdata, cydata, acx, acy, a, f, xx ,yy
    # ,x,y
    f.canvas.get_tk_widget().config(cursor="")
    if event.inaxes:
        cxdata = event.xdata
        cydata = event.ydata
        xf = (cxdata >= a.get_xlim()[0] and cxdata <= a.get_xlim()[1])
        if emf=='KE':
            yf = (cydata >= a.get_ylim()[0] and cydata <= a.get_ylim()[1])
        else:
            yf = (cydata <= a.get_ylim()[0] and cydata >= a.get_ylim()[1])
        if xf and yf:
            f.canvas.get_tk_widget().config(cursor="crosshair")
            try:
                xx.remove()
                yy.remove()
            except:
                pass
            xx=a.axvline(cxdata,color='r')
            yy=a.axhline(cydata,color='r')
            if cf:
                if emf=='KE':
                    dx = data.sel(
                        eV=cydata, method='nearest').to_numpy().reshape(len(phi))
                else:
                    dx = data.sel(eV=vfe-cydata, method='nearest').to_numpy().reshape(len(phi))
                dy = data.sel(
                    phi=cxdata, method='nearest').to_numpy().reshape(len(ev))
                acx.clear()
                acy.clear()
                acx.set_title('                Raw Data', font='Arial', fontsize=size(18))
                acx.plot(phi, dx, c='black')
                if emf=='KE':
                    acy.plot(dy, ev, c='black')
                else:
                    acy.plot(dy, vfe-ev, c='black')
                acx.set_xticks([])
                acy.set_yticks([])
                acx.set_xlim(a.get_xlim())
                acy.set_ylim(a.get_ylim())
                # f.canvas.draw_idle()
    else:
        try:
            if cf:
                acx.clear()
                acy.clear()
                acx.set_title('                Raw Data', font='Arial', fontsize=size(18))
                acx.set_xticks([])
                acx.set_yticks([])
                acy.set_xticks([])
                acy.set_yticks([])
            xx.remove()
            yy.remove()
        except:
            pass
    f.show()

def cut_select(event):
    global cf, a, f, x, y, acx, acy
    if event.button == 1 and cf:
        cf = False
        x = a.axvline(event.xdata, color='red')
        y = a.axhline(event.ydata, color='red')
    elif event.button == 1 and not cf:
        x.remove()
        y.remove()
        x = a.axvline(event.xdata, color='red')
        y = a.axhline(event.ydata, color='red')
        if emf=='KE':
            dx = data.sel(eV=event.ydata,
                        method='nearest').to_numpy().reshape(len(phi))
        else:
            dx = data.sel(eV=vfe-event.ydata,
                        method='nearest').to_numpy().reshape(len(phi))
        dy = data.sel(phi=event.xdata,
                      method='nearest').to_numpy().reshape(len(ev))
        acx.clear()
        acy.clear()
        acx.set_title('                Raw Data', font='Arial', fontsize=size(18))
        acx.plot(phi, dx, c='black')
        if emf=='KE':
            acy.plot(dy, ev, c='black')
        else:
            acy.plot(dy, vfe-ev, c='black')
        acx.set_xticks([])
        acy.set_yticks([])
        acx.set_xlim(a.get_xlim())
        acy.set_ylim(a.get_ylim())

    elif event.button == 3:
        cf = True
        x.remove()
        y.remove()
    # f.canvas.draw_idle()
    copy_to_clipboard(ff=f)
    f.show()

def exp(*e):
    global value, value1, value2, value3, data, ev, phi, mx, my, mz, mfpath, fev, fwhm, pos, k, be, rx, ry, ix, iy, pflag, k_offset, limg, img, bb_offset, bbk_offset, h1, h2, a0, a, b, f0, f, selectors, acx, acy, posmin, posmax, eposmin, eposmax, annot
    limg.config(image=img[np.random.randint(len(img))])
    selectors = []
    cursor = []
    h1 = []
    h2 = []
    f = []
    f0 = []
    try:
        if pflag:
            pass
    except NameError:
        print('Choose a plot type first')
        st.put('Choose a plot type first')
        return
    if pflag == 1:
        if 'MDC Curves' not in value.get():
            mz = data.to_numpy()
            f0 = plt.figure(figsize=(8*scale, 7*scale), layout='constrained')
            a0 = plt.axes([0.13, 0.45, 0.8, 0.5])
            a1 = plt.axes([0.13, 0.08, 0.8, 0.2])
            a0.set_title('Drag to select specific region', font='Arial', fontsize=size(18))
            selectors.append(RectangleSelector(
                a0, select_callback,
                useblit=True,
                button=[1, 3],  # disable middle button
                minspanx=5, minspany=5,
                spancoords='pixels',
                interactive=True,
                props=props))
            # f0.canvas.mpl_connect('key_press_event',toggle_selector)
        if value.get() != 'Raw Data' and 'MDC Curves' not in value.get():
            f, a = plt.subplots(dpi=150)
        elif value.get() == 'MDC Curves':
            f=plt.figure(figsize=(4*scale, 6*scale),dpi=150)
            a = f.subplots()
        elif value.get() == 'E-k with MDC Curves':
            f = plt.figure(figsize=(9*scale, 7*scale), layout='constrained')
            at_ = plt.axes([0.28, 0.15, 0.5, 0.75])
            at_.set_xticks([])
            at_.set_yticks([])
            a = plt.axes([0.13, 0.15, 0.4, 0.75])
            a1_ = plt.axes([0.53, 0.15, 0.4, 0.75])
        if value.get() == 'Raw Data':
            f = plt.figure(figsize=(9*scale, 7*scale), layout='constrained')
            a = plt.axes([0.13, 0.1, 0.55, 0.6])
            acx = plt.axes([0.13, 0.73, 0.55, 0.18])
            acy = plt.axes([0.7, 0.1, 0.15, 0.6])
            eacb = plt.axes([0.87, 0.1, 0.02, 0.6])
            plt.connect('motion_notify_event', cut_move)
            plt.connect('button_press_event', cut_select)
            if emf=='KE':
                mx, my = np.meshgrid(phi, ev)
            else:
                mx, my = np.meshgrid(phi, vfe-ev)
            # h1 = a.scatter(mx,my,c=mz,marker='o',s=scale*scale*0.9,cmap=value3.get());
            h1 = a.pcolormesh(mx, my, mz, cmap=value3.get())
            annot = a.annotate(
                "", xy=(0,0), xytext=(20,20), textcoords="offset points",
                bbox=dict(boxstyle="round", fc="w", alpha=0.6),
                fontsize=size(14)
                # fontsize=size(12),
                # arrowprops=dict(arrowstyle="->")
            )
            annot.set_visible(False)
            f.canvas.mpl_connect('motion_notify_event', cur_on_move)
            if emf=='KE':
                yl = a.get_ylim()
            else:
                yl = sorted(a.get_ylim(), reverse=True)
            cb = f.colorbar(h1, cax=eacb, orientation='vertical')
            # cb.set_ticklabels(cb.get_ticks(), font='Arial', fontsize=size(14))
            
            h2 = a0.pcolormesh(mx, my, mz, cmap=value3.get())
            cb1 = f0.colorbar(h2)
            # cb1.set_ticklabels(cb.get_ticks(), font='Arial', fontsize=size(14))

            acx.set_xticks([])
            acx.set_yticks([])
            acy.set_xticks([])
            acy.set_yticks([])
            
            n = a1.hist(mz.flatten(), bins=np.linspace(
                min(mz.flatten()), max(mz.flatten()), 50), color='green')
            a1.set_xlabel('Intensity')
            a1.set_ylabel('Counts')
            a1.set_title('Drag to Select the range of Intensity ')
            selectors.append(SpanSelector(
                a1,
                onselect,
                "horizontal",
                useblit=True,
                props=dict(alpha=0.3, facecolor="tab:blue"),
                onmove_callback=onmove_callback,
                interactive=True,
                drag_from_anywhere=True,
                snap_values=n[1]
            ))
        elif value.get() == 'First Derivative':
            pz = np.diff(smooth(data.to_numpy()))/np.diff(phi)
            if emf=='KE':
                px, py = np.meshgrid(phi[0:-1], ev)
                tev = py.copy()
            else:
                px, py = np.meshgrid(phi[0:-1], vfe-ev)
                tev = vfe-py.copy()
            if npzf:
                px = phi[0:-1]+np.diff(phi)/2
            else:
                px = (2*m*tev*1.602176634*10**-19)**0.5*np.sin((np.float64(k_offset.get())+px+np.diff(phi)/2)/180*np.pi)*10**-10/(h/2/np.pi)
            h1 = a.pcolormesh(px, py, pz, cmap=value3.get())
            # cursor = Cursor(a, useblit=True, color='red', linewidth=scale*1)
            annot = a.annotate(
                "", xy=(0,0), xytext=(20,20), textcoords="offset points",
                bbox=dict(boxstyle="round", fc="w", alpha=0.6),
                fontsize=size(12)
                # fontsize=size(12),
                # arrowprops=dict(arrowstyle="->")
            )
            annot.set_visible(False)
            f.canvas.mpl_connect('motion_notify_event', cur_move)
            f.canvas.mpl_connect('motion_notify_event', cur_on_move)
            if emf=='KE':
                yl = a.get_ylim()
            else:
                yl = sorted(a.get_ylim(), reverse=True)
            h2 = a0.pcolormesh(px, py, pz, cmap=value3.get())
            cb = f.colorbar(h1)
            # cb.set_ticklabels(cb.get_ticks(), font='Arial', fontsize=size(14))
            
            cb1 = f0.colorbar(h2)
            # cb1.set_ticklabels(cb1.get_ticks(), font='Arial', fontsize=size(14))

            n = a1.hist(pz.flatten(), bins=np.linspace(
                min(pz.flatten()), max(pz.flatten()), 50), color='green')
            a1.set_xlabel('Intensity')
            a1.set_ylabel('Counts')
            a1.set_title('Drag to Select the range of Intensity ')
            selectors.append(SpanSelector(
                a1,
                onselect,
                "horizontal",
                useblit=True,
                props=dict(alpha=0.3, facecolor="tab:blue"),
                onmove_callback=onmove_callback,
                interactive=True,
                drag_from_anywhere=True,
                snap_values=n[1]
            ))
        elif value.get() == 'Second Derivative':
            # pz = np.diff(smooth(data.to_numpy()))/np.diff(phi)
            # pz = -np.diff(smooth(pz))/np.diff(phi[0:-1])
            # if emf=='KE':
            #     px, py = np.meshgrid(phi[0:-2], ev)
            # else:
            #     px, py = np.meshgrid(phi[0:-2], vfe-ev)
            # px = (2*m*np.full_like(np.zeros([len(phi[0:-2]), len(ev)], dtype=float), ev)*1.602176634*10**-19).transpose(
            # )**0.5*np.sin((np.float64(k_offset.get())+px+np.diff(phi[0:-1])/2*2)/180*np.pi)*10**-10/(h/2/np.pi)
            
            pz = laplacian_filter(data.to_numpy(), im_kernel)
            if emf=='KE':
                px, py = np.meshgrid(phi, ev)
                tev = py.copy()
            else:
                px, py = np.meshgrid(phi, vfe-ev)
                tev = vfe-py.copy()
            if npzf:
                px = phi
            else:
                px = (2*m*tev*1.602176634*10**-19)**0.5*np.sin((np.float64(k_offset.get())+px)/180*np.pi)*10**-10/(h/2/np.pi)
            
            h1 = a.pcolormesh(px, py, pz, cmap=value3.get())
            # cursor = Cursor(a, useblit=True, color='red', linewidth=scale*1)
            annot = a.annotate(
                "", xy=(0,0), xytext=(20,20), textcoords="offset points",
                bbox=dict(boxstyle="round", fc="w", alpha=0.6),
                fontsize=size(12)
                # fontsize=size(12),
                # arrowprops=dict(arrowstyle="->")
            )
            annot.set_visible(False)
            f.canvas.mpl_connect('motion_notify_event', cur_move)
            f.canvas.mpl_connect('motion_notify_event', cur_on_move)
            if emf=='KE':
                yl = a.get_ylim()
            else:
                yl = sorted(a.get_ylim(), reverse=True)
            h2 = a0.pcolormesh(px, py, pz, cmap=value3.get())
            cb = f.colorbar(h1)
            # cb.set_ticklabels(cb.get_ticks(), font='Arial', fontsize=size(14))
            
            cb1 = f0.colorbar(h2)
            # cb1.set_ticklabels(cb1.get_ticks(), font='Arial', fontsize=size(14))

            n = a1.hist(pz.flatten(), bins=np.linspace(
                min(pz.flatten()), max(pz.flatten()), 50), color='green')
            a1.set_xlabel('Intensity')
            a1.set_ylabel('Counts')
            a1.set_title('Drag to Select the range of Intensity ')
            selectors.append(SpanSelector(
                a1,
                onselect,
                "horizontal",
                useblit=True,
                props=dict(alpha=0.3, facecolor="tab:blue"),
                onmove_callback=onmove_callback,
                interactive=True,
                drag_from_anywhere=True,
                snap_values=n[1]
            ))
        else:
            if value.get() == 'E-k Diagram':
                # h1=a.scatter(mx,my,c=mz,marker='o',s=scale*scale*0.9,cmap=value3.get());
                if emf=='KE':
                    px, py = np.meshgrid(phi, ev)
                    tev = py.copy()
                else:
                    px, py = np.meshgrid(phi, vfe-ev)
                    tev = vfe-py.copy()
                if npzf:
                    px = phi
                else:
                    px = (2*m*tev*1.602176634*10**-19)**0.5*np.sin((np.float64(k_offset.get())+px)/180*np.pi)*10**-10/(h/2/np.pi)
                pz = data.to_numpy()
                h1 = a.pcolormesh(px, py, pz, cmap=value3.get())
                # cursor = Cursor(a, useblit=True, color='red', linewidth=scale*1)
                annot = a.annotate(
                    "", xy=(0,0), xytext=(20,20), textcoords="offset points",
                    bbox=dict(boxstyle="round", fc="w", alpha=0.6),
                    fontsize=size(12)
                    # fontsize=size(12),
                    # arrowprops=dict(arrowstyle="->")
                )
                annot.set_visible(False)
                f.canvas.mpl_connect('motion_notify_event', cur_move)
                f.canvas.mpl_connect('motion_notify_event', cur_on_move)
                if emf=='KE':
                    yl = a.get_ylim()
                else:
                    yl = sorted(a.get_ylim(), reverse=True)
                h2 = a0.pcolormesh(px, py, pz, cmap=value3.get())
                cb = f.colorbar(h1)
                # cb.set_ticklabels(cb.get_ticks(), font='Arial', fontsize=size(14))
                
                cb1 = f0.colorbar(h2)
                # cb1.set_ticklabels(cb1.get_ticks(), font='Arial', fontsize=size(14))
                

                n = a1.hist(pz.flatten(), bins=np.linspace(
                    min(pz.flatten()), max(pz.flatten()), 50), color='green')
                a1.set_xlabel('Intensity')
                a1.set_ylabel('Counts')
                a1.set_title('Drag to Select the range of Intensity ')
                selectors.append(SpanSelector(
                    a1,
                    onselect,
                    "horizontal",
                    useblit=True,
                    props=dict(alpha=0.3, facecolor="tab:blue"),
                    onmove_callback=onmove_callback,
                    interactive=True,
                    drag_from_anywhere=True,
                    snap_values=n[1]
                ))
            elif value.get() == 'MDC Normalized':
                for n in range(len(ev)-1):
                    ecut = data.sel(eV=ev[n], method='nearest')
                    if npzf:
                        x = phi
                    else:
                        x = (2*m*ev[n]*1.602176634*10**-19)**0.5*np.sin(
                        (np.float64(k_offset.get())+phi)/180*np.pi)*10**-10/(h/2/np.pi)
                    y = ecut.to_numpy().reshape(len(ecut))
                    # mz[len(phi)*n:len(phi)*(n+1)]=np.array(y,dtype=float)
                    # mx[len(phi)*n:len(phi)*(n+1)]=x
                    # ty=np.arange(len(x), dtype=float)
                    # my[len(phi)*n:len(phi)*(n+1)]=np.full_like(ty, ev[n])
                    # a.scatter(x,np.full_like(ty, ev[n]),c=np.array(y,dtype=int),marker='o',s=scale*scale*0.9,cmap=value3.get());
                    if emf=='KE':
                        px, py = np.meshgrid(x, ev[n:n+2])
                    else:
                        px, py = np.meshgrid(x, vfe-ev[n:n+2])
                    a.pcolormesh(px, py, np.full_like(
                        np.zeros([2, len(phi)], dtype=float), y), cmap=value3.get())
                    if emf=='KE':
                        yl = a.get_ylim()
                    else:
                        yl = sorted(a.get_ylim(), reverse=True)
                    a0.pcolormesh(px, py, np.full_like(
                        np.zeros([2, len(phi)], dtype=float), y), cmap=value3.get())
                # cursor = Cursor(a, useblit=True, color='red', linewidth=scale*1)
                annot = a.annotate(
                    "", xy=(0,0), xytext=(20,20), textcoords="offset points",
                    bbox=dict(boxstyle="round", fc="w", alpha=0.6),
                    fontsize=size(12)
                    # fontsize=size(12),
                    # arrowprops=dict(arrowstyle="->")
                )
                annot.set_visible(False)
                f.canvas.mpl_connect('motion_notify_event', cur_move)
                f.canvas.mpl_connect('motion_notify_event', cur_on_move)
            elif value.get() == 'MDC Curves':
                y = np.zeros([len(ev),len(phi)],dtype=float)
                for n in range(len(ev)):
                    ecut = data.sel(eV=ev[n], method='nearest')
                    if npzf:
                        x = phi
                    else:
                        x = (2*m*ev[n]*1.602176634*10**-19)**0.5*np.sin(
                        (np.float64(k_offset.get())+phi)/180*np.pi)*10**-10/(h/2/np.pi)
                    y[n][:] = ecut.to_numpy().reshape(len(ecut))
                for n in range(len(ev)//d):
                    yy=y[n*d][:]+n*np.max(y)/d
                    yy=smooth(yy,l,p)
                    a.plot(x, yy, c='black')
            elif value.get() == 'E-k with MDC Curves':
                    y = np.zeros([len(ev),len(phi)],dtype=float)
                    for n in range(len(ev)):
                        ecut = data.sel(eV=ev[n], method='nearest')
                        if npzf:
                            x = phi
                        else:
                            x = (2*m*ev[n]*1.602176634*10**-19)**0.5*np.sin(
                            (np.float64(k_offset.get())+phi)/180*np.pi)*10**-10/(h/2/np.pi)
                        y[n][:] = ecut.to_numpy().reshape(len(ecut))
                    for n in range(len(ev)//d):
                        yy=y[n*d][:]+n*np.max(y)/d
                        yy=smooth(yy,l,p)
                        a1_.plot(x, yy, c='black')
                    if emf=='KE':
                        px, py = np.meshgrid(phi, ev)
                        tev = py.copy()
                    else:
                        px, py = np.meshgrid(phi, vfe-ev)
                        tev = vfe-py.copy()
                    if npzf:
                        px = phi
                    else:
                        px = (2*m*tev*1.602176634*10**-19)**0.5*np.sin((np.float64(k_offset.get())+px)/180*np.pi)*10**-10/(h/2/np.pi)
                    pz = data.to_numpy()
                    h1 = a.pcolormesh(px, py, pz, cmap=value3.get())
                    ylb=a1_.twinx()
                    ylb.set_ylabel('Intensity (a.u.)', font='Arial', fontsize=size(22))
                    ylb.set_yticklabels([])
                    # cb = fig.colorbar(h1, ax=a1_)
                    # cb.set_ticklabels(cb.get_ticks(), font='Arial', fontsize=size(20))
        if 'E-k with' not in value.get():
            if  value.get() != 'Raw Data':
                a.set_title(value.get(), font='Arial', fontsize=size(18))
        else:
            at_.set_title(value.get(), font='Arial', fontsize=size(24))
        a.set_xlabel(r'k ($\frac{2\pi}{\AA}$)', font='Arial', fontsize=size(16))
        # a.set_xticklabels(labels=a.get_xticklabels(), fontsize=size(20))
        if 'MDC Curves' not in value.get():
            a0.set_xlabel(r'k ($\frac{2\pi}{\AA}$)', font='Arial', fontsize=size(16))
            # a0.set_xticklabels(labels=a0.get_xticklabels(), fontsize=size(14))
            if emf=='KE':
                a.set_ylabel('Kinetic Energy (eV)', font='Arial', fontsize=size(16))
                # a.set_yticklabels(labels=a.get_yticklabels(), fontsize=size(20))
                a0.set_ylabel('Kinetic Energy (eV)', font='Arial', fontsize=size(16))
                # a0.set_yticklabels(labels=a0.get_yticklabels(), fontsize=size(14))
                if value.get() == 'Raw Data':
                    a.set_ylabel('Kinetic Energy (eV)', font='Arial', fontsize=size(16))
                    # a.set_yticklabels(labels=a.get_yticklabels(), fontsize=size(14))
                    a0.set_ylabel('Kinetic Energy (eV)', font='Arial', fontsize=size(16))
                    # a0.set_yticklabels(labels=a0.get_yticklabels(), fontsize=size(14))
            else:
                a.set_ylabel('Binding Energy (eV)', font='Arial', fontsize=size(16))
                # a.set_yticklabels(labels=a.get_yticklabels(), fontsize=size(20))
                a0.set_ylabel('Binding Energy (eV)', font='Arial', fontsize=size(16))
                # a0.set_yticklabels(labels=a0.get_yticklabels(), fontsize=size(14))
                if value.get() == 'Raw Data':
                    a.set_ylabel('Binding Energy (eV)', font='Arial', fontsize=size(16))
                    # a.set_yticklabels(labels=a.get_yticklabels(), fontsize=size(14))
                    a0.set_ylabel('Binding Energy (eV)', font='Arial', fontsize=size(16))
                    # a0.set_yticklabels(labels=a0.get_yticklabels(), fontsize=size(14))
                a.invert_yaxis()
                a0.invert_yaxis()
        else:
            if 'E-k with' in value.get():
                if emf=='KE':
                    a.set_ylabel('Kinetic Energy (eV)', font='Arial', fontsize=size(22))
                    a.set_yticklabels(labels=a.get_yticklabels(), fontsize=size(20))
                    a.set_ylim([ev[0], ev[n*d]])
                else:
                    a.set_ylabel('Binding Energy (eV)', font='Arial', fontsize=size(22))
                    a.set_yticklabels(labels=a.get_yticklabels(), fontsize=size(20))
                    a.invert_yaxis()
                    a.set_ylim([vfe-ev[0], vfe-ev[n*d]])
                a.set_xlabel(r'k ($\frac{2\pi}{\AA}$)', font='Arial', fontsize=size(22))
                a.set_xticklabels(labels=a.get_xticklabels(), fontsize=size(20))
                a1_.set_xlabel(r'k ($\frac{2\pi}{\AA}$)', font='Arial', fontsize=size(22))
                a1_.set_xticklabels(labels=a1_.get_xticklabels(), fontsize=size(20))
                a1_.set_yticklabels([])
                a1_.set_xlim([min(x), max(x)])
                a1_.set_ylim([0, np.max(n*np.max(y)/d)])
            else:
                ylr=a.twinx()
                a.set_ylabel('Intensity (a.u.)', font='Arial', fontsize=size(22))
                a.set_yticklabels([])
                ylr.set_ylabel(r'$\longleftarrow$ Binding Energy', font='Arial', fontsize=size(22))
                ylr.set_yticklabels([])
                a.set_xlim([min(x), max(x)])
                a.set_ylim([0, np.max(n*np.max(y)/d)])
        if value.get() == 'Raw Data':
            acx.set_title('                Raw Data', font='Arial', fontsize=size(18))
            # cb.set_ticklabels(cb.get_ticks(), font='Arial', fontsize=size(14))
            if npzf:
                a.set_xlabel(r'k ($\frac{2\pi}{\AA}$)', font='Arial', fontsize=size(16))
                a0.set_xlabel(r'k ($\frac{2\pi}{\AA}$)', font='Arial', fontsize=size(16))
            else:
                a.set_xlabel('Angle (deg)', font='Arial', fontsize=size(16))
                a0.set_xlabel('Angle (deg)', font='Arial', fontsize=size(16))
            # a.set_xticklabels(labels=a.get_xticklabels(), fontsize=size(14))
            # a0.set_xticklabels(labels=a0.get_xticklabels(), fontsize=size(14))
        # a.set_xticklabels(labels=a.get_xticklabels(),fontsize=size(10))
        # a.set_yticklabels(labels=a.get_yticklabels(),fontsize=size(10))
    if pflag == 2:
        f, a = plt.subplots(2, 1, dpi=150)
        if value1.get() == 'MDC fitted Data':
            x = (vfe-fev)*1000

            a[0].set_title('MDC Fitting Result', font='Arial', fontsize=size(24))
            a[0].set_xlabel('Binding Energy (meV)', font='Arial', fontsize=size(22))
            a[0].set_xticklabels(labels=a[0].get_xticklabels(), fontsize=size(20))
            a[0].set_ylabel(
                r'Position ($\frac{2\pi}{\AA}$)', font='Arial', fontsize=size(22))
            a[0].set_yticklabels(labels=a[0].get_yticklabels(), fontsize=size(20))
            a[0].tick_params(direction='in')
            a[0].scatter(x, pos, c='black', s=scale*scale*5)

            a[1].set_xlabel('Binding Energy (meV)', font='Arial', fontsize=size(22))
            a[1].set_xticklabels(labels=a[1].get_xticklabels(), fontsize=size(20))
            a[1].set_ylabel(
                r'FWHM ($\frac{2\pi}{\AA}$)', font='Arial', fontsize=size(22))
            a[1].set_yticklabels(labels=a[1].get_yticklabels(), fontsize=size(20))
            a[1].tick_params(direction='in')
            a[1].scatter(x, fwhm, c='black', s=scale*scale*5)
            
            a[0].invert_xaxis()
            a[1].invert_xaxis()
        elif value1.get() == 'EDC fitted Data':
            x = fk

            a[0].set_title('EDC Fitting Result', font='Arial', fontsize=size(24))
            a[0].set_xlabel(
                r'Position ($\frac{2\pi}{\AA}$', font='Arial', fontsize=size(22))
            a[0].set_xticklabels(labels=a[0].get_xticklabels(), fontsize=size(20))
            a[0].set_ylabel('Binding Energy (meV))', font='Arial', fontsize=size(22))
            a[0].set_yticklabels(labels=a[0].get_yticklabels(), fontsize=size(20))
            a[0].tick_params(direction='in')
            a[0].scatter(x, (vfe-epos)*1000, c='black', s=scale*scale*5)

            a[1].set_xlabel(
                r'Position ($\frac{2\pi}{\AA}$', font='Arial', fontsize=size(22))
            a[1].set_xticklabels(labels=a[1].get_xticklabels(), fontsize=size(20))
            a[1].set_ylabel('FWHM (meV)', font='Arial', fontsize=size(22))
            a[1].set_yticklabels(labels=a[1].get_yticklabels(), fontsize=size(20))
            a[1].tick_params(direction='in')
            a[1].scatter(x, efwhm*1000, c='black', s=scale*scale*5)
            
            a[0].invert_yaxis()
            
        elif value1.get() == 'Real Part':
            x = (vfe-fev)*1000
            y = pos
            a[0].set_title('Real Part', font='Arial', fontsize=size(24))
            a[0].plot(rx, ry, c='black', linestyle='-', marker='.')

            a[0].tick_params(direction='in')
            a[0].set_xlabel('Binding Energy (meV)', font='Arial', fontsize=size(22))
            a[0].set_xticklabels(labels=a[0].get_xticklabels(), fontsize=size(20))
            a[0].set_ylabel(r'Re $\Sigma$ (meV)', font='Arial', fontsize=size(22))
            a[0].set_yticklabels(labels=a[0].get_yticklabels(), fontsize=size(20))

            h1 = a[1].scatter(y, x, c='black', s=scale*scale*5)
            h2 = a[1].scatter(k*np.float64(bbk_offset.get()),
                              -be+np.float64(bb_offset.get()), c='red', s=scale*scale*5)

            a[1].legend([h1, h2], ['fitted data', 'bare band'],fontsize=size(20))
            a[1].tick_params(direction='in')
            a[1].set_ylabel('Binding Energy (meV)', font='Arial', fontsize=size(22))
            a[1].set_yticklabels(labels=a[1].get_yticklabels(), fontsize=size(20))
            a[1].set_xlabel(
                r'Pos ($\frac{2\pi}{\AA}$)', font='Arial', fontsize=size(22))
            a[1].set_xticklabels(labels=a[1].get_xticklabels(), fontsize=size(20))
            
            a[0].invert_xaxis()
            a[1].invert_yaxis()

            # a[0].set_xlim([-1000,50])
            # a[0].set_ylim([-100,500])
            # a[1].set_ylim([-600,200])
            # a[1].set_xlim([-0.05,0.05])
        elif value1.get() == 'Imaginary Part':

            tbe = (vfe-fev)*1000

            x = interp(tbe, -be+np.float64(bb_offset.get()),
                       k*np.float64(bbk_offset.get()))
            y = interp(x, k*np.float64(bbk_offset.get()),
                       -be+np.float64(bb_offset.get()))
            xx = np.diff(x)
            yy = np.diff(y)

            # eliminate vf in gap
            for i in range(len(yy)):
                if yy[i]/xx[i] > 20000:
                    yy[i] = 0
            v = yy/xx
            # v = np.append(v, v[-1])  # fermi velocity
            v=interp(pos,x[0:-1]+xx/2,v)
            yy = np.abs(v*fwhm/2)
            xx = tbe
            ax = a
            a = ax[0]
            b = ax[1]
            a.set_title('Imaginary Part', font='Arial', fontsize=size(24))
            a.plot(xx, yy, c='black', linestyle='-', marker='.')

            ix = xx
            iy = yy
            a.tick_params(direction='in')
            a.set_xlabel('Binding Energy (eV)', font='Arial', fontsize=size(22))
            a.set_xticklabels(labels=a.get_xticklabels(), fontsize=size(20))
            a.set_ylabel(r'Im $\Sigma$ (meV)', font='Arial', fontsize=size(22))
            a.set_yticklabels(labels=a.get_yticklabels(), fontsize=size(20))

            x = (vfe-fev)*1000
            y = fwhm
            b.plot(x, y, c='black', linestyle='-', marker='.')
            b.tick_params(direction='in')
            b.set_xlabel('Binding Energy (eV)', font='Arial', fontsize=size(22))
            b.set_xticklabels(labels=b.get_xticklabels(), fontsize=size(20))
            b.set_ylabel(r'FWHM ($\frac{2\pi}{\AA}$)',
                         font='Arial', fontsize=size(22))
            b.set_yticklabels(labels=b.get_yticklabels(), fontsize=size(20))

            x = (vfe-fev)*1000
            y = pos
            yy = interp(y, k*np.float64(bbk_offset.get()), be -
                        np.float64(bb_offset.get()))  # interp x into be,k set
            
            a.invert_xaxis()
            b.invert_xaxis()
    if pflag == 3:
        if value2.get() == 'Real & Imaginary':
            f, a = plt.subplots(2, 1, dpi=150)
            a[0].set_title(r'Self Energy $\Sigma$', font='Arial', fontsize=size(24))
            if dl==0:
                a[0].scatter(rx, ry, edgecolors='black', c='w')
            elif dl==1:
                a[0].plot(rx, ry, c='black')
            elif dl==2:
                a[0].plot(rx, ry, c='black', linestyle='-', marker='.')
            a[0].tick_params(direction='in')
            a[0].set_xlabel('Binding Energy (meV)', font='Arial', fontsize=size(22))
            a[0].set_xticklabels(labels=a[0].get_xticklabels(), fontsize=size(20))
            a[0].set_ylabel(r'Re $\Sigma$ (meV)', font='Arial', fontsize=size(22))
            a[0].set_yticklabels(labels=a[0].get_yticklabels(), fontsize=size(20))
            if dl==0:
                a[1].scatter(ix, iy, edgecolors='black', c='w')
            elif dl==1:
                a[1].plot(ix, iy, c='black')
            elif dl==2:
                a[1].plot(ix, iy, c='black', linestyle='-', marker='.')
            a[1].tick_params(direction='in')
            a[1].set_xlabel('Binding Energy (meV)', font='Arial', fontsize=size(22))
            a[1].set_xticklabels(labels=a[1].get_xticklabels(), fontsize=size(20))
            a[1].set_ylabel(r'Im $\Sigma$ (meV)', font='Arial', fontsize=size(22))
            a[1].set_yticklabels(labels=a[1].get_yticklabels(), fontsize=size(20))
            
            a[0].invert_xaxis()
            a[1].invert_xaxis()
        elif 'KK Transform' in value2.get():
            
            tbe = (vfe-fev)*1000
            ix=(tbe-tbe[-1])*-1
            cix=np.append(ix+ix[0],ix)
            tix=cix[0:len(cix)-1]*-1
            # kx=ix
            kx = np.append(cix,tix[::-1])
            ky = np.linspace(0, 1, len(kx))
            ciy=np.append(iy*0+np.mean(iy),iy)
            tiy=ciy[0:len(ciy)-1]
            ciy = np.append(ciy,tiy[::-1])

            #for imaginary part
            ix=(tbe-tbe[-1])*-1
            cix=np.append(ix+ix[0],ix)
            tix=cix[0:len(cix)-1]*-1
            kx = np.append(cix,tix[::-1])
            ky = np.linspace(0, 1, len(kx))
            cry=np.append(ry*0,ry)
            tcry=cry[0:len(cry)-1]*-1
            cry = np.append(cry,tcry[::-1])

            # Hilbert transform
            analytic_signal_r = hilbert(cry)
            amplitude_envelope_r = np.abs(analytic_signal_r)
            instantaneous_phase_r = np.unwrap(np.angle(analytic_signal_r))
            instantaneous_frequency_r = np.diff(instantaneous_phase_r) / (2.0 * np.pi)

            analytic_signal_i = hilbert(ciy)
            amplitude_envelope_i = np.abs(analytic_signal_i)
            instantaneous_phase_i = np.unwrap(np.angle(analytic_signal_i))
            instantaneous_frequency_i = np.diff(instantaneous_phase_i) / (2.0 * np.pi)

            # Reconstructed real and imaginary parts
            reconstructed_real = np.imag(analytic_signal_i)
            reconstructed_imag = -np.imag(analytic_signal_r)

                # Plot
            if 'Real Part' not in value2.get() and 'Imaginary Part' not in value2.get():
                f, a = plt.subplots(2, 1, dpi=150)
                # Plot imaginary data and its Hilbert transformation
                a[0].set_title(r'Self Energy $\Sigma$', font='Arial', fontsize=size(24))
                if dl==0:
                    a[0].scatter(tbe, ry, edgecolors='black', c='w', label=r'Re $\Sigma$')
                    a[0].scatter(tbe, reconstructed_real[len(ix):2*len(ix)]+(ry-np.mean(reconstructed_real[len(ix):2*len(ix)])), edgecolors='red', c='w', label=r'Re $\Sigma_{KK}$=KK(Im $\Sigma$)')
                elif dl==1:
                    a[0].plot(tbe, ry, c='black', label=r'Re $\Sigma$')
                    a[0].plot(tbe, reconstructed_real[len(ix):2*len(ix)]+(ry-np.mean(reconstructed_real[len(ix):2*len(ix)])), c='red', label=r'Re $\Sigma_{KK}$=KK(Im $\Sigma$)')
                elif dl==2:
                    a[0].plot(tbe, ry, c='black', linestyle='-', marker='.', label=r'Re $\Sigma$')
                    a[0].plot(tbe, reconstructed_real[len(ix):2*len(ix)]+(ry-np.mean(reconstructed_real[len(ix):2*len(ix)])), c='red', linestyle='-', marker='.', label=r'Re $\Sigma_{KK}$=KK(Im $\Sigma$)')
                a[0].set_xlabel('Binding Energy (meV)', font='Arial', fontsize=size(22))
                a[0].set_xticklabels(a[0].get_xticklabels(), fontsize=size(20))
                a[0].set_ylabel(r'Re $\Sigma$ (meV)', font='Arial', fontsize=size(22))
                a[0].set_yticklabels(a[0].get_yticklabels(), fontsize=size(20))
                a[0].legend(fontsize=size(20))
                if dl==0:
                    a[1].scatter(tbe, iy, edgecolors='black', c='w', label=r'Im $\Sigma$')
                    a[1].scatter(tbe, reconstructed_imag[len(ix):2*len(ix)]+(iy-np.mean(reconstructed_imag[len(ix):2*len(ix)])), edgecolors='red', c='w', label=r'Im $\Sigma_{KK}$=KK(Re $\Sigma$)')
                elif dl==1:
                    a[1].plot(tbe, iy, c='black', label=r'Im $\Sigma$')
                    a[1].plot(tbe, reconstructed_imag[len(ix):2*len(ix)]+(iy-np.mean(reconstructed_imag[len(ix):2*len(ix)])), c='red', label=r'Im $\Sigma_{KK}$=KK(Re $\Sigma$)')
                elif dl==2:
                    a[1].plot(tbe, iy, c='black', linestyle='-', marker='.', label=r'Im $\Sigma$')
                    a[1].plot(tbe, reconstructed_imag[len(ix):2*len(ix)]+(iy-np.mean(reconstructed_imag[len(ix):2*len(ix)])), c='red', linestyle='-', marker='.', label=r'Im $\Sigma_{KK}$=KK(Re $\Sigma$)')
                a[1].set_xlabel('Binding Energy (meV)', font='Arial', fontsize=size(22))
                a[1].set_xticklabels(a[1].get_xticklabels(), fontsize=size(20))
                a[1].set_ylabel(r'Im $\Sigma$ (meV)', font='Arial', fontsize=size(22))
                a[1].set_yticklabels(a[1].get_yticklabels(), fontsize=size(20))
                a[1].legend(fontsize=size(20))
                a[0].invert_xaxis()
                a[1].invert_xaxis()
            elif 'Real Part' in value2.get():
                f = plt.figure(figsize=(8*scale, 7*scale),layout='constrained')
                a=plt.axes([0.2,0.12,0.7,0.8])
                ttbe=tbe/1000
                if 'nd' in value2.get():
                    a.set_title(r'Self Energy $\Sigma$ Real Part', font='Arial', fontsize=size(24))
                    ty=np.diff(smooth(ry,20,3))/np.diff(ttbe)
                    if dl==0:
                        a.scatter(ttbe[0:-1], ty, edgecolors='black', c='w', label=r'Re $\Sigma$')
                    elif dl==1:
                        a.plot(ttbe[0:-1], ty, c='black', label=r'Re $\Sigma$')
                    elif dl==2:
                        a.plot(ttbe[0:-1], ty, c='black', linestyle='-', marker='.', label=r'Re $\Sigma$')
                    a.set_xlabel('Binding Energy (eV)', font='Arial', fontsize=size(22))
                    a.set_ylabel(r'$2^{nd} der. Re \Sigma$', font='Arial', fontsize=size(22))
                    a.set_xticklabels(a.get_xticklabels(),fontsize=size(20))
                    a.set_yticks([0])
                    a.set_yticklabels(a.get_yticklabels(),fontsize=size(20))
                else:
                    a.set_title(r'Self Energy $\Sigma$ Real Part', font='Arial', fontsize=size(24))
                    if dl==0:
                        a.scatter(ttbe, ry, edgecolors='black', c='w', label=r'Re $\Sigma$')
                        a.scatter(ttbe, reconstructed_real[len(ix):2*len(ix)]+(ry-np.mean(reconstructed_real[len(ix):2*len(ix)])), edgecolors='red', c='w', label=r'Re $\Sigma_{KK}$=KK(Im $\Sigma$)')
                    elif dl==1:
                        a.plot(ttbe, ry, c='black', label=r'Re $\Sigma$')
                        a.plot(ttbe, reconstructed_real[len(ix):2*len(ix)]+(ry-np.mean(reconstructed_real[len(ix):2*len(ix)])), c='red', label=r'Re $\Sigma_{KK}$=KK(Im $\Sigma$)')
                    elif dl==2:
                        a.plot(ttbe, ry, c='black', linestyle='-', marker='.', label=r'Re $\Sigma$')
                        a.plot(ttbe, reconstructed_real[len(ix):2*len(ix)]+(ry-np.mean(reconstructed_real[len(ix):2*len(ix)])), c='red', linestyle='-', marker='.', label=r'Re $\Sigma_{KK}$=KK(Im $\Sigma$)')
                    a.set_xlabel('Binding Energy (eV)', font='Arial', fontsize=size(22))
                    a.set_ylabel(r'Re $\Sigma$ (meV)', font='Arial', fontsize=size(22))
                    a.set_xticklabels(a.get_xticklabels(),fontsize=size(20))
                    a.set_yticklabels(a.get_yticklabels(),fontsize=size(20))
                    ll=a.legend(fontsize=size(20))
                    ll.draw_frame(False)
                a.invert_xaxis()
            elif 'Imaginary Part' in value2.get():
                f = plt.figure(figsize=(8*scale, 7*scale),layout='constrained')
                a=plt.axes([0.2,0.12,0.7,0.8])
                ttbe=tbe/1000
                if 'st' in value2.get():
                    a.set_title(r'Self Energy $\Sigma$ Imaginary Part', font='Arial', fontsize=size(24))
                    ty=np.diff(smooth(iy,20,3))/np.diff(ttbe)
                    if dl==0:
                        a.scatter(ttbe[0:-1], ty, edgecolors='black', c='w', label=r'Im $\Sigma$')
                    elif dl==1:
                        a.plot(ttbe[0:-1], ty, c='black', label=r'Im $\Sigma$')
                    elif dl==2:
                        a.plot(ttbe[0:-1], ty, c='black', linestyle='-', marker='.', label=r'Im $\Sigma$')
                    a.set_xlabel('Binding Energy (eV)', font='Arial', fontsize=size(22))
                    a.set_ylabel(r'$1^{st} der. Im \Sigma$', font='Arial', fontsize=size(22))
                    a.set_xticklabels(a.get_xticklabels(),fontsize=size(20))
                    a.set_yticks([0])
                    a.set_yticklabels(a.get_yticklabels(),fontsize=size(20))
                else:
                    a.set_title(r'Self Energy $\Sigma$ Imaginary Part', font='Arial', fontsize=size(24))
                    if dl==0:
                        a.scatter(ttbe, iy, edgecolors='black', c='w', label=r'Im $\Sigma$')
                        a.scatter(ttbe, reconstructed_imag[len(ix):2*len(ix)]+(iy-np.mean(reconstructed_imag[len(ix):2*len(ix)])), edgecolors='red', c='w', label=r'Im $\Sigma_{KK}$=KK(Re $\Sigma$)')
                    elif dl==1:
                        a.plot(ttbe, iy, c='black', label=r'Im $\Sigma$')
                        a.plot(ttbe, reconstructed_imag[len(ix):2*len(ix)]+(iy-np.mean(reconstructed_imag[len(ix):2*len(ix)])), c='red', label=r'Im $\Sigma_{KK}$=KK(Re $\Sigma$)')
                    elif dl==2:
                        a.plot(ttbe, iy, c='black', linestyle='-', marker='.', label=r'Im $\Sigma$')
                        a.plot(ttbe, reconstructed_imag[len(ix):2*len(ix)]+(iy-np.mean(reconstructed_imag[len(ix):2*len(ix)])), c='red', linestyle='-', marker='.', label=r'Im $\Sigma_{KK}$=KK(Re $\Sigma$)')
                    a.set_xlabel('Binding Energy (eV)', font='Arial', fontsize=size(22))
                    a.set_ylabel(r'Im $\Sigma$ (meV)', font='Arial', fontsize=size(22))
                    a.set_xticklabels(a.get_xticklabels(),fontsize=size(20))
                    a.set_yticklabels(a.get_yticklabels(),fontsize=size(20))
                    ll=a.legend(fontsize=size(20))
                    ll.draw_frame(False)
                a.invert_xaxis()
            ####################################################################################### KK definition
            #######################################################################################
            # f, ax = plt.subplots(2, 1, dpi=150)
            # a = ax[0]
            # b = ax[1]
            # a.set_title('Self Energy', font='Arial', fontsize=size(24))
            # a.plot(rx, ry, c='black', linestyle='-',
            #        marker='.', label=r'Re $\Sigma$')
            # a.tick_params(direction='in')
            # a.set_xlabel('Binding Energy (eV)', font='Arial', fontsize=size(22))
            # a.set_ylabel(r'Re $\Sigma$ (meV)', font='Arial', fontsize=size(22))

            # tbe = (vfe-fev)*1000
            # ix=(tbe-tbe[-1])*-1
            # cix=np.append(ix+ix[0],ix)
            # tix=cix[0:len(cix)-1]*-1
            # # kx=ix
            # kx = np.append(cix,tix[::-1])
            # ky = np.linspace(0, 1, len(kx))
            # ciy=np.append(iy*0,iy)
            # tiy=ciy[0:len(ciy)-1]
            # ciy = np.append(ciy,tiy[::-1])
            # # de=np.linspace(0,1,len(kx))
            # # de[0:-1]=np.diff(kx)
            # # de[-1]=de[-2]
            # de = np.diff(kx)
            # de = np.append(de, de[-1])

            # for i in range(len(kx)):
            #     # ky[i]=np.trapz(y=iy/(iy-kx[i]),x=iy,dx=de)
            #     intg = 0
            #     for j in range(len(kx)):
            #         if i != j:
            #             tval = ciy[j]/(kx[j]-kx[i])*de[j]
            #             if str(ciy[j]) == 'nan':
            #                 tval = 0
            #             intg += tval
            #     ky[i] = -1/np.pi*intg/2
            # a.plot(tbe, ky[len(ix):2*len(ix)], c='red', linestyle='-', marker='.',
            #        label=r'Re $\Sigma_{KK}$=KK(Im $\Sigma$)')
            # handles, labels = a.get_legend_handles_labels()
            # a.legend(handles, labels)
            # # a.legend([h1,h2],['measured data','KK transform'])

            # #   KK Re
            # b.plot(tbe, ciy[len(ix):2*len(ix)], c='black', linestyle='-',
            #        marker='.', label=r'Im $\Sigma$')
            # b.tick_params(direction='in')
            # b.set_xlabel('Binding Energy (meV)', font='Arial', fontsize=size(22))
            # b.set_ylabel(r'Im $\Sigma$ (meV)', font='Arial', fontsize=size(22))

            
            
            # ix=(tbe-tbe[-1])*-1
            # cix=np.append(ix+ix[0],ix)
            # tix=cix[0:len(cix)-1]*-1
            # kx = np.append(cix,tix[::-1])
            # ky = np.linspace(0, 1, len(kx))
            # ciy=np.append(ry*0,ry)
            # tiy=ciy[0:len(ciy)-1]*-1
            # ciy = np.append(ciy,tiy[::-1])
            
            # # kx = rx
            # ky = np.linspace(0, 1, len(kx))
            # # de=np.linspace(0,1,len(kx))
            # # de[0:-1]=np.diff(kx)
            # # de[-1]=de[-2]
            # de = np.diff(kx)
            # de = np.append(de, de[-1])

            # for i in range(len(kx)):
            #     # ky[i]=np.trapz(y=iy/(iy-kx[i]),x=iy,dx=de)
            #     intg = 0
            #     for j in range(len(kx)):
            #         if i != j:
            #             tval = ciy[j]/(kx[j]-kx[i])*de[j]
            #             if str(ciy[j]) == 'nan':
            #                 tval = 0
            #             intg += tval
            #     ky[i] = 1/np.pi*intg
            # b.plot(tbe, ky[len(ix):2*len(ix)], c='red', linestyle='-', marker='.',
            #        label=r'Im $\Sigma_{KK}$=KK(Re $\Sigma$)')
            # handles, labels = b.get_legend_handles_labels()
            # b.legend(handles, labels)
            
            # a.invert_xaxis()
            # b.invert_xaxis()
            #######################################################################################
            ####################################################################################### KK definition
            
            
            
        elif value2.get() == 'Data Plot with Pos' or value2.get() == 'Data Plot with Pos and Bare Band':
            f0 = plt.figure(figsize=(8*scale, 7*scale), layout='constrained')
            a0 = plt.axes([0.13, 0.45, 0.8, 0.5])
            a1 = plt.axes([0.13, 0.08, 0.8, 0.2])
            a0.set_title('Drag to select specific region', font='Arial', fontsize=size(18))
            selectors.append(RectangleSelector(
                a0, select_callback,
                useblit=True,
                button=[1, 3],  # disable middle button
                minspanx=5, minspany=5,
                spancoords='pixels',
                interactive=True,
                props=props))
            # f0.canvas.mpl_connect('key_press_event',toggle_selector)
            f, a = plt.subplots(dpi=150)
            if emf=='KE':
                px, py = np.meshgrid(phi, ev)
                tev = py.copy()
            else:
                px, py = np.meshgrid(phi, vfe-ev)
                tev = vfe - py.copy()
            if npzf:
                px = phi
            else:
                px = (2*m*tev*1.602176634*10**-19)**0.5*np.sin((np.float64(k_offset.get())+px)/180*np.pi)*10**-10/(h/2/np.pi)
            pz = data.to_numpy()
            h1 = a.pcolormesh(px, py, pz, cmap=value3.get())
            if emf=='KE':
                yl = a.get_ylim()
            else:
                yl = sorted(a.get_ylim(), reverse=True)
            cb = f.colorbar(h1)
            # cb.set_ticklabels(cb.get_ticks(), font='Arial', fontsize=size(14))
            
            a.set_title(value2.get(), font='Arial', fontsize=size(18))
            a.set_xlabel(r'k ($\frac{2\pi}{\AA}$)', font='Arial', fontsize=size(16))
            # a.set_xticklabels(labels=a.get_xticklabels(), fontsize=size(20))
            if emf=='KE':
                a.set_ylabel('Kinetic Energy (eV)', font='Arial', fontsize=size(16))
            else:
                a.set_ylabel('Binding Energy (eV)', font='Arial', fontsize=size(16))
            # a.set_yticklabels(labels=a.get_yticklabels(), fontsize=size(20))
            try:
                if mp == 1:
                    if emf=='KE':
                        a.scatter(pos, fev, marker='.', s=scale*scale*0.3, c='black')
                    else:
                        a.scatter(pos, vfe-fev, marker='.', s=scale*scale*0.3, c='black')
                        
                if mf == 1:
                    ophimin = np.arcsin(
                        (rpos-fwhm/2)/(2*m*fev*1.602176634*10**-19)**0.5/10**-10*(h/2/np.pi))*180/np.pi
                    ophimax = np.arcsin(
                        (rpos+fwhm/2)/(2*m*fev*1.602176634*10**-19)**0.5/10**-10*(h/2/np.pi))*180/np.pi
                    posmin = (2*m*fev*1.602176634*10**-19)**0.5*np.sin(
                        (np.float64(k_offset.get())+ophimin)/180*np.pi)*10**-10/(h/2/np.pi)
                    posmax = (2*m*fev*1.602176634*10**-19)**0.5*np.sin(
                        (np.float64(k_offset.get())+ophimax)/180*np.pi)*10**-10/(h/2/np.pi)
                    if emf=='KE':
                        a.scatter([posmin, posmax], [fev, fev],
                                marker='|', c='grey', s=scale*scale*10, alpha=0.8)
                    else:
                        a.scatter([posmin, posmax], [vfe-fev, vfe-fev],
                                marker='|', c='grey', s=scale*scale*10, alpha=0.8)
            except:
                pass
            try:
                if ep == 1:
                    if emf=='KE':
                        a.scatter(fk, epos, marker='.', s=scale*scale*0.3, c='black')
                    else:
                        a.scatter(fk, vfe-epos, marker='.', s=scale*scale*0.3, c='black')
                            
                if ef == 1:
                    eposmin = epos-efwhm/2
                    eposmax = epos+efwhm/2
                    if emf=='KE':
                        a.scatter([fk, fk], [eposmin, eposmax],
                                marker='_', c='grey', s=scale*scale*10, alpha=0.8)
                    else:
                        a.scatter([fk, fk], [vfe-eposmin, vfe-eposmax],
                                marker='_', c='grey', s=scale*scale*10, alpha=0.8)
                        
            except:
                pass
            h2 = a0.pcolormesh(px, py, pz, cmap=value3.get())
            cb1 = f0.colorbar(h2)
            cb1.set_ticks(cb1.get_ticks())
            cb1.set_ticklabels(cb1.get_ticks(), font='Arial',
                               fontsize=size(14), minor=False)
            a0.set_xlabel(r'k ($\frac{2\pi}{\AA}$)', font='Arial', fontsize=size(16))
            if emf=='KE':
                a0.set_ylabel('Kinetic Energy (eV)', font='Arial', fontsize=size(16))
            else:
                a0.set_ylabel('Binding Energy (eV)', font='Arial', fontsize=size(16))
                
            try:
                if mp == 1:
                    if emf=='KE':
                        a0.scatter(pos, fev, marker='.', s=scale*scale*0.3, c='black')
                    else:
                        a0.scatter(pos, vfe-fev, marker='.', s=scale*scale*0.3, c='black')
                        
                if mf == 1:
                    ophimin = np.arcsin(
                        (rpos-fwhm/2)/(2*m*fev*1.602176634*10**-19)**0.5/10**-10*(h/2/np.pi))*180/np.pi
                    ophimax = np.arcsin(
                        (rpos+fwhm/2)/(2*m*fev*1.602176634*10**-19)**0.5/10**-10*(h/2/np.pi))*180/np.pi
                    posmin = (2*m*fev*1.602176634*10**-19)**0.5*np.sin(
                        (np.float64(k_offset.get())+ophimin)/180*np.pi)*10**-10/(h/2/np.pi)
                    posmax = (2*m*fev*1.602176634*10**-19)**0.5*np.sin(
                        (np.float64(k_offset.get())+ophimax)/180*np.pi)*10**-10/(h/2/np.pi)
                    if emf=='KE':
                        a0.scatter([posmin, posmax], [fev, fev],
                                marker='|', c='grey', s=scale*scale*10, alpha=0.8)
                    else:
                        a0.scatter([posmin, posmax], [vfe-fev, vfe-fev],
                                marker='|', c='grey', s=scale*scale*10, alpha=0.8)
            except:
                pass
            try:
                if ep == 1:
                    if emf=='KE':
                        a0.scatter(fk, epos, marker='.', s=scale*scale*0.3, c='black')
                    else:
                        a0.scatter(fk, vfe-epos, marker='.', s=scale*scale*0.3, c='black')
                        
                if ef == 1:
                    eposmin = epos-efwhm/2
                    eposmax = epos+efwhm/2
                    if emf=='KE':
                        a0.scatter([fk, fk], [eposmin, eposmax],
                                marker='_', c='grey', s=scale*scale*10, alpha=0.8)
                    else:
                        a0.scatter([fk, fk], [vfe-eposmin, vfe-eposmax],
                                marker='_', c='grey', s=scale*scale*10, alpha=0.8)
            except:
                pass
            # b.set_xticklabels(labels=b.get_xticklabels(),font='Arial',fontsize=size(20))
            # b.set_yticklabels(labels=b.get_yticklabels(),font='Arial',fontsize=size(20))

            n = a1.hist(pz.flatten(), bins=np.linspace(
                min(pz.flatten()), max(pz.flatten()), 50), color='green')
            a1.set_xlabel('Intensity')
            a1.set_ylabel('Counts')
            a1.set_title('Drag to Select the range of Intensity ')
            selectors.append(SpanSelector(
                a1,
                onselect,
                "horizontal",
                useblit=True,
                props=dict(alpha=0.3, facecolor="tab:blue"),
                onmove_callback=onmove_callback,
                interactive=True,
                drag_from_anywhere=True,
                snap_values=n[1]
            ))
            try:
                if value2.get() == 'Data Plot with Pos and Bare Band':
                    if emf=='KE':
                        a.plot(k*np.float64(bbk_offset.get()), (be -
                            np.float64(bb_offset.get()))/1000+vfe, linewidth=scale*0.3, c='red', linestyle='--')
                        a0.plot(k*np.float64(bbk_offset.get()), (be -
                                np.float64(bb_offset.get()))/1000+vfe, linewidth=scale*0.3, c='red', linestyle='--')
                    else:
                        a.plot(k*np.float64(bbk_offset.get()), (-be +
                            np.float64(bb_offset.get()))/1000, linewidth=scale*0.3, c='red', linestyle='--')
                        a0.plot(k*np.float64(bbk_offset.get()), (-be +
                                np.float64(bb_offset.get()))/1000, linewidth=scale*0.3, c='red', linestyle='--')
            except:
                pass
            if emf=='BE':
                a.invert_yaxis()
                a0.invert_yaxis()
            # cursor = Cursor(a, useblit=True, color='red', linewidth=scale*1)
            annot = a.annotate(
                "", xy=(0,0), xytext=(20,20), textcoords="offset points",
                bbox=dict(boxstyle="round", fc="w", alpha=0.6),
                fontsize=size(12)
                # fontsize=size(12),
                # arrowprops=dict(arrowstyle="->")
            )
            annot.set_visible(False)
            f.canvas.mpl_connect('motion_notify_event', cur_move)
            f.canvas.mpl_connect('motion_notify_event', cur_on_move)
    try:
        if value1.get() == '---Plot2---' and value2.get() != 'Real & Imaginary' and 'KK Transform' not in value2.get() and 'MDC Curves' != value.get():
            try:
                h1.set_clim([vcmin.get(), vcmax.get()])
                h2.set_clim([vcmin.get(), vcmax.get()])
            except:
                pass
            try:    # ignore the problem occurred in E-k with MDC curves
                a0.set_xlim(xl)
                a0.set_ylim(yl)
                a.set_xlim(xl)
                a.set_ylim(yl)
            except:
                pass
            if value.get() != 'Raw Data':
                plt.tight_layout()
            # if value.get()=='Raw Data':
            #     plt.connect('motion_notify_event', cut_move)
            copy_to_clipboard(f)
            st.put('graph copied to clipboard')
            if value.get() != 'Raw Data':
                threading.Thread(target=show_info,daemon=True).start()
            plt.show()
            try:
                h1.set_clim([cm.get(), cM.get()])
                h2.set_clim([cm.get(), cM.get()])
            except:
                pass
        else:
            plt.tight_layout()
            copy_to_clipboard(f)
            st.put('graph copied to clipboard')
            threading.Thread(target=show_info,daemon=True).start()
            plt.show()
        # f.ion()
        # f0.ion()
    except:
        print('fail to export graph')
        pass

    # fp=fd.asksaveasfilename(filetypes=(("PNG files", "*.png"),))
    # f.savefig(fname=fp)


def move(event):
    global xdata, ydata, x1, y1, x2, y2
    if event.xdata != None:
        out.get_tk_widget().config(cursor="crosshair")
        try:
            out.get_tk_widget().delete('rec')
            # out.get_tk_widget().delete('x1')
            # out.get_tk_widget().delete('y1')
            # out.get_tk_widget().delete('x2')
            # out.get_tk_widget().delete('y2')
        except:
            pass
        if mof == -1 and value1.get() == '---Plot2---' and value2.get() != 'Real & Imaginary' and 'KK Transform' not in value2.get() and 'MDC Curves' not in value.get():
            x2, y2 = event.xdata, event.ydata
            px2, py2 = event.x, event.y
            out.get_tk_widget().create_rectangle((px1, int(figy*100)-py1), (px2, int(figy*100)-py2),
                                                 outline='black', width=2, tag='rec')
        if value.get() == 'Raw Data':
            if event.inaxes:
                cxdata = event.xdata
                cydata = event.ydata
                xf = (cxdata >= ao.get_xlim()[0] and cxdata <= ao.get_xlim()[1])
                if emf=='KE':
                    yf = (cydata >= ao.get_ylim()[0] and cydata <= ao.get_ylim()[1])
                else:
                    yf = (cydata <= ao.get_ylim()[0] and cydata >= ao.get_ylim()[1])
                if xf and yf:
                    if emf=='KE':
                        dx = data.sel(
                            eV=cydata, method='nearest').to_numpy().reshape(len(phi))
                    else:
                        dx = data.sel(
                            eV=vfe-cydata, method='nearest').to_numpy().reshape(len(phi))
                    dy = data.sel(
                        phi=cxdata, method='nearest').to_numpy().reshape(len(ev))
                    # try:
                    #     x.remove()
                    #     y.remove()
                    # except:
                    #     pass
                    # x=a.axvline(cxdata,color='r')
                    # y=a.axhline(cydata,color='r')
                    rcx.clear()
                    rcy.clear()
                    rcx.set_title('            Raw Data', font='Arial', fontsize=size(16))
                    rcx.plot(phi, dx, c='black')
                    if emf=='KE':
                        rcy.plot(dy, ev, c='black')
                    else:
                        rcy.plot(dy, vfe-ev, c='black')
                    rcx.set_xticks([])
                    rcy.set_yticks([])
                    rcx.set_xlim(ao.get_xlim())
                    rcy.set_ylim(ao.get_ylim())
                    out.draw()
        xdata.config(text='xdata:'+str(' %.3f' % event.xdata))
        ydata.config(text='ydata:'+str(' %.3f' % event.ydata))
    else:
        if value.get() == 'Raw Data':
            rcx.clear()
            rcy.clear()
            rcx.set_xticks([])
            rcx.set_yticks([])
            rcy.set_xticks([])
            rcy.set_yticks([])
            rcx.set_title('            Raw Data', font='Arial', fontsize=size(16))
            out.draw()
        out.get_tk_widget().config(cursor="")
        xdata.config(text='xdata:')
        ydata.config(text='ydata:')

    # print("event.xdata", event.xdata)
    # print("event.ydata", event.ydata)
    # print("event.inaxes", event.inaxes)
    # print("x", event.x)
    # print("y", event.y)
mof = 1


def press(event):
    # event.button 1:left 3:right 2:mid
    # event.dblclick : bool
    # print('%s click: button=%d, x=%d, y=%d, xdata=%f, ydata=%f' %
    #       ('double' if event.dblclick else 'single', event.button,
    #        event.x, event.y, event.xdata, event.ydata))
    global x1, y1, mof, px1, py1, ao, bo, out, tb0, tb0_, tb1, tb1_, tb2
    if event.button == 1:
        x1, y1 = event.xdata, event.ydata
        if value1.get() == '---Plot2---' and value2.get() != 'Real & Imaginary' and 'KK Transform' not in value2.get() and 'MDC Curves' not in value.get():
            px1, py1 = event.x, event.y
            mof = -1
    elif event.button == 3 and value1.get() == '---Plot2---' and value2.get() != 'Real & Imaginary' and 'KK Transform' not in value2.get() and 'MDC Curves' not in value.get():
        if value2.get() == '---Plot3---':
            if ao:
                ao.set_xlim(xl)
                ao.set_ylim(yl)
                out.draw()
        else:
            bo.set_xlim(xl)
            bo.set_ylim(yl)
            try:
                if mp == 1:
                    tb0.remove()
                    if emf=='KE':
                        tb0 = bo.scatter(pos, fev, marker='.', s=scale*scale*0.3, c='black')
                    else:
                        tb0 = bo.scatter(pos, vfe-fev, marker='.', s=scale*scale*0.3, c='black')
                        
                if mf == 1:
                    tb0_.remove()
                    ophimin = np.arcsin(
                        (rpos-fwhm/2)/(2*m*fev*1.602176634*10**-19)**0.5/10**-10*(h/2/np.pi))*180/np.pi
                    ophimax = np.arcsin(
                        (rpos+fwhm/2)/(2*m*fev*1.602176634*10**-19)**0.5/10**-10*(h/2/np.pi))*180/np.pi
                    posmin = (2*m*fev*1.602176634*10**-19)**0.5*np.sin(
                        (np.float64(k_offset.get())+ophimin)/180*np.pi)*10**-10/(h/2/np.pi)
                    posmax = (2*m*fev*1.602176634*10**-19)**0.5*np.sin(
                        (np.float64(k_offset.get())+ophimax)/180*np.pi)*10**-10/(h/2/np.pi)
                    if emf=='KE':
                        tb0_ = bo.scatter([posmin, posmax], [
                                        fev, fev], marker='|', c='grey', s=scale*scale*10, alpha=0.8)
                    else:
                        tb0_ = bo.scatter([posmin, posmax], [vfe-fev, vfe-fev], marker='|', c='grey', s=scale*scale*10, alpha=0.8)
            except:
                pass
            try:
                if ep == 1:
                    tb1.remove()
                    if emf=='KE':
                        tb1 = bo.scatter(fk, epos, marker='.', s=scale*scale*0.3, c='black')
                    else:
                        tb1 = bo.scatter(fk, vfe-epos, marker='.', s=scale*scale*0.3, c='black')
                        
                if ef == 1:
                    tb1_.remove()
                    eposmin = epos-efwhm/2
                    eposmax = epos+efwhm/2
                    if emf=='KE':
                        tb1_ = bo.scatter(
                            [fk, fk], [eposmin, eposmax], marker='_', c='grey', s=scale*scale*10, alpha=0.8)
                    else:
                        tb1_ = bo.scatter(
                            [fk, fk], [vfe-eposmin, vfe-eposmax], marker='_', c='grey', s=scale*scale*10, alpha=0.8)
            except:
                pass
            try:
                if value2.get() == 'Data Plot with Pos and Bare Band':
                    tb2.remove()
                    if emf=='KE':
                        tb2, = bo.plot(k*np.float64(bbk_offset.get()), (be -
                                    np.float64(bb_offset.get()))/1000+vfe, linewidth=scale*0.3, c='red', linestyle='--')
                    else:
                        print('plotting bb0')
                        tb2, = bo.plot(k*np.float64(bbk_offset.get()), (-be +
                                    np.float64(bb_offset.get()))/1000, linewidth=scale*0.3, c='red', linestyle='--')
                        print('plotted bb0')
            except:
                pass
            out.draw()
        mof = 1


def release(event):
    global x2, y2, mof, tb0, tb0_, tb1, tb1_, tb2, out, ao, bo
    try:
        out.get_tk_widget().delete('rec')
    except:
        pass
    if event.button == 1 and mof == -1 and value1.get() == '---Plot2---' and value2.get() != 'Real & Imaginary' and 'KK Transform' not in value2.get() and 'MDC Curves' not in value.get():
        x2, y2 = event.xdata, event.ydata
        if value2.get() == '---Plot3---':
            if ao:
                ao.set_xlim(sorted([x1, x2]))
                if emf=='KE':    
                    ao.set_ylim(sorted([y1, y2]))
                else:
                    ao.set_ylim(sorted([y1, y2], reverse=True))
                out.draw()
        else:
            bo.set_xlim(sorted([x1, x2]))
            if emf=='KE':    
                bo.set_ylim(sorted([y1, y2]))
            else:
                bo.set_ylim(sorted([y1, y2], reverse=True))
            if abs(x1-x2) < (xl[1]-xl[0])/3*2 or abs(y1-y2) < (yl[1]-yl[0])/3*2:
                try:
                    if mp == 1:
                        tb0.remove()
                    if mf == 1:
                        tb0_.remove()
                except:
                    pass
                try:
                    if ep == 1:
                        tb1.remove()
                    if ef == 1:
                        tb1_.remove()
                except:
                    pass
                try:
                    tb2.remove()
                except:
                    pass
                if value2.get() == 'Data Plot with Pos' or value2.get() == 'Data Plot with Pos and Bare Band':
                    try:
                        if mp == 1:
                            if emf=='KE':
                                tb0 = bo.scatter(
                                    pos, fev, marker='.', s=scale*scale*30, c='black')
                            else:
                                tb0 = bo.scatter(
                                    pos, vfe-fev, marker='.', s=scale*scale*30, c='black')
                        if mf == 1:
                            ophimin = np.arcsin(
                                (rpos-fwhm/2)/(2*m*fev*1.602176634*10**-19)**0.5/10**-10*(h/2/np.pi))*180/np.pi
                            ophimax = np.arcsin(
                                (rpos+fwhm/2)/(2*m*fev*1.602176634*10**-19)**0.5/10**-10*(h/2/np.pi))*180/np.pi
                            posmin = (2*m*fev*1.602176634*10**-19)**0.5*np.sin(
                                (np.float64(k_offset.get())+ophimin)/180*np.pi)*10**-10/(h/2/np.pi)
                            posmax = (2*m*fev*1.602176634*10**-19)**0.5*np.sin(
                                (np.float64(k_offset.get())+ophimax)/180*np.pi)*10**-10/(h/2/np.pi)
                            if emf=='KE':
                                tb0_ = bo.scatter([posmin, posmax], [
                                                fev, fev], marker='|', c='grey', s=scale*scale*50, alpha=0.8)
                            else:
                                tb0_ = bo.scatter([posmin, posmax], [vfe-fev, vfe-fev], marker='|', c='grey', s=scale*scale*50, alpha=0.8)

                    except:
                        pass
                    try:
                        if ep == 1:
                            if emf=='KE':
                                tb1 = bo.scatter(
                                    fk, epos, marker='.', s=scale*scale*30, c='black')
                            else:
                                tb1 = bo.scatter(
                                    fk, vfe-epos, marker='.', s=scale*scale*30, c='black')
                        if ef == 1:
                            eposmin = epos-efwhm/2
                            eposmax = epos+efwhm/2
                            if emf=='KE':
                                tb1_ = bo.scatter(
                                    [fk, fk], [eposmin, eposmax], marker='_', c='grey', s=scale*scale*50, alpha=0.8)
                            else:
                                tb1_ = bo.scatter(
                                [fk, fk], [vfe-eposmin, vfe-eposmax], marker='_', c='grey', s=scale*scale*50, alpha=0.8)
                    except:
                        pass
                    if value2.get() == 'Data Plot with Pos and Bare Band':
                        if emf=='KE':
                            tb2, = bo.plot(k*np.float64(bbk_offset.get()), (be -
                                        np.float64(bb_offset.get()))/1000+vfe, linewidth=scale*5, c='red', linestyle='--')
                        else:
                            tb2, = bo.plot(k*np.float64(bbk_offset.get()), (-be +
                                        np.float64(bb_offset.get()))/1000, linewidth=scale*5, c='red', linestyle='--')
            else:
                try:
                    if mp == 1:
                        tb0.remove()
                        if emf=='KE':
                            tb0 = bo.scatter(pos, fev, marker='.',
                                            s=0.3, c='black')
                        else:
                            tb0 = bo.scatter(pos, vfe-fev, marker='.',
                                            s=0.3, c='black')
                    if mf == 1:
                        tb0_.remove()
                        ophimin = np.arcsin(
                            (rpos-fwhm/2)/(2*m*fev*1.602176634*10**-19)**0.5/10**-10*(h/2/np.pi))*180/np.pi
                        ophimax = np.arcsin(
                            (rpos+fwhm/2)/(2*m*fev*1.602176634*10**-19)**0.5/10**-10*(h/2/np.pi))*180/np.pi
                        posmin = (2*m*fev*1.602176634*10**-19)**0.5*np.sin(
                            (np.float64(k_offset.get())+ophimin)/180*np.pi)*10**-10/(h/2/np.pi)
                        posmax = (2*m*fev*1.602176634*10**-19)**0.5*np.sin(
                            (np.float64(k_offset.get())+ophimax)/180*np.pi)*10**-10/(h/2/np.pi)
                        if emf=='KE':
                            tb0_ = bo.scatter([posmin, posmax], [
                                            fev, fev], marker='|', c='grey', s=scale*scale*10, alpha=0.8)
                        else:
                            tb0_ = bo.scatter([posmin, posmax], [vfe-fev, vfe-fev], marker='|', c='grey', s=scale*scale*10, alpha=0.8)
                except:
                    pass
                try:
                    if ep == 1:
                        tb1.remove()
                        if emf=='KE':
                            tb1 = bo.scatter(fk, epos, marker='.',
                                            s=0.3, c='black')
                        else:
                            tb1 = bo.scatter(fk, vfe-epos, marker='.',
                                        s=0.3, c='black')
                    if ef == 1:
                        tb1_.remove()
                        eposmin = epos-efwhm/2
                        eposmax = epos+efwhm/2
                        if emf=='KE':
                            tb1_ = bo.scatter(
                                [fk, fk], [eposmin, eposmax], marker='_', c='grey', s=scale*scale*10, alpha=0.8)
                        else:
                            tb1_ = bo.scatter(
                                [fk, fk], [vfe-eposmin, vfe-eposmax], marker='_', c='grey', s=scale*scale*10, alpha=0.8)
                except:
                    pass
                try:
                    if value2.get() == 'Data Plot with Pos and Bare Band':
                        tb2.remove()
                        if emf=='KE':
                            tb2, = bo.plot(k*np.float64(bbk_offset.get()), (be+np.float64(
                                bb_offset.get()))/1000+vfe, linewidth=scale*0.3, c='red', linestyle='--')
                        else:
                            tb2, = bo.plot(k*np.float64(bbk_offset.get()), (be+np.float64(
                                bb_offset.get()))/1000, linewidth=scale*0.3, c='red', linestyle='--')
                except:
                    pass
            out.draw()
        mof = 1


def angcut(*e):
    t0 = threading.Thread(target=o_angcut)
    t0.daemon = True
    t0.start()


def ecut(*e):
    t1 = threading.Thread(target=o_ecut)
    t1.daemon = True
    t1.start()


def loadmfit(*e):
    t2 = threading.Thread(target=o_loadmfit)
    t2.daemon = True
    t2.start()


def loadefit(*e):
    t3 = threading.Thread(target=o_loadefit)
    t3.daemon = True
    t3.start()


def reload(*e):
    t4 = threading.Thread(target=o_reload)
    t4.daemon = True
    t4.start()


def expte():
    t5 = threading.Thread(target=o_expte)
    t5.daemon = True
    t5.start()


def exptm():
    t6 = threading.Thread(target=o_exptm)
    t6.daemon = True
    t6.start()


def bareband(*e):
    t7 = threading.Thread(target=o_bareband)
    t7.daemon = True
    t7.start()


def plot(event):
    if value.get() == '---Plot1---' and value1.get() == '---Plot2---' and value2.get() == '---Plot3---':
        trans_plot()
    else:
        plot1()
        plot2()
        plot3()
    
im_kernel = 17
d,l,p = 8,20,3
def plot1(*e):
    global gg
    if 'gg' in globals():
        gg.destroy()
    if 'MDC Curves' in value.get():
        def select_all(event):
            event.widget.select_range(0, tk.END)
            return 'break'
        
        def ini():
            v_d.set(str(d))
            v_l.set(str(l))
            v_p.set(str(p))
            cl.focus()
        def chf():
            global d, l, p
            try:
                d = int(v_d.get())
                l = int(v_l.get())
                p = int(v_p.get())
                if p < l:
                    t8 = threading.Thread(target=o_plot1)
                    t8.daemon = True
                    t8.start()
                    gg.destroy()
                else:
                    tk.messagebox.showwarning("Warning","Invalid Input\n"+"Polyorder must be less than window_length")
                    gg.destroy()
                    plot1(*e)
            except:
                gg.destroy()
                plot1(*e)

        def on_enter(event):
            chf()
            
        gg = RestrictedToplevel(g, bg="white", padx=10, pady=10)
        gg.title('Plotting Parameter')
        gg.iconphoto(False, tk.PhotoImage(data=b64decode(gicon)))

        fd = tk.Frame(gg, bg="white")
        fd.grid(row=0, column=0, padx=10, pady=5)
        ld = tk.Label(fd, text='Energy Axis Density (1/n), n :', font=(
            "Arial", size(18), "bold"), bg="white", height='1')
        ld.grid(row=0, column=0, padx=10, pady=10)
        v_d = tk.StringVar()
        cd = tk.Entry(fd, font=(
            "Arial", size(16), "bold"), textvariable=v_d, width=10, bg="white")
        cd.grid(row=0, column=1, padx=10, pady=5)

        fl = tk.Frame(gg, bg="white")
        fl.grid(row=1, column=0, padx=10, pady=5)
        ll = tk.Label(fl, text='Savgol Filter Window Length :', font=(
            "Arial", size(18), "bold"), bg="white", height='1')
        ll.grid(row=0, column=0, padx=10, pady=10)
        v_l = tk.StringVar()
        cl = tk.Entry(fl, font=(
            "Arial", size(16), "bold"), textvariable=v_l, width=10, bg="white")
        cl.grid(row=0, column=1, padx=10, pady=5)
        
        fp = tk.Frame(gg, bg="white")
        fp.grid(row=2, column=0, padx=10, pady=5)
        lp = tk.Label(fp, text='Savgol Filter Polynomial Degree :', font=(
            "Arial", size(18), "bold"), bg="white", height='1')
        lp.grid(row=0, column=0, padx=10, pady=10)
        v_p = tk.StringVar()
        cp = tk.Entry(fp, font=(
            "Arial", size(16), "bold"), textvariable=v_p, width=10, bg="white")
        cp.grid(row=0, column=1, padx=10, pady=5)

        l_smooth = tk.Label(gg, text='Note:\n\tPolynomial Degree 0 or 1: Moving Average\n\tPolyorder must be less than window_length', font=(
            "Arial", size(14), "bold"), bg="white", height='3',justify='left')
        l_smooth.grid(row=3, column=0, padx=10, pady=10)

        bflag = tk.Button(gg, text="OK", font=("Arial", size(16), "bold"),
                          height=2, width=10, bg="white", command=chf)
        bflag.grid(row=4, column=0, padx=10, pady=5)
        cd.bind('<FocusIn>', select_all)
        cl.bind('<FocusIn>', select_all)
        cp.bind('<FocusIn>', select_all)
        set_center(g, gg, 0, 0)
        gg.bind('<Return>', on_enter)
        gg.focus_set()
        gg.limit_bind()
        ini()
    elif value.get() == 'Second Derivative':
        def select_all(event):
            event.widget.select_range(0, tk.END)
            return 'break'
        
        def ini():
            v_k.set(str(im_kernel))
            ck.focus()
        def chf():
            global im_kernel
            try:
                if int(v_k.get())%2==1:
                    im_kernel = int(v_k.get())
                    t8 = threading.Thread(target=o_plot1)
                    t8.daemon = True
                    t8.start()
                    gg.destroy()
                else:
                    tk.messagebox.showwarning("Warning","Invalid Input\n"+"Kernel size must be an odd number")
                    gg.destroy()
                    plot1(*e)
            except:
                gg.destroy()
                plot1(*e)

        def on_enter(event):
            chf()
            
        gg = RestrictedToplevel(g, bg="white", padx=10, pady=10)
        gg.title('Gaussian Smoothing Kernel Size')
        gg.iconphoto(False, tk.PhotoImage(data=b64decode(gicon)))

        fd = tk.Frame(gg, bg="white")
        fd.grid(row=0, column=0, padx=10, pady=5)
        ld = tk.Label(fd, text='Kernel Size :', font=(
            "Arial", size(18), "bold"), bg="white", height='1')
        ld.grid(row=0, column=0, padx=10, pady=10)
        v_k = tk.StringVar()
        ck = tk.Entry(fd, font=(
            "Arial", size(16), "bold"), textvariable=v_k, width=10, bg="white")
        ck.grid(row=0, column=1, padx=10, pady=5)
        
        l_smooth = tk.Label(gg, text='Note:\n\tKernel size must be an odd number', font=(
            "Arial", size(14), "bold"), bg="white", height='3',justify='left')
        l_smooth.grid(row=3, column=0, padx=10, pady=10)
        
        bflag = tk.Button(gg, text="OK", font=("Arial", size(16), "bold"),
                          height=2, width=10, bg="white", command=chf)
        bflag.grid(row=4, column=0, padx=10, pady=5)
        
        ck.bind('<FocusIn>', select_all)
        
        set_center(g, gg, 0, 0)
        gg.bind('<Return>', on_enter)
        gg.focus_set()
        gg.limit_bind()
        ini()
    else:
        t8 = threading.Thread(target=o_plot1)
        t8.daemon = True
        t8.start()


def plot2(*e):
    t9 = threading.Thread(target=o_plot2)
    t9.daemon = True
    t9.start()


def plot3(*e):
    global gg
    if 'gg' in globals():
        gg.destroy()
    if value2.get() == 'Data Plot with Pos' or value2.get() == 'Data Plot with Pos and Bare Band':
        def ini():
            global mp, ep, mf, ef
            if len(fev) <= 0:
                mp = 0
                mpos.deselect()
                mpos.config(state='disabled')
                mf = 0
                mfwhm.deselect()
                mfwhm.config(state='disabled')
            if len(fk) <= 0:
                ep = 0
                epos.deselect()
                epos.config(state='disabled')
                ef = 0
                efwhm.deselect()
                efwhm.config(state='disabled')

        def chf():
            global mp, ep, mf, ef
            mp = v_mpos.get()
            ep = v_epos.get()
            mf = v_mfwhm.get()
            ef = v_efwhm.get()
            t10 = threading.Thread(target=o_plot3)
            t10.daemon = True
            t10.start()
            gg.destroy()

        def on_enter(event):
            chf()
            
        gg = RestrictedToplevel(g, bg="white", padx=10, pady=10)
        gg.title('Data Point List')
        gg.iconphoto(False, tk.PhotoImage(data=b64decode(gicon)))
        lpos = tk.Label(gg, text='Position', font=(
            "Arial", size(18), "bold"), bg="white", height='1')
        lpos.grid(row=0, column=0, padx=10, pady=10)

        pos = tk.Frame(gg, bg="white")
        pos.grid(row=1, column=0, padx=10, pady=5)
        v_mpos = tk.IntVar()
        mpos = tk.Checkbutton(pos, text="MDC", font=(
            "Arial", size(16), "bold"), variable=v_mpos, onvalue=1, offvalue=0, height=2, width=10, bg="white")
        mpos.grid(row=0, column=0, padx=10, pady=5)
        mpos.intvar = v_mpos
        mpos.select()

        v_epos = tk.IntVar()
        epos = tk.Checkbutton(pos, text="EDC", font=(
            "Arial", size(16), "bold"), variable=v_epos, onvalue=1, offvalue=0, height=2, width=10, bg="white")
        epos.grid(row=0, column=1, padx=10, pady=5)
        epos.intvar = v_epos
        epos.select()

        lfwhm = tk.Label(gg, text='FWHM', font=(
            "Arial", size(18), "bold"), bg="white", height='1')
        lfwhm.grid(row=2, column=0, padx=10, pady=10)

        fwhm = tk.Frame(gg, bg="white")
        fwhm.grid(row=3, column=0, padx=10, pady=5)
        v_mfwhm = tk.IntVar()
        mfwhm = tk.Checkbutton(fwhm, text="MDC", font=(
            "Arial", size(16), "bold"), variable=v_mfwhm, onvalue=1, offvalue=0, height=2, width=10, bg="white")
        mfwhm.grid(row=0, column=0, padx=10, pady=5)
        mfwhm.intvar = v_mfwhm
        mfwhm.select()

        v_efwhm = tk.IntVar()
        efwhm = tk.Checkbutton(fwhm, text="EDC", font=(
            "Arial", size(16), "bold"), variable=v_efwhm, onvalue=1, offvalue=0, height=2, width=10, bg="white")
        efwhm.grid(row=0, column=1, padx=10, pady=5)
        efwhm.intvar = v_efwhm
        efwhm.select()

        bflag = tk.Button(gg, text="OK", font=("Arial", size(16), "bold"),
                          height=2, width=10, bg="white", command=chf)
        bflag.grid(row=4, column=0, padx=10, pady=5)
        set_center(g, gg, 0, 0)
        gg.bind('<Return>', on_enter)
        gg.focus_set()
        gg.limit_bind()
        ini()
    else:
        t10 = threading.Thread(target=o_plot3)
        t10.daemon = True
        t10.start()


def load(*e):
    t11 = threading.Thread(target=o_load)
    t11.daemon = True
    t11.start()


def fitgl():
    t12 = threading.Thread(target=o_fitgl)
    t12.daemon = True
    t12.start()


def tstate():
    try:
        while True:
            state.config(text=str(st.get()))
    except:
        pass

def lm2p():
    t = threading.Thread(target=loadmfit_2p)
    t.daemon = True
    t.start()


def lmre():
    t = threading.Thread(target=loadmfit_re)
    t.daemon = True
    t.start()


def lm():
    t = threading.Thread(target=loadmfit_)
    t.daemon = True
    t.start()


def o_loadmfit():
    global g, st, lmgg
    if 'lmgg' in globals():
        lmgg.destroy()
    lmgg = RestrictedToplevel(g)
    lmgg.title('Load MDC fitted File')
    lmgg.geometry('400x200')  # format:'1400x800'
    b1 = tk.Button(lmgg, command=lm2p, text='vms 1 peak to 2 peaks', font=(
        "Arial", size(12), "bold"), fg='red', width=30, height='1', bd=10)
    b1.pack()
    b2 = tk.Button(lmgg, command=lmre, text='reverse vms axis', font=(
        "Arial", size(12), "bold"), fg='red', width=30, height='1', bd=10)
    b2.pack()
    b3 = tk.Button(lmgg, command=lm, text='load MDC fitted File', font=(
        "Arial", size(12), "bold"), fg='red', width=30, height='1', bd=10)
    b3.pack()
    lmgg.update()
    w=lmgg.winfo_reqwidth()
    h=lmgg.winfo_reqheight()
    lmgg.geometry(f'{w}x{h}')
    set_center(g, lmgg, 0, 0)
    lmgg.focus_set()
    lmgg.limit_bind()

def dl_sw():
    global dl, b_sw
    s=['dot','line','dot-line']
    dl=(dl+1)%3
    b_sw.config(text=s[dl])
    t = threading.Thread(target=o_plot3)
    t.daemon = True
    t.start()

def plot1_set(opt):
    global value, value1, value2
    value.set(opt)
    value1.set('---Plot2---')
    value2.set('---Plot3---')
    
def plot2_set(opt):
    global value, value1, value2
    value.set('---Plot1---')
    value1.set(opt)
    value2.set('---Plot3---')
    
def plot3_set(opt):
    global value, value1, value2
    value.set('---Plot1---')
    value1.set('---Plot2---')
    value2.set(opt)
    
def size(s:int)-> int:
    return int(s * scale)

if __name__ == '__main__':
    os.chdir(cdir)
    if os.path.exists('open_check_MDC_cut.txt')==0:
        with open('open_check_MDC_cut.txt', 'w', encoding = 'utf-8') as f:
            f.write('1')
            f.close()
        if os.name == 'nt':
            os.system(rf'start "" cmd /C "chcp 65001 > nul && python -W ignore::SyntaxWarning -W ignore::UserWarning "{app_name}.py""')
        elif os.name == 'posix':
            try:
                os.system(rf'start "" cmd /C "chcp 65001 > nul && python3 -W ignore::SyntaxWarning -W ignore::UserWarning "{app_name}.py""')
            except:
                os.system(rf'start "" cmd /C "chcp 65001 > nul && python -W ignore::SyntaxWarning -W ignore::UserWarning "{app_name}.py""')
        quit()
    else:
        os.remove('open_check_MDC_cut.txt')
        
    hwnd = find_window()
    ScaleFactor = windll.shcore.GetScaleFactorForDevice(0)
    osf = windll.shcore.GetScaleFactorForDevice(0)
    # print('ScaleFactor:',ScaleFactor)
    t_sc_w, t_sc_h = windll.user32.GetSystemMetrics(0), windll.user32.GetSystemMetrics(1)   # Screen width and height
    t_sc_h-=int(40*ScaleFactor/100)
    if bar_pos == 'top':    #taskbar on top
        sc_y = int(40*ScaleFactor/100)
    else:
        sc_y = 0
    # w 1920 1374 (96 dpi)
    # h 1080 748 (96 dpi)
    g = tk.Tk()
    # g = ttk.Window(themename='darkly')
    odpi=g.winfo_fpixels('1i')
    # print('odpi:',odpi)
    # prfactor = 1 if ScaleFactor <= 150 else 1.03
    # prfactor = 1.03 if ScaleFactor <= 100 else 0.9 if ScaleFactor <= 125 else 0.8 if ScaleFactor <= 150 else 0.5
    prfactor = 1
    ScaleFactor /= prfactor*(ScaleFactor/100*1880/96*odpi/t_sc_w) if 1880/t_sc_w >= (950)/t_sc_h else prfactor*(ScaleFactor/100*(950)/96*odpi/t_sc_h)
    g.tk.call('tk', 'scaling', ScaleFactor/100)
    dpi=g.winfo_fpixels('1i')
    # print('dpi:',dpi)
    windll.shcore.SetProcessDpiAwareness(1)
    scale = odpi / dpi
    base_font_size = 16
    scaled_font_size = int(base_font_size * scale)

    plt.rcParams['font.family'] = 'Arial'
    plt.rcParams['font.size'] = int(plt.rcParams['font.size'] * scale)
    plt.rcParams['lines.linewidth'] = plt.rcParams['lines.linewidth'] * scale
    plt.rcParams['lines.markersize'] = plt.rcParams['lines.markersize'] * scale
    plt.rcParams['figure.figsize'] = (plt.rcParams['figure.figsize'][0] * scale, plt.rcParams['figure.figsize'][1] * scale)
    # plt.rcParams['figure.facecolor'] = '#222222'
    # plt.rcParams['axes.facecolor'] = '#333'
    # plt.rcParams['axes.titlecolor'] = 'white'
    # plt.rcParams['axes.edgecolor'] = 'white'
    # plt.rcParams['axes.labelcolor'] = 'white'
    # plt.rcParams['axes.titlecolor'] = 'white'
    # plt.rcParams['xtick.color'] = 'white'
    # plt.rcParams['ytick.color'] = 'white'
    # plt.rcParams['lines.color'] = 'white'
    # plt.rcParams['lines.markeredgecolor'] = 'white'
    # plt.rcParams['lines.markerfacecolor'] = 'white'
    # plt.rcParams['scatter.edgecolors'] = 'white'
    # print('scale:', scale)
        
    # 設定預設字體
    default_font = ('Arial', scaled_font_size)
    g.option_add('*Font', default_font)
    icon_manager = MenuIconManager()
    
    g.geometry(f'1900x1080+0+{sc_y}')
    g.title('MDC cut')
    g.config(bg='white')
    # g.geometry('1920x980')  # format:'1400x800'
    g.resizable(True, True)
    
    menubar = tk.Menu(g, tearoff=0, bg="white")

    # 建立「檔案」選單
    filemenu = tk.Menu(menubar, tearoff=0, bg="white")
    
    filemenu1 = tk.Menu(filemenu, tearoff=0, bg="white")
    filemenu1.add_command(label="MDC Fitted File", command=loadmfit, image=icon_manager.get_mini_icon('mdc_fitted_file'), compound='left', accelerator="F1")
    filemenu1.add_command(label="EDC Fitted File", image=icon_manager.get_mini_icon('edc_fitted_file'), command=loadefit, compound='left', accelerator="F2")
    
    filemenu2 = tk.Menu(filemenu, tearoff=0, bg="white")
    filemenu2.add_command(label="Export Graph", command=exp, image=icon_manager.get_mini_icon('exp_graph'), compound='left', accelerator="F10")
    filemenu2.add_command(label="Export to Origin", command=gui_exp_origin, image=icon_manager.get_mini_icon('exp_origin'), compound='left', accelerator="F11")
    filemenu2.add_command(label="Export MDC Fitted Data (k offset)", command=exptm)
    filemenu2.add_command(label="Export EDC Fitted Data (k offset)", command=expte)
    
    
    menubar.add_cascade(label="File", menu=filemenu)
    filemenu.add_command(label="Load Raw Data", image=icon_manager.get_mini_icon('raw_data'), command=load, accelerator="Ctrl+O", compound='left')
    filemenu.add_cascade(label="Load fitted File", menu=filemenu1)
    filemenu.add_command(label="Load Bare Band File", image=icon_manager.get_mini_icon('bare_band'), command=bareband, compound='left', accelerator="F3")
    filemenu.add_separator()
    filemenu.add_cascade(label="Export Data", menu=filemenu2)
    filemenu.add_command(label="Exit", command=g.quit)
    
    # filemenu.entryconfig("Load Raw Data", state='disabled')
    
    # 建立「編輯」選單
    plotmenu = tk.Menu(menubar, tearoff=0, bg="white")
    
    optionList = ['Raw Data', 'E-k Diagram', 'MDC Normalized', 'First Derivative', 'Second Derivative', 'MDC Curves', 'E-k with MDC Curves']
    pltmenu1 = tk.Menu(plotmenu, tearoff=0, bg="white")
    for opt in optionList:
        pltmenu1.add_command(label=opt, command=lambda opt=opt: plot1_set(opt))

    optionList1 = ['MDC fitted Data', 'EDC fitted Data', 'Real Part', 'Imaginary Part']
    pltmenu2 = tk.Menu(plotmenu, tearoff=0, bg="white")
    for opt in optionList1:
        pltmenu2.add_command(label=opt, command=lambda opt=opt: plot2_set(opt))
    
    optionList2 = ['Real & Imaginary', 'KK Transform Real & Imaginary', 'KK Transform Real Part', 'KK Transform Imaginary Part', 'KK Transform Real Part 2nd Derivative', 'KK Transform Imaginary Part 1st Derivative', 'Data Plot with Pos', 'Data Plot with Pos and Bare Band']
    pltmenu3 = tk.Menu(plotmenu, tearoff=0, bg="white")
    for opt in optionList2:
        pltmenu3.add_command(label=opt, command=lambda opt=opt: plot3_set(opt))

    menubar.add_cascade(label="Plot", menu=plotmenu)
    plotmenu.add_cascade(label="Raw", menu=pltmenu1)
    plotmenu.add_cascade(label="Fit", menu=pltmenu2)
    plotmenu.add_cascade(label="Transform", menu=pltmenu3)
    plotmenu.add_separator()
    plotmenu.add_command(label="Clear MDC Fitted Data", command=clmfit)
    plotmenu.add_command(label="Clear EDC Fitted Data", command=clefit)
    
    toolmenu = tk.Menu(menubar, tearoff=0, bg="white")
    
    toolmenu1 = tk.Menu(toolmenu, tearoff=0, bg="white")
    toolmenu1.add_command(label="MDC Fitter", command=cmfit, image=icon_manager.get_mini_icon('mdc_fitter'), compound='left', accelerator="F5")
    toolmenu1.add_command(label="EDC Fitter", command=cefit, image=icon_manager.get_mini_icon('edc_fitter'), compound='left', accelerator="F6")
    
    toolmenu2 = tk.Menu(toolmenu, tearoff=0, bg="white")
    toolmenu2.add_command(label="MDC Cutter", command=ecut, image=icon_manager.get_mini_icon('mdc_cutter'), compound='left', accelerator="F7")    #重定義ecut 包括lower limit
    toolmenu2.add_command(label="EDC Cutter", command=angcut, image=icon_manager.get_mini_icon('edc_cutter'), compound='left', accelerator="F8")
    
    menubar.add_cascade(label="Tools", menu=toolmenu)
    toolmenu.add_command(label="Spectrogram", command=trans_plot, image=icon_manager.get_mini_icon('spectrogram'), compound='left', accelerator="F4")
    toolmenu.add_cascade(label="Fitter", menu=toolmenu1)
    toolmenu.add_cascade(label="Cutter", menu=toolmenu2)
    toolmenu.add_command(label="E-k Angle Converter", command=calculator, image=icon_manager.get_mini_icon('calculator'), compound='left', accelerator="F9")
    toolmenu.add_command(label="Volume Viewer", command=view_3d, image=icon_manager.get_mini_icon('view_3d'), compound='left', accelerator="F12")
    
    g.config(menu=menubar)
    
    
    fr_toolbar = tk.Frame(g, bg="white")
    fr_toolbar.pack(anchor=tk.W)
    b_load = Button(fr_toolbar, text="Load Raw Data", image=icon_manager.get_icon('raw_data'), command=load)
    b_load.pack(side=tk.LEFT)
    b_loadmfit = Button(fr_toolbar, text="Load MDC Fitted File", image=icon_manager.get_icon('mdc_fitted_file'), command=loadmfit)
    b_loadmfit.pack(side=tk.LEFT)
    b_loadefit = Button(fr_toolbar, text="Load EDC Fitted File", image=icon_manager.get_icon('edc_fitted_file'), command=loadefit)
    b_loadefit.pack(side=tk.LEFT)
    b_loadbb = Button(fr_toolbar, text="Load Bare Band File", image=icon_manager.get_icon('bare_band'), command=bareband)
    b_loadbb.pack(side=tk.LEFT)
    
    b_spec = Button(fr_toolbar, text="Spectrogram", image=icon_manager.get_icon('spectrogram'), command=trans_plot)
    b_spec.pack(side=tk.LEFT)
    b_mfit = Button(fr_toolbar, text="MDC Fitter", image=icon_manager.get_icon('mdc_fitter'), command=cmfit)
    b_mfit.pack(side=tk.LEFT)
    b_efit = Button(fr_toolbar, text="EDC Fitter", image=icon_manager.get_icon('edc_fitter'), command=cefit)
    b_efit.pack(side=tk.LEFT)
    b_mcut = Button(fr_toolbar, text="MDC Cutter", image=icon_manager.get_icon('mdc_cutter'), command=ecut)
    b_mcut.pack(side=tk.LEFT)
    b_ecut = Button(fr_toolbar, text="EDC Cutter", image=icon_manager.get_icon('edc_cutter'), command=angcut)
    b_ecut.pack(side=tk.LEFT)
    b_kcal = Button(fr_toolbar, text="E-k Angle Converter", image=icon_manager.get_icon('calculator'), command=calculator)
    b_kcal.pack(side=tk.LEFT)
    
    b_exp_graph = Button(fr_toolbar, text="Export Graph", image=icon_manager.get_icon('exp_graph'), command=exp)
    b_exp_graph.pack(side=tk.LEFT)
    b_exp_origin = Button(fr_toolbar, text="Export to Origin", image=icon_manager.get_icon('exp_origin'), command=gui_exp_origin)
    b_exp_origin.pack(side=tk.LEFT)
    
    b_view_3d = Button(fr_toolbar, text="Volume Viewer", image=icon_manager.get_icon('view_3d'), command=view_3d)
    b_view_3d.pack(side=tk.LEFT)
    
    
    # 建立tooltip
    ToolTip(b_load, "Select and load your raw data files - supports H5, JSON, NPZ, and TXT formats. You can choose multiple files at once.", "Ctrl+O")
    ToolTip(b_loadmfit, "Select the MDC fitted file in VMS or NPZ formats. Note that the VMS file should only contain two peak information.", "F1")
    ToolTip(b_loadefit, "Select the EDC fitted file in VMS or NPZ formats. Note that the VMS file should only contain two peak information. This feature is not well-developed yet.", "F2")
    ToolTip(b_loadbb, "Import the bare band file in TXT format. Please check the user manual for detailed file format specifications.", "F3")
    ToolTip(b_spec, "View the current data using Spectrogram Interface.", "F4")
    ToolTip(b_mfit, "Utilize the embedded MDC Fitter Interface to perform fitting operations on or to visualize the MDC slices.", "F5")
    ToolTip(b_efit, "Utilize the embedded EDC Fitter Interface to perform fitting operations on or to visualize the EDC slices. Note that this feature is not fully implemented yet.", "F6")
    ToolTip(b_mcut, "Slice the dataset along the angular axis to extract momentum distribution curves (MDCs) and export the data series to VMS format.", "F7")
    ToolTip(b_ecut, "Perform energy-axis slicing of the dataset to extract energy distribution curves (EDCs) and export the resulting data series in VMS format.", "F8")
    ToolTip(b_kcal, "A calculator tool that converts k-values at a specified energy into corresponding angle values expressed in degrees.", "F9")
    ToolTip(b_exp_graph, "Display and save the graph with Matplotlib window.", "F10")
    ToolTip(b_exp_origin, "Select the required data and import it into OriginPro to enable advanced data processing.", "F11")
    ToolTip(b_view_3d, "Open a 3D data viewer to visualize the data cube in three dimensions. Rotation and HDF5 file export are supported.", "F12")
    
    # Define your custom colors (as RGB tuples)
    # (value,(color))
    custom_colors1 = [(0, (1, 1, 1)),
                    (0.5, (0, 0, 1)),
                    (0.85, (0, 1, 1)),
                    (1, (1, 1, 0.26))]

    # Create a custom colormap
    custom_cmap1 = LinearSegmentedColormap.from_list(
        'custom_cmap1', custom_colors1, N=256)
    mpl.colormaps.register(custom_cmap1)

    # Define your custom colors (as RGB tuples)
    # (value,(color))
    custom_colors2 = [(0, (0, 0.08, 0.16)),
                    (0.2, (0.2, 0.7, 1)),
                    (0.4, (0.28, 0.2, 0.4)),
                    (0.62, (0.9, 0.1, 0.1)),
                    (0.72, (0.7, 0.34, 0.1)),
                    (0.8, (1, 0.5, 0.1)),
                    (1, (1, 1, 0))]

    # Create a custom colormap
    custom_cmap2 = LinearSegmentedColormap.from_list(
        'custom_cmap2', custom_colors2, N=256)
    mpl.colormaps.register(custom_cmap2)

    # Define your custom colors (as RGB tuples)
    # (value,(color))
    custom_colors3 = [(0, (0.88, 0.84, 0.96)),
                    (0.5, (0.32, 0, 0.64)),
                    (0.75, (0, 0, 1)),
                    (0.85, (0, 0.65, 1)),
                    (0.9, (0.2, 1, 0.2)),
                    (0.96, (0.72, 1, 0)),
                    (1, (1, 1, 0))]

    # Create a custom colormap
    custom_cmap3 = LinearSegmentedColormap.from_list(
        'custom_cmap3', custom_colors3, N=256)
    mpl.colormaps.register(custom_cmap3)

    # Define your custom colors (as RGB tuples)
    # (value,(color))
    custom_colors4 = [(0, (1, 1, 1)),
                    (0.4, (0.3, 0, 0.3)),
                    (0.5, (0.3, 0, 0.6)),
                    (0.6, (0, 1, 1)),
                    (0.7, (0, 1, 0)),
                    (0.8, (1, 1, 0)),
                    (1, (1, 0, 0))]

    # Create a custom colormap
    custom_cmap4 = LinearSegmentedColormap.from_list(
        'custom_cmap4', custom_colors4, N=256)
    mpl.colormaps.register(custom_cmap4)

    # Define your custom colors (as RGB tuples)
    # (value,(color))
    prevac_colors = [(0, (0.2*0.82, 0.2*0.82, 0.2*0.82)),
                    (0.2, (0.4*0.82, 0.6*0.82, 0.9*0.82)),
                    (0.4, (0, 0.4*0.82, 0)),
                    (0.6, (0.5*0.82, 1*0.82, 0)),
                    (0.8,(1*0.82, 1*0.82, 0)),
                    (1, (1*0.82, 0, 0))]
    # Create a custom colormap
    prevac_cmap = LinearSegmentedColormap.from_list(
        'prevac_cmap', prevac_colors, N=256)
    mpl.colormaps.register(prevac_cmap)
    
    value3 = tk.StringVar()
    value3.set('prevac_cmap')
    value3.trace_add('write', chcmp)

    try:
        with np.load(os.path.join('.MDC_cut', 'rd.npz'), 'rb') as ff:
            path = str(ff['path'])
            name = str(ff['name'])
            lpath = ff['lpath']
            ev = ff['ev']
            phi = ff['phi']
            st = str(ff['st'])
            lst = ff['lst']
            print('\nRaw Data preloaded:\n\n')
            lfs = loadfiles(lpath)
            data = lfs.data[0]
            for _ in data.attrs.keys():
                if _ != 'Description':
                    print(_,':', data.attrs[_])
                else:
                    print(_,':', data.attrs[_].replace('\n','\n              '))
            dvalue = list(data.attrs.values())
            lensmode = dvalue[8]
            rdd = path  # old version data path
            dpath = path    # new version data path
    except:
        print('No Raw Data preloaded')

    try:
        with np.load(os.path.join('.MDC_cut', 'bb.npz'), 'rb') as f:
            bpath = str(f['path'])
            be = f['be']
            k = f['k']
            bbo = f['bbo']
            bbk = f['bbk']
            print('Bare Band file preloaded:')
            print(bpath+'\n')
    except:
        bpath = ''
        print('No Bare Band file preloaded')

    try:
        with np.load(os.path.join('.MDC_cut', 'efpath.npz'), 'rb') as f:
            efpath = str(f['efpath'])
            print('EDC Fitted path preloaded')
    except:
        print('No EDC Fitted path preloaded')

    try:
        with np.load(os.path.join('.MDC_cut', 'mfpath.npz'), 'rb') as f:
            mfpath = str(f['mfpath'])
            print('MDC Fitted path preloaded')
    except:
        print('No MDC Fitted path preloaded')

    try:
        with np.load(os.path.join('.MDC_cut', 'efit.npz'), 'rb') as f:
            ko = str(f['ko'])
            fphi = f['fphi']
            epos = f['epos']
            ffphi = f['ffphi']
            efwhm = f['efwhm']
            fk = f['fk']
            emin = f['emin']
            emax = f['emax']
            semin = f['semin']
            semax = f['semax']
            seaa1 = f['seaa1']
            seaa2 = f['seaa2']
            sefp = f['sefp']
            sefi = f['sefi']
            print('EDC Fitted Data preloaded (Casa)')
        fpr = 1
    except:
        print('No EDC fitted data preloaded (Casa)')

    try:
        with np.load(os.path.join('.MDC_cut', 'mfit.npz'), 'rb') as f:
            ko = str(f['ko'])
            fev = f['fev']
            rpos = f['rpos']
            ophi = f['ophi']
            fwhm = f['fwhm']
            pos = f['pos']
            kmin = f['kmin']
            kmax = f['kmax']
            skmin = f['skmin']
            skmax = f['skmax']
            smaa1 = f['smaa1']
            smaa2 = f['smaa2']
            smfp = f['smfp']
            smfi = f['smfi']
            try:
                smresult = f['smresult']
                smcst = f['smcst']
                print('MDC Fitted Data preloaded (lmfit)')
            except:
                print('MDC Fitted Data preloaded (Casa)')
        fpr = 1
    except:
        print('No MDC fitted data preloaded (Casa)')

    try:
        cdata = np.load(os.path.join('.MDC_cut', 'colormaps.npz'), allow_pickle=True)
        colors = list(cdata["colors"])
        scales = list(cdata["scales"])
        vmin = float(cdata["vmin"])
        vmax = float(cdata["vmax"])
        colormap_name = str(cdata["name"])
        pr_cmap = LinearSegmentedColormap.from_list(colormap_name, list(zip(scales, colors)))
        mpl.colormaps.register(pr_cmap, force=True)
        print('Last User Defined Colormap preloaded')
    except:
        pr_cmap = None
        pass

    emf='KE'
    try:
        vfe=e_photon
    except:
        vfe=21.2

    '''
    try:
        with np.load(os.path.join('.MDC_cut', 'efpara.npz'),'rb') as f:
            rdd=f['path']
            fphi=f['fphi']
            efwhm=f['efwhm']
            epos=f['epos']
            semin=f['semin']
            semax=f['semax']
            seaa1=f['seaa1']
            seaa2=f['seaa2']
            sefp=f['sefp']
            sefi=f['sefi']
            print('EDC Fitted Data preloaded')
    except:
        print('No EDC fitted data preloaded')
        
    try:
        with np.load(os.path.join('.MDC_cut', 'mfpara.npz'),'rb') as f:
            rdd=f['path']
            fev=f['fev']
            fwhm=f['fwhm']
            pos=f['pos']
            skmin=f['skmin']
            skmax=f['skmax']
            smaa1=f['smaa1']
            smaa2=f['smaa2']
            smfp=f['smfp']
            smfi=f['smfi']
            print('MDC Fitted Data preloaded')
    except:
        print('No MDC fitted data preloaded')
    '''
    v_fe = tk.StringVar()
    v_fe.set(str(vfe))
    icon = ""
    icon1 = ""
    icon2 = ""
    icon3 = ""
    icon4 = "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iigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACkpaSgCvfXH2e1kl6BRXxD+0NrT6l46u3U5j8sCvsvxhMYfDl4VPzbOK+BfHV5cXuvXTMjNyRyPevls+quNFQXc+q4ep3ruo+3+RzMZBxnrXIeL5z80ee9dZIrqu4Rtx7V5/4kmllvD+6cj6V8bhY807n3WIfumT0Sul8HwFpN/Sua2S7TmJ/yruPCNq8dikhjbr6V6GIlamclFXkdDtznJoVd7qo5p8NpJcSYVG57Yr1j4Z/CG58Q30LSxFYcbjkc15lDD1MRJRgjpr4inhouVR2sa3wD+HE+saobyWP91Gw7V9g2FrFZ20cUY2qowAKxPBPhG18KaakUCbWI+biukx7V+mZfhFg6Kgtz8xzDGPGVnNbC0lLRXpHljOn1rmvGnjKDwppsksxG7af5Vs6xqsej2T3EpAC8mvjv43/FO51vWruG3J+yE4Ra8vMMZHB0ubqerl+BljatuhwXj7xlJ4o1SaSRmKeY2BntmuTdtzDaOKRmaQ5ZDzz0oy68BDt+lfmFSbqy5p7s/U6VONKPJFWSA9aSjDf3Gow/9xqgsKKMP/cajD/3GoAKKMP/AHGow/8AcagApyNtNN2t/cb8qCGPRGqozcHzR6ClFTXK+pdRwwpc1SUuv8LCp42fP3WzX0WHzKLSVS9zwK2XyTbgycL0OKeIzMDtP1q9pOjXWpXMcaRMd3tXq3gz4FXuoyJJIhEZPNezR/f6w2PFrv2PxvU800Hwvd6y4W3jLnOOma+hfhn8B1Rbe4vgDnDFa9N8E/CfS/DcMcgizKOSGFd6sQjXCIqjtgV7VLCxjqzwa2MlP3YlTTtLg0uFYLZNkWOMVfpMbcAdKWu/0PMCiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKT1paKAK15ZxXls8Uq7kYYNecX3wT0e9upJTZRNu7kV6eaF6VjUo06vxq5tTrVKXwOx5K3wB0VlINlDz7Vi3f7MWh3Mu42UP5V7pQKxjhaMNom7xld7yPBj+y3ofP+hQn8K1LD9nfR7OBI1s4gAa9l/hoIzRLCUZLWILGV1tI810z4I6BZXCu+nwtj2rutN0Ox0kKLS1jhAGMqK0MdqQKF5Fawo06XwRsYTrVKnxybF5ooWlrfYxCiiigDF8TaGdcszCG4IxXmU37Pun3UjPNBHIx7tXsvRqBzXLWwtKu06ivY6qWKq4dWpu1zxb/hnbTP+faOj/hnbTf+faOvatoo2isP7Pw/8p0f2jif5jxX/hnbTf8An2jo/wCGdtN/59o69q2ijaKP7Pw/8of2jif5jxX/AIZ203/n2jo/4Z203/n2jr2raKNoo/s/D/yh/aOJ/mPFf+GdtN/59o6P+GdtN/59o69q2ijaKP7Pw/8AKH9o4n+Y8V/4Z203/n2jo/4Z203/AJ9o69q2ijaKP7Pw/wDKH9o4n+Y8V/4Z30zIzbR1o2vwB0SLBazhY/SvWGUYpMYprA4eLvykyx+JkrORyuk/DPw/pca7NNhEg/ixzXSWtlBZrtgiWNfYVODzTq7IxjH4VY4pTlL4ncT60tJ3pa0ICiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAP//Z"
    icon5 = ""
    icon6 = ""
    icon7 = "
    icon8 = ""
    icon9 = ""
    icon10 = ""
    icon11 = ""
    icon12 = ""
    icon13 = ""
    icon14 = ""
    icon15 = ""
    icon16 = ""
    icon17 = ""
    icon18 = ""
    icon19 = "/9j/4QAiRXhpZgAATU0AKgAAAAgAAQESAAMAAAABAAEAAAAAAAD/7QA4UGhvdG9zaG9wIDMuMAA4QklNBAQAAAAAAAA4QklNBCUAAAAAABDUHYzZjwCyBOmACZjs+EJ+/+ICKElDQ19QUk9GSUxFAAEBAAACGGFwcGwEAAAAbW50clJHQiBYWVogB+YAAQABAAAAAAAAYWNzcEFQUEwAAAAAQVBQTAAAAAAAAAAAAAAAAAAAAAAAAPbWAAEAAAAA0y1hcHBs7P2jjjiFR8NttL1PetoYLwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKZGVzYwAAAPwAAAAwY3BydAAAASwAAABQd3RwdAAAAXwAAAAUclhZWgAAAZAAAAAUZ1hZWgAAAaQAAAAUYlhZWgAAAbgAAAAUclRSQwAAAcwAAAAgY2hhZAAAAewAAAAsYlRSQwAAAcwAAAAgZ1RSQwAAAcwAAAAgbWx1YwAAAAAAAAABAAAADGVuVVMAAAAUAAAAHABEAGkAcwBwAGwAYQB5ACAAUAAzbWx1YwAAAAAAAAABAAAADGVuVVMAAAA0AAAAHABDAG8AcAB5AHIAaQBnAGgAdAAgAEEAcABwAGwAZQAgAEkAbgBjAC4ALAAgADIAMAAyADJYWVogAAAAAAAA9tUAAQAAAADTLFhZWiAAAAAAAACD3wAAPb////+7WFlaIAAAAAAAAEq/AACxNwAACrlYWVogAAAAAAAAKDgAABELAADIuXBhcmEAAAAAAAMAAAACZmYAAPKnAAANWQAAE9AAAApbc2YzMgAAAAAAAQxCAAAF3v//8yYAAAeTAAD9kP//+6L///2jAAAD3AAAwG7/wAARCAGIAYgDAREAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9sAQwABAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB/9sAQwEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB/90ABAAx/9oADAMBAAIRAxEAPwD+/igAoAKACgAoAKACgAoAKACgAoAKAEJwQPXP6fgf5j8aTV2n2v8Aj81+T+QHnnxG+JfhL4W+HrjxN4v1FNO022HJ6yS44HlRdTx74GP4utY4jFRoR1633u2tY9oyvq7/AJ3t7u+EwssRP3V036PSdvdc42uk+r+enN87/D39ub4B/EfXB4d0fxE9tqBO1I7uCa3j/wC/1zFBF9OT6c8Vw0s2oVGveu35TVrX/wCncVsvL9T0a+SYjCw0V0v8CS1W372T3l0f3bR+v7a7gvbdLm0niuIpU3QyQyCRGQ45DJxz9DjHXoF9ODhWV1td6u+l72WrjfZ63+S3l46hOEmqra17Xt1tpzJ7rZevNb3btUAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFAH//0P7+KACgAoAKACgAoAKACgAoAKACgAoAQ9D9DTi7tPzX5iez9Gfh1/wVU+J0trrHhfwFHJ/osmj3F+6L/wA/lpf+VFkdP89TnbXxnEOJlTbttp/7h/u+fSP+Z91wnhI1pXavJ67vtiP70VtFf8C3vfiZYa1qOm3H2q1u3jk37/k/x4wfw/Ac7fjo06+FkpOW22kH0t0/xf1Zn3rlh5XjKN27fanpbXpBdl1+8/XH9i79vzU/DOoaf4G+Jl9NqHh66eK0tr6WTfLpmP3cSxx/uYccQD6EgZzlfrcrzp04csnt5d3UfSkrbrq/kfFcQZBGu+egkm1o9Xt7G1+arHZqVt7XvZ7S/fPR9X03W9PtNU0m8hv9PvIfOt7q2ljlt3j46SR5H5D88V9sfnxq0AFABQAUAFABQAUAFABQAUAFABQAUAICD0/z+HagBaACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoA//9H+/igAoAKACgAoAKACgAoAKACgAoAKAGj7zfh/Ki+y7gfzN/8ABSXXzrXxn8R2rHc3h/Up9KQ9kjxDL5Q+6Bk89ceuf4vz3iZ/8KNNduf/ANMYc/T+Fv8Aco63037/ALyvqfmrXgJWVv6/N/n9x9ElfQlgmlt5Vlibaydv89Oo7Nj05NDV1b+vzX5/eDVnb+vzf5/cfst+wD+2UfDlxafDXx7qobRrp7e20q6vZObS4/1VraRZH/Laab1wcdOAa+rybNFhaqwd/wB29vL3atV/8upSd5S/n++yjH47iDJFKDq0le3W9t3QjtKquz6P5H70wTR3Fuk0DpLDKkbxTR/ckTgcDt+BHv0+b7Z2m0lfkbf9W0e676rex+fpSu4VI2tbZ3vdXv7q0tZX1d/S/LcoAKACgAoAKACgAoAKACgAoAacBfUdvfv14/z69KSTcfc+XTrrv69f1BLovz/U+bvjD+1D8K/gyPI8S69ZyalsJ/sqG4iS85zz5UpP9Oo4rzsRj6FDTEyt8pv+W+tOGu8e36y9TBZXXxjdo2XTWH96+9SOvuPo/wAubzv4K/ts/DP4w+I/+EWsfP0jVJUlmso7+SLNxHGIuBHHtwST1zxwMAEmsMFnEMS3BvXpo10m3/y7gtk/6aR04rIauHg5RVuWzteGusf+nvdrp063bPtUMCM9Mde/9F/l+X8XsWTtK2+z2v02/rv1PC6tdVvrfdX/AK3/AAtF1MAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoA/9L+/igAoAKACgAoAKACgAoAKACgAoAKAGE43n/dqJu3K/X9AP5b/wDgoRsi+PvxGVP+XrxJJK/P/TKH/J/LvX57xG75jB/4v/TFA/T+GNMHFdl/7kr+v5/efn9LLDCgknkSOM/xv0/+sf8APcV4bdlf+vyf5fcfRw+JfP8AIerI6q0bb16pt46fTH8/yxQndX/r8l+X3lVOnz/Q0tL1G50m+t7+zk8me0mjmR1/6Z/gcfmfr0KptxXLF2mutr767NJbPu/kJQ5IOnWV9utuvN9hPy6r53P6Kv8Agn5+1rF8SfD9v8N/F18h8RaPbRjTbmXEf2myj8qKKHofNmP+8D2z3r73I8yliaSwj/irbRfzVavSEY/DH+b7ndS/OOIMn5Kkq9F2ej69FRjb3qr7vaN/S6Z+qasGGR/n/P4/0X6U+THUAFABQAUAFABQAUAFAFae4htYpJppEhhiTe7udkcaDue/+HYjowB+Sn7ZP7f1n4It77wR8K7u2uNdw9veav5cVxFb/uyTHDEQW/dSw/6+FmxgADAJr5nNM6VODWGd/Oz196nbSpT03l1kfYZLkEsQ+eTv5aJLSqtLVY9F29LauX4L+L/HviXxrqd1quu6peX1xdOZnea4lkxntF5v+p9v/wBVfDzr1cZNuu9FsrRXRdYRj/Iv+B9r7yhhqOXWXLd9dZef9+f/AD86M7X4HeK9U8NfEPw3qVnfParZ6rZ3ly/77zJLe3uofNiPMWPO6/07VtgqssPXjfzt/wCATv0f83VfcRjacK2Gm3/d6v8A5+Q6L0/rU/r18A65H4o8G+G9fjYNHq2j2d4vOP8AWR/n+WevrkL+pYap7SjF7t83S323+dl3287R/G8TDkxFRduXT/tyLv5/E+nXqdlWxkFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFAH/9P+/igAoAKACgAoAKACgAoAKACgAoAKAG4yXHrj+X4fz/KpfxR+f5A1dW7/ANeX5/cfy3f8FBm8749/EhmGPsnieS2TH/PLyrP/AB9sfo357xKrZlFf4v8A0xhz9P4Xd8HF91f/AMqVz8qPjPNNB4Pm8iR4d3mcJ3/devOOf/r45NfF5ulHCv5Xf/cSl0u+/f7j73IIa67fn/G/vO3/AJNfyPL/AIV/FGexuLfQtem861mP+jXL4EkZP59PQ/mvSvNwGOjToW7frOf/AE7l38/ke1mWXOsk/W2v/Xvrzrt2+8+qVZWVXRtyt9yROf8ADrj/APXjNfVJKUW+mnl19Vbbs/kfFuLjurP1v+X9fcek/DD4ha38N/FOl+ItCmaG+sblLmHZJ5cf7vH+t6YhGff2AzmtKFT2UvTfS26fm+/f7rmGJpuqlpv59reS7dvvP6u/2a/jdovxv+HOj+INOljOqW1tHZ6xbY8uWK5tIooZZvK4/czTEiE8n8y1fp2W4uGIp8t7vXo1u56/Alok767dz8izDBSwNTke2y1/uxf88/5tLvyPosgMfp1H198j+R/CuuMeVy87a9/ld2t6/ccI6rAKACgAoAKACgCnPLBbRGaZ0hgiRndpZNkaIpySWJGOeeQfTPRannVGF29Ft9/zva600/QI+5aEEtU7K+nfr6vtb5Wl+NX7dn7c1lpUGqfDD4aal5lx+9sNb1i2f93nPlzWtpLF50M0Pk5zPD+Zzlvks2zhJ8sZadE7vf2beropvvv99j7fIOH/AGv76qvefntb20bLlqxutFukfhHqurXmsXMl3fTPM8j7978Z+np2HXj3zXxx93GC6b9dL/jzr8F95mUBKC679NLfjzv8V9xs6FenT7/7UDjyYZG7/wDLP6Z+n8sdaBWvhZr/AA/+nPVfn95/XX+ytqH9rfAf4aXhP+s8MaY2f+3Zfcc+uc/TrX6jl/8AuFP0n/6fl/W33H5Bmn+9S/7d/wDTdP8AzPoyu880KACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKAP/U/v4oAKACgAoAKACgAoAKACgAoAKACgBo+834fyqX8Ufn+QH8xP8AwUXsBZ/G3xrceVt+3+IXmH/TT91DFkD/AOsPbOc1+e8S/wDIyj8//Uegfp3C3+5Q/wAK/wDTlc/Jf4wWwn8EagVyWhSRvbiL6fgPz44avjs3jzYV6X262/5eUv6/4c++yOdpJeunfSr/AHXa3/b3yufEqZGwj5WjMf8A5D6eh/n+Ga+N1jRevy3t7/43Pu3JSgr7K/W/XyjH+u1ve+uPg/45/tqx/sHUZs6hZp/ozv1kjj/1vX09z+dfU5XjnX0/p/xP+natt/ev/d+18Zm2AVBtpfjv/D/vS25v+H+z7kRjivdsr36+v6HzynZWt+P/ANo/z+4/Qv8AYM/aVufg98RLbTNYvJm8Oa89vYakpkzHb28f72Lysj3g/u8cHoBXtZJmEqc4xb73XfSq+lOVun567HgZ9lUcVQdXZq1n/K3KlG/8VX+H+Vf9vH9OWnala6nYWt/ZuJLW7t4bmF1P/LOVA47e/r69RgV+jwftYqa3e/nrburaLs/ldn5Te9SVPdq22m8eb+vf+/WJp0FBQAUAFABQBC7KiszHbGqZY/3NnOPf/PqKAPxx/b1/bSTw/a3nw1+Hmsf6U37rWdVs3zJzz9kh8rGYZocwT5HbPGfl+VzXNlGD5dE/n9qn3prrf/g2ufZ8P5C6rVasrpee2laH2ayf2Uvge2v8x+CepajPqd1Jd3B8ySR9/wA3fn1xwPz9iMV8U6n1mfM/z8rfyxv8P8q+e597BctqdHpfrf8AvbTS8/tffsYV/qenaVB9p1G6hsoF/wCWk3yfX0I57j688Gspzt1tbfT0N6NCTSfb9bktpeW2oW63dpIk1vJ9x0/yOvHUflmiE79b3209QrUJJN9/0sXIRn7QAm7/AESTn2/L+v4d60Ml/u0vl/6cP65/2NRj9nP4WDp/xSmlf+kq/X/PTHWv1HL/APcKfpP5fv5f8N/TPx/NP95l8v8A03TPqWu880KACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKAP/9X+/igAoAKACgAoAKACgAoAKACgAoAKAK9Z/wDLv+v5gP5wf+CottDYfGCCJeZ9UtbvUCg/uR3Pl+n8j+WDu+I4oV8RTX+P/wBIw5+l8Kyf1VX3aV9eqniPLX718z8ifHdoLzwjrkQX/lzkP+eR9OvvzXxuMgvYu2m3n9qH96P9dvtfb5TUUZpP+tKnkvzfyPgNlEZkH92WWP8A79/8B+vYY98Yr4N39vpv/wDaeZ+hUnanF+v/AKUzqdGj17w9cWPiW1gm+xrJHvlh/wBWbfzf3v8AF/j68Yw3ZhE8FJez17eekr6SlK3xveT+WiOTEzjQpPArZ9PSUa275u/8337R+6NA1q28QaRZ6tb/AHbiGN3/AOumM+V39fT86+zwVT63Fc6/Hzl2jG/wLaK+e58BicN7Ctyd/wBIxf8AN/e/m/yOm068exvbe4jHzRvG/wAn/TMD3Gfwx6fN1rsU/ZSV13uvl/wTmpr2VKVLvy/hJy/U/p6/YA+NrfE34W2+h6rdxy694YSO1nX/AJaeU+fJHU/8sounv7Zb9ByTExnSUXt6PT3qvZPe3b1sfl2f4GeFrOta/Na/w9IUYr7U/wCb+VfPVn6CeYPQ/n/9h/h/VvdVBLol82/ycvz++z5fnxwYHgfyx/n/AD60m2tlf52/r+u4lJPZ/hb+t/6uNUr24J7denv/AIf0pOMVq1p6/wCQxxUHnH60ueCW9kvJ/wDDgREqqgbcDnaN358n+v4EdGSUaKaTvF/8P1u3q/7tvO6Ym1D3Y682y2vbV781reb++/u/ld+3h+2bb/DPSrv4deBr6KTxRe2pj1K5h8uT+z7a5iXy+P3PlHiaHMNyx45zkmvAzjNaeEXNTd5drSX/AD7X2oSW031+TveP12R5A6z9tWWne60/ixtaFaL+yun3fa/nb1rWNQ1/ULjUtUuprq4uJvOeSaTzP9Z645zz0/Hsa+EUea/y/rdduz+R+iUnyR5bb9L9nfez79vuOI8T+J9O8KabJqN/Iq7U/cw/89JP+WcXHU/jx14rixGLWHduq3/D+7LpLp+P2e7CYKVaXNbTrr5SX80e3T8PtfEvjHxpqviy8muLi4kjtF/49rdP3cfl+svJhz74/DghvjcTX556P008o/5H3mX4JU6Tf6/3p/3pX3/4f7P1x8J9w8FafuG4/vPv/wD6iM/T8c9G+ryqf7tPvfz2lV/uq/8A5L8z5HNow9s1e/Zaq3u079X+L9LHsHh61N3qKQL/AMtE2en+PX6DHrzXoQjzV4+XN0v9j/FH+u1ve8O9sLN/4f8A056P8vuP67/2W7M6d8Cfhrasu0x+GNLT5ef+XWHr8vHPqGx2PBr9WwP8CPz/APS5n41mEk8XL0Xl/wAu6b/Ty/SX0LXYcYUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAf/9b+/igAoAKACgAoAKACgAoAKACgAoAKAISv3ucYxzj1/E/1/wCA9aiKvC39b+q/P7yZ/C7O17fmvX+u17n89P8AwVf0kD4t+D9QC/f8Maoj/jqnTrg8cc4z7dK+K4l/jx+f/pFA/SOE3/s13+X/AE8xPQ/HvV4vtGkalCOslvn69unHp6/gM7l+Oxj/AHLXa3/pcT7TDXp4iKvb4r6X+xL/AD/qx8Eabpcd94kk0+e3uTatf3ELukcsnlnze3P17t2PbbXxKp/vnp267+53urW9HfysfoVSTjh7r+vfX+Z9Y+C/Atz4WN5ptyyan4fvE3p50cXmW/7ryovf/wBC6de1fTYbLo0n+86eq35v5akrbrv8j5PFZg67+tLf0/w0+sFfRfy/fueh6VpFjosMlvYR+Xbs+/Z9P++sfr/SvS9na3s9E+m//pUove//AAPteTisSsRH2+/nt1jDblj/AC/yr53uagODn0/z7/y/Otprnd9vx7ecPyOWT55Kf6eVu6tt2fyPov4D/tJeOfgJqdxqPhO8EJuk2TQ/6yOQeV5X+0P88Z+6vdhsdLC7O3bRf3r/AGJ/zdV6HDmGXxzKKhJd76+cH0lS/wCff/D7H1pp3/BUD43QXrT3t3DdWr/8uYjtYtkfX/W+ScZ59fw4FepDiKad5P00Xn2of1954c+EdNlfdbeX/UV+a+TPcfCX/BWXWoGZfEPg2G++Tav+niP8f3cPUf7pHPUda7YcTxVk1pr1/wAsK/z+455cHylez5b9knb78U1r6fcz6V8H/wDBUX4TaqLceLtPn8OtL/BaR3OoeX/5CPb2GOuOlehS4iwtR277fxPP/px5HkVuFcfRjdvXtaiuq7Yl9H/e+R9l+Av2lvhD8RYIZtA8VWatMI9kN/LFYSc9P3d1LD+mPYHHzevTzDC1NpW30tN/jyQta1/tep41bLsVRbTV2rfyeT6VZJ3T/wArXaj8wftlftm6L8HNFuvC/hW+ttR8XahaHE1tJFLHpccn3ZfNj82KWcS8eQD77upbzM2zP6pCUJP33y9N9abvpBpaS7/ce1w7kzxDVWrqo7LRb+3i2+WpB3uv+Hv7v823i7xXqfi/W77WtWupry6vLm4uXaaSUg+ZL5v/AH5z/wAsDj8cba/PJzq4io6k3ePa0Vb3VHdJbtdvvP0alStalS39fWW8tNrnE6lqVrpFjcaheSJFb26e/Mn/ACy9x+v6YXLEVfYxvt5721Xk73v2+47aVL2lVed//SX5vt2XzPhjx14xu/GeryXJkddPjf8A0O2/6Z/8sv0/xBHRvisdi5VJWTs1tpfpDvGPb/hre993gsFGlSvbXrr/AHp/3pd+n4/Z4lhu2xj+L5evv9Pf36d+i8Spt1PPt/2735v/AG3/ADO7mcKT1v8ALf3vwPv3wJYfYPCmkwf3o945659P8jH5FvuMuh+7Xz6W+1Przv8AL7j89zHmnXd91bT1hT6rl7fy+Wm8vcPhdbLe+MtJsj968ube2X/rpJLFF7e/b24xXqUYf7Sl2v5b03/edv8Ayb5HlVG1hJW8ul/+Xq/r/hj+wH4P6UdG+F/gfTH+WSz8P6fC/T78cRHf/wCtjt1w36rhP93h6Sv/AODH+vr+sfxvG/71U9YW/wDBUf09P0l6ZW5zBQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQB//1/7+KACgAoAKACgAoAKACgAoAKACgAoAYx2jAHXPf/6xz19RRCKvbv532v6f13tYP6/r+vzPwa/4KsKJvHvhC3MP3fCt/N53/XPVP9Tgkw8dev1yMCvi+KYXV+/4f7v/AHlf/wAl+dj77g6pyztfTqu2mKPxXwpXYy5V49j/AOec/l+ea+PcP6tb8ed/l9x9xTny/wBb/grWv3d/Kxi2PhzQdNkeSz0u2jkkcPJMI/8AP64z6jIC5Ok3srfO/wDX9djb6z5/gbVdJxhQAUAFABQAUAKjNGyujbXT7nP/ANY/jz+Wc0Fwdnbv+l/J/mvmdLpXi3W9IvbW/tb6Zbiz/wCPV/M/49/5+/Ze+c4oCbu7dv1t5L838hPEnivWfFV5JfazeTXlxL+8d3k8zzJP+evYfln17AUGUY8t/Pyt/wC3S/rvf3eaoNVOytb8f/tH+f3HivxG0fxT4yvRoumRfYdFt/nubl5BHv8AL9MfuTn6fi3O3wcwpTlP2FD+B1emmkJr4/fd53229GfQZXVWH3Vr/h/E8nvzdvuPmPxNotnoOpNplldfbmtfkuZk/eR+ZH/1yHP4+v8ADnLfN4mkozdCgu13ffSM/t83d/a+/aP1lCqsQ15f8HyX8vb7zP0OybUdb02zRc+dc7Pw8rqOnr68e1Vg6SlUt1+77M/N2+/7icRJU6DTVttP+31/mfobZQi1sbO1X7sVtGnX0ih9uPz568YG77vD0Eqav59b/af9f8MfndZ3xEn6f+kI99/Z98MSeI/iV4Lij84+X4t0N/3P+s/dXUJ8rPr/AJ7V6OUQvUWl7302+zV83f7l87nl5jNQy2Se+n/p+HXruf2BaBamx0jTbMrt+z2caf8Afv8An17+nvX6fRVqUV6/+lPzf5/cfjs3eTfp+RtVqQFABQAUARhiRhRj8en5gdfqfwpt31BK2g5Vx+P+euTn8h+NIBoOCBuyP90Y/Pr/AJ+tTGUXZRenTT/ML7rsIXPbj9f/AGQfyP4U3Co9Ydf8On3yV+u/L87FWX834f5pfl940DdyvI/L9PzqrqlF3fL269dejtvfVddLamUPZTi3HXaz95ddd/1/UnAxxWajF6rVPbp+bd/uXzuWFWAUAFABQAUAFABQB//Q/v4oAKACgAoAKACgAoAKACgAoAKACgDH1rVrHQtPu9T1CZYLSygkmmd+MokfI6n9P1zljm18279/Py/L7ioRumtbWtf5rpdX0XfTzufhf/wUi8T6H46bwH4r8PXEV5p+oeDL90uoh5vl+Zqk37rqo/Qc+/3fi+JpXX9f9Q/Wyv8Ad959zwnG038rv5Ym2l3+fnpdn4r18mfbNW0CglQvf7W3l+r/ACXzCgYUAFABQAUAFABQAUAFABQAyaMTwTW5by1mTY+z/PHX9PesZUZTisPR1v10015/tSjfr9pfO1jWnXemtrX6bX+Tv933Hh/j34fJHoLw+F9L8+8mffczPH5lzJ/21GM/n+VeTmGDpqDo0F+/dve97o4S2nVcPg5l8S76vQ+gy3HuLWu3Ta9+f/p3K1vn8jzr4QeEL9vFH2vUrGa3XR/Lm/fR4+eKXyuuO/To3rxj5vMy7D3qJ279f7sz084xDpxaT0fl50v8z64r6+UXTgn3v+f/AAT4mT5m33P0A/4J9eFbzV/jp4eLW/nWMdtcalsMefLkt5rPypenPTtt9e4FevkkFKsr9b/hGr5u/wByt53PD4iqezwUorTbz/5e0X/K+/8Ae+R/UOrdx2OPX+g/r9eK/SZq1OK9f/SkflCd1f8Ar8l27feWaBhQAUAFADS2Bkc56dv6N/L8/wCED+v6/p/m4/MHxw/a+/Z9/Z6srq5+KHxM8OeGLi1SRxp17efZ7yTy/wDllH+6miB7c5/nu5a1blvr26eh2YfA1KutrNrR6W69OZdtml31+1+Inx8/4OLPgX4MmnsfhV4W1XxhMPMhh1KG90e408y8f8s5fLmMPA/wIGF8OvxNg0rUtJK3/P132/mw9lpfZv5WSPrsJwVmc5WxELLqubDu+krawxSelo+fe+5+THxZ/wCDiH9rLX724bwHbeD9BsZP9TDqGj+ZJHH7fZbz/PcAgBvHnxFiHrT2/wC3PL+ah67/AOR9HDgPAuK9vK0nv7tbo3/JjGtuXZ/dqYv7Ov8AwVm/4KK/H74veD/hv4f8SeFby68Razp9tcpZ6Xf/AOj6fJf2drf3XF4f3NnDN6nH+z/Flh83qYmvGN7b6Wj/ACSf/PuP8vl8zXG8O5RgsLKVKOun2sTr+8ivtVprab6n90Pw407xLpPgnw3pfjC+g1XxJZaVbw6zfWySR29zfp/rZIxNmbnHcNntjPy/fwi40ItvXXp/f8nLv5fO9j8hqzh7ecafwrl1s/tQX89r9esreVjvK0MwoAKACgAoAKACgD//0f7+KACgAoAKACgAoAKACgAoAKACgAoA+Yv2ttV/sb4FeM71ZHjKQxwhkOzmXzox/Xrn2JyTXDmErYGWm9vL/l9DtGX9d7+73ZZRTxNJd/aeW0J+bt+N/LVH8pOt+PPEeo2UekXWoTTWdoPJhgmk8zy4+8UfXyYfofzxX5jUmuV63enS3VdbP8vuP2GNFKvTffnt1+x2uvz++xwVZjCgAoAKACgAoAKACgAoAKACgAoAKACgBqxQx7jHGiMx+fZHFH+X5e/58qGrmraPX0HqNzBfX/P+euPQ9KDI/cb/AIJS+Bb8X/ibxfdQJJa2PmaZZ3Xl8xx3FhDLz+PHbnp6t9fw1Q5Ve3493XR8XxXiFJ279Ntvq3Wz7X2+65+40edgz/n6++f89a+xcUpeff5drv8AP7j4NO+o+gAoAj+XaCRxzgZ/+uPTPXj3yKluXMkl7ut3fy009exLaiv6/Oz/AC8tLnzD+0Z+1v8ABL9l7wlfeKfil4v03SobeGR4bEzJNe3Ekf8AyyFrb/vhn/rl+HOV5MViqOBjzJ+8+ynpbl68sl9t7fjoo+lgMrxGYSfIvddtbwvop9HUjfWD3l6WslL+Rv8Abg/4OCPip8RZ9a8E/s+W0Xgvwqw+yvrM8drqNzqEf/PW2m8iKez6dx/IV8pjM8daL136bbOPX2L2t+mt7y/Scs4KhhZqUvs6deqmtLYqVt1tvbW2iP56fHfxm+JHxH1W41jxh4w17XLy7+ab7Zql/cW/mSf9Oss00MXOf/rjJb5ipUlUfMuv4Wsuu97fL5n21PDfV4ct7/LfW/8AM7fF/e+R5k07v8rP8q9+/wDh+YXHWkdCjb+v0u7ff9wwZcqD0/z9O/XHT3/iBn9Wf/Bun+ybb+JfGHib9oTxHpPmW/hdJdE0R3H7uT+2NL82KWLnyf3M1n6/Q85r6rhnDumtVv1ve1vrHS679/vPznjLHxw+AhlSevvX0/6fYXE/yTW0v+f36wP7NF+VSQO/bj09QfU9vyxX2x+WRjypRXTtrvr3f5/cS0DCgAoAKACgAoAKAP/S/v4oAKACgAoAKACgAoAKACgAoAKACgD47/bXaHUPgD410q2uLaTUMWcwtDJmUxxnzf8AVjr6/wAOc4J4Irzc0/5F8u3u/wDp+F/0PRyqLeKpaWT59tl+7qaWvH+tdNpfye3nNzJ/Dz/nsP5D8eN35i480X5W6X6/4o/12t737DKEvb09P5+v9wq0EhQAUAFABQAUAFABQAUAFABQAUAFABQAUAT2gRriFZflj3xp6/l93p/lhj5gaV3b+vzX5/ef0Yf8E3PGfh5fCaeAtBje4uEtvtniC/dPL+z6jaQkRWsWP3M0PknGeevYEmvveH5Wg0vmvnWtr+OlvVbn5vxE3KafReVt40V/X/BZ+q6nKg+3+fT/AD69a+jvdv1/P7r/AHfcfLLRJdv68/z+8dQA1mCjJ/z/AJ/D+jAH43/8FMP+Crfw0/Yt8LX3hjw5e2fij4u6hbXEVhpNtceZb6Q5/debeXVhLNPZ3kM3S3mg9yRnC+RmObQwEHCSvU06tdYPpTqRfuzXT72rx+lyDI3mM0525Ff3Vs7xrfF+9T0cFaz163P4Rf2kf2tPi9+074x1Txf8SvFV/q015cu9tZtP/o+n28nneVbRCKKD9zDDmD/9eK/Pa2Lr4io5yleLtpyw6RS6Ri94raK+e5+w5blNDLI6r3v8U+9TtOr0qdkfLhJPX/D/AD1/zmudRS1t+J6aU4bvR9OVa/dKXf8A4f7KVSqKN16f1+IN31CkI1NIsvt2p6fZbd0l1eW9sidv9Il8r2Pb0wR6ZFAnK39frZ2+77j/AEmP+CSHwMsvgp+xd8LbERGHWPEOj2+q60PL8stcQXV5FCOwH7rjPz+oAAw36XlNBUqbklt593VS79/+G3PwPiLEyzDMp1pfDHlsu/NQoQ/lpveHb79Ob9Qeu0YwDnj6e9es1Z2/r83+f3HhxfMk+4+kMKACgAoAKACgAoA//9P+/igAoAKACgAoAKACgAoAKACgAoAZJ9xvpQB+LX/BSTWvFPg3xNo2o6Rqd/a6brWm6hDd2cMhjs7j/RYYf9Uc58nv07kE9K+U4hlyLa/z/wCvHk+/dfM+y4Yp66q7120/6CPN/wBd95fg5NI0sjO/U/y7V8TGXtfn/W1lbbu/kffzhZWvv5drf33+a+ZEoLPHCF/1nyJz+nT8P4f6U2r6EpJbfnf+v67H53ftC/t9aN8DfiKPAkfh0a15EME1zcpHFJ5f2iLzf+e8I6dOOfRf4dI0uyt3RE8TyaXv8j2z9nf9rH4e/tERXFroP/Ep8RWcf+kaPc+VHJ5aR+bL5UcWf9T06DnjPNKUHH9f6u779lbzuXGtzdfwPqWobtqU3fUKdJ3g3Lyv97tsl+C+8iUOWSsr28+6Kz3+nxSray3ltHcNykLyfvPTH8+/fgN/DzudCLabs9L6T/TyOyVKvViuWPrrDTXza7dn8tCzW6d9Tmaa3/O/9f12CgQUAFABQAUAFABQAUASQ8yJgbu/+enXr07Y4zQB/RR/wSz8FQaf8PPEfi6a3aO61PUrP7N+7wfs8lh5UvqT/qRxjnsRX3fDOFeHwfl/91r/AN9/zdF9x+b8TVYyqxtre/lpy4e+j3/Dv0tL9YB12dvpjtnrk9/f8q+j+KPr89n/ANu/p8z5dK2gzC4Hy464O4n68e/Tn6jpWjjvJvXTmVt+i15rbdo+vcm/srU7csdbL4v7z6J7vq35WPx9/wCCrX/BSHw5+xZ8L7nQ/D9/Z3fxW8V2ctvoumpKTcadbyn7Fd3/AJQ8qXzrQzwzwcn1HcV4uZ5nChFxUrP0l3pvrTmtpeXz0UfpeH8iq4+tZr93ZJO8H9ir2qwlvT7H+fV8Wvi14y+M3jbW/HXjjWrzXNe1q8kvLy8vJfMk8yT8Mf8AoWfVf4vzyc79b367fo7/AHr53P2rD0Hhv7vfrbfzd783f7jy2srbvudk5e0X6/d093t/N920igQUAFVRj7lraPz82OlHljTXX3r/AHv/ADPdP2cfB0vjn4z/AA98Oxrua+8T6Of+2cd/DLL3/mPy/ieEpuc/L18pfdscGLqqlgMU3s/YfhWj29T/AFPvhn4YsvCHgPwl4f06IQ2el6Dp0EKJ6fZYj0yfXHJPTt/D+tw+FfP8z+eJSve3W3ltr27vv563sd9VEBQAUAFABQAUAFABQB//1P7+KACgAoAKACgAoAKACgAoAKACgAoA/Kb/AIKi+Gr/AFH4ZaRrllbb/wCynMUs2zPl/aJoYvTjv0B9OQK+a4ipKaff7t3Rfn/XbY+q4WrXbu3o9n/hr+Stqr/O+l7R/nNniMMrRn+E4/z/AJH49a+BS9jp/S/O+/8Ad/7et7v6RKXNby87/wDtsf67W95kTiK4glZeI338/wCT9e//AALpVkr3tuvyP53f+CgHwg8caF8Z9Q8X/wBi3mpeHdYhszbX9tH+7i8uH96O/X6fnmuqnPr3+e3/AG6r/wDkvzPPxMP6t/h6c7v96t53LP8AwTU0PV7n4+3F5b2t5a2NnpuqJefu5bePzPssRi7w8j6fXPG0rfD/AF3Rrhley/r7R/Qy5Bmk2fd3/J/gPf8A+ue5rmSvoehJJR9Nte7/ABOL8ceMbPwfo8107I15Imyzh/6ae3Y8fn26mvOx+J9hTfyvpf7UPJ9+33WO/L8N7Wpr/Xuz8127/efFJ1jXtb1yG5S6vJLye8jdEhkkj8uMS9PKjz7d+M985r4/2tfEzbT93taGunonvHt959xChQw9NXjqr680+svLm7+fyPvnSFuY9I02O9/4/Fto/tP/AF0/z7/nzX3dJ3Tfp+vkvy+8/Oqsd/L57263X5P5WL9bNWdv6/N/n9xgnfUKQBQAoAJ4z+kf5cgfzz6UAUU1DTnm+zJqVg1wv/LD7REJf/1fn6cdaAL3P+x/wD95/hj9e+QODQAlABQBf0ySOO+tWmXfH58e9O3l+b39/fn364UA/p0/YC+IL+K/hnZeHdJ8Ivoeg+DoYtKl1Vjat/bFw8c13FMPKImyvnGLMxzxnnAr9HyCt7TBX6r7ta1W9/u67X8z8v4iw8o1U797X1v7tHS116PTzd7JH6EBgFx/k5/Dj8zn2r1o+7BeXn597Pv2+4+fs1o9X10/yb6W6/ceFftHfHDwr+zx8IvGHxU8XXcVrpXhvSriYB5I4zJcSR+VbRR7sdZzD0xkf3etZYus6NFy9Lf+Brff+bqvvt73VgcL9dxCw9/ed/laM52s5RtdQtvey0s373+aP+2h+1N4w/at+Nnir4leK7qaQ32pXCaVYPJ/odnp4/dRR2sXMEP+pg/1Of8AgXWvzLH4l4is16ef2If3af8AL/w5+9ZTl9PK8HGly2qPms+aT/5e1Jfzzj8NTv8AifINci9b+Z6spqp+vT+tgobtqJLk9fv/AA+f9WCgAoAKFP3Ndvy1/wAKv/5LbzGpe/Sj/j/K/ZW+938rH33/AMEztCTxH+2H8I9KePzBNre/Z/17xeZ1/wC2J9fXvhe/K43n/Xap0ur/AH/eeFn7dPK8W1on7Dz/AOYij92/9WP9OXSl8vTNOi/552FmnX+5bxD/AA7n8c/L+nw+FfP8z8DNCqAKACgAoAKACgAoAKAP/9X+/igAoAKACgAoAKACgAoAKACgAoAKAPmr9qHwNB8RPg/4l8Kb7SK+ntmvrOO6mjiLmwT7UwjMrxZIKgnk46fLllXgzJRWFlKk+32X/wA/Ir7Tts30+/Rno5ViKuCxCjRTdGXMviilZQlLZxk7+0e+m2l4to/lA8ReBPE+k391HeWLloXk+Xp/5C8njr33fpmvx6pj6EMU44h6adJf8+7/AGIPvHr92p+2YTBVMRh41X/Cd76rpOUd1KMviX8q+a1OGeOWJmiljkjZeqOfL/x/n+Yru56Mf4Lvbyl1/wAXzOedGdG11bfqn26Jvv3+7UzNT0fSdZt/smsabZala/8APG5t4pP89+zZ/EULmlfn3duq/NJdl0+8yUnPzfba3z/r8TJ0PwT4P8LzzXPhvw3YaJNMf30ttHFHJJ/yz/55d/8A62TnK3Cnp+tt9+nOrW9XfysN00mrb69bf1/XcZ4s8WaX4Q05ry9kRpdmIbX/AJaSfof6f1rhxGMhQ/XRrtb7Mu/T53v7vo0MHUqpW2+T79HOHbv+R8R+J/E2peLdUa8u2dld9lnbL/zz/wCWX7rnP5fkea+MxGIeKdv66f3Y/wAv/Dfa+3wuG+oRvLZ/5y7VJ/z+XzPoj4SfDgaZFH4h1iH/AEqZP9Ghf/lnHz0/yPUdw3uZTg2km+v6e083+S+Z4Gb5gquiena3/XrvBdu/3nvtfSHyqVtAptNb/nf+v67A/S/kFNLku6D7dP8A5OUu8v8Ag/ZI+9bz8/1su3b7woa57Ou+/T/5CUe0f+B9ol7t/Lz/AFs+/b7j4l/bw+NOsfB74QMfDVx9j17xJNJptteJ/wAu/mWvmmWLn/ph6j14pUKevbytfv151+X3mdd9V+Xp0P59Yvi58UY9Rj1CHxtrC6hcXMbv/pEv7yS4m/55cd8+o49sP3WVrdPX9Tzfae9v/wBu/Lvy/P4fLzP6gP2fLrXL74M+A73xNcTXetXWmyPcvN+7k9IvX/lj6foQTXAeseyUCaurf1+a/P7wpwfLFrZ/f1/4JUYR6OzfS1/x5l+HL8zd8N6XPrWs6fptvC8z3lzb2yIkfmZkkl8qLmPr+np6liNF1Jaarr06ervt0S+dxqUKDv333+XV/wA3RLzuf1n/ALIvwoi+FHwY8L6NJCYdUvbG3u9YXHW9Tzov73/PH1GB0w38P6fleF+qUWt+3T7VX+9U6yX/AALH49muJWMqrsvlvGlfpH+Xt91/e+oXO1eMbsfLn19M89vb8674pSqO+v4dH/X/AA55sm1F28vz7dT+QH/g4r/bDuvt2hfs0+EtSK29qkepeLUtLhjHcW+qWEN1axS+WTF+5nhPXJOO3SvjeI8dGg3SX5X/AOfMv5H37+lrH6VwXgZUtbWvrbRW/wB6tdKctbPrZrz1Uf5EScnP/wBf+g/l+eK+TacI+0XXz7Pl2+Z+oNWdv6/N/n9wlIQUAFABQAUpq6pr/H/W6/P7wjHllS8+fpbp/il/Xe/u/o1/wSlv4dM/bc+Dt3P/AKuPVbhP+/lrNF/Tjn2xx83pZa+XMoJ/3vP/AJcVPJ337r5nhcQq+V4tf9g//qRQP9MrT2DWVmw72lsf/IQ/+v8AT8a/Tz8ELlABQAUAFABQAUAFABQB/9b+/igAoAKACgAoAKACgAoAKACgAoAKAPnP9o7wTqXijwJdXmgzXNtr2jqZ7Sa2P7z7IT5t3F97qYoM/wAOe/JG3wM/o1VhJPDqz0VtOlSitHUctFaXXr1t7vucP4ilh8bCnXV6MubW81tSrW+CPNrJrte3S9o/z8eOrq/n8Q3z3quredJ/r/8AWfnnP+ckd6/mTMKldYyX1iVl7vSH/PqH8n/bv9XP6cwdOnTwcanL/sr5r6vS1WS7Op/EfRfdE8a8S+DNO16GR4Y0t77Z8jp6dO+f/re3Su7LM1q4adqzv8oq2lT+SlK/xL/g393lxuVRlF2Wnr5x71D531LTLzSLiS3vYfJEf8ef+Wf5f459RwG/QcNjFjo3itPXzl0dOP8AI/tfdtL43E0Fh5WT1/LSPTml/N/M/lseN+Nviro3heKS3spE1DUvuIqfvI4/+/XsP1rjxWPdKOm7+XWPRwl37x+d/d9PAZa5tSe7/wDt10qLt/LH57nyTrmu6z4t1D7VfNJdTyP/AKPbJ+88v/plFx+vPuvAK/LV8VLEPfRb6b7f3Y2ty9Pw+19jQo0sNHbfreWlm/N/zd/uPfPhn8JvI8nXPEMPzn5rezc//WXH7n/a/Lq3s4HLE5axv8/Kf/Tw+ezTNHOOnXz86f8A06V9v7vzPo4BVG1fur8ie+PTpn0/p3X6SyoRXTt1vr+lz5OUpVJXerfy6eXoFaJ2d/6/J/l9xF9l3J7a2nvJlt7aPzpZP4E/yenHHP1XgVjVq8t3f8N9ulla1+7v5WNYQv0vfpt+rv8Acvnc9i8PfDOARJca1Ju3fP5Kf/q/Tj692+OxvEXJ/u/5f4Ok6L7y6/cfT4bI+bXf8P5v+nsv67/Zl8QfDW2EH2nRW2lf+WH/AFz9evPPqPfg4owXEXP/ALx+X+PpCiu0ev3hicj5ddvx/l/6ex/rt9r4K/aW/Zm0P9obQrXw34ivrnR7rR7nzrWaHyuJI4hF/wAteOf89K+yo1PP/t37+vL8/h8vM+Xr0r9Pn93S79N/uPinwN/wS18K6B4nsdX8TeLLrWNL025jmSwf7NLHJ5f+q82Lyof+mGfrxjALdEqztZu1/K+39f1Y4o4VP9Vf9T9UrGytdNsrPTrGFLezsLaO2toU/wCWcccXlen/ANbt8vBbM7JRt8/63u7/AHL5luglK+gUpOybJUH7T/g3+z2uvz+8+6P2J9N+GsfxDsda+IV9ttbG8t0ttNTypPtl5JL5Vp+5lP8Ayxm8jPPvhete1ldLnf8AS/5+dbv8l87njZ7OdGneKtfzT60e/r/Vkf1O2ckUlrbvFny3hTZu/uAf4Z6+nQA5b9H5r3S0s729fvv/AFtsflNnbv0v/Vv672ucx478U2fgrwnrvizUWSOx8O2EmpXLv/qzFH+vU44zn243Z1Kns1fZ/wDDL9S6cPaNRfXW26dtd/8Ah/1j/mB/twfGW/8Ajf8AtGfErxrfTTSSP4l1TSrZ3/6B+l6neW1r5Oc/uRAcdT65H8P5VjqjzCaqN69dLdIR6Jfydvvuf0Dk+EjRj7kbfN96veUu7/4OnL8e1jJ80OTp/wAG/wCh6jneTW23n0/wxt/W1veKQBQAUAFABSSvCm+3P+L9V+T+RSfvUl25/wAj7A/YU8RDwt+038LdV87yPL8SWcG//V/8fEsUePr6YPHsSa7sI2syhb+90v8A8w8/6/4Y8fO4c2WYv/uB8v8AaKXm73t2VvO5/qNaE/maNpEg+7JpWnv+drD/AEx37ds1+pn8+mtQAUAFABQAUAFABQAUAf/X/v4oAKACgAoAKACgAoAKACgAoAKACgCnLBHLE0TJujkSRGTP8DghhknuM+mPQ8VDlyP2UVa/VPbTmejT72+LTz2Fb2cHCC7aX23f2t7N9437n4w/tmfs8XPhnxBeeNdEs3k0XWZpLk+TF+70+5k/dRWA5/c8Qj/UFffsK/DuPuGZUpfWqMeZy80tlg6f2q7vdN7RX6n7rwDxLCvhVl1d8rg2r8rd7zxdd25aUbbJazv93vfnKYpI5fKdfLZeMj/ln9P8r/wLGV/KYRjPpZ9ddv8AP5H6kouce777W17f1+J+Z37Rvxw1nVPEV54Q0i3TT7PTU2TXnl5uJMf88pIsd+vDD1BxXv4J+w95ddv/ACdbWd/i7r5nP9VhUm0/17eXp/Wp8HeM/HvhnwVYTav4r1ZLf5A6QzSf6Rcyf8sv+WX0xz+K4+brwuFniXy/fqv7zXVW+Ho/W5jjMbhcAuaHTzqf3Vs6U/53uzp/2IPilYfGrxZ4yum0ny9L8Pw3D6UJo4pM+X5PlS/uuB09OeOlfWYLKHhlzNbee/xr/n7P+bsfJYrO6uMly0nt1tHtF7SpU/5Ht+J+lw+7gHj1/r2/l+Vel7GR5H7v+uYWqs1o9/67N/n9xHs4N73b8n/8lb/yX/M2dG0K/wBduVgsYty9Hm8v93H+Y659hn1GMVw43MKWCi+V77K0tNY96cv5+t/kehg8BOqtd+mq/v3+1G+3X8PtfQfh/wAL6X4XtWuJfJ3QpuvL+b/V2/l9v4f5cjrjgt+eZhms8XKXK77a6dod6UP5e/6H1mAwbovb5X/x/wB6Xf8A4f7PyZ49/bBj0LxK2leGdL/tPS7F9l3eJ5Ukcn/PXyv9T2z2zx2x8uNLAQUb3uuu/f1X4J/I9dRdmnpe3nt81+f3n0f8L/i94Y+KemLdaRcJb6pCn+maU8n+kR/9+oPK8kwj39uoK8k6coS0/PyXffczalRd0rP77fe3e9+/3E3j7wlFqNrJqlnGi3lum+ZEz+8jj/xz3x/Vvo8hzNYOSoy636X6VpbqnL+f+b79o+LmeEco/wDB21p+ave3f7zwHYAdpXLL8np+mP1G3p0P8P317xVZat9dra8u39fifFzh7GTW1ra79O3z/qwUyQoAciNI6oi7mb7iH2//AF/p7ms4VXTg6Pe1+nVy35Zd/wDh7+7rCl7KSlHWPra2jXVN6t9vuuj9aP8Agnp+yvd+NfE9v4+8Tae6+G9Ck86HzkJj1C4/5ZfZun/HnNDn24HIOa+m4fyypTqe2tv5x6RrR/nfft9x8hxLmdOMVGk+aWt1ZrrQe8qfa5/Q9FEqRJGg2pGu1F9h75Ht/e+g6V95JJQt1/4PrL+u+0fzmmuSy6afLe/R99tLWt1ufmh/wVq+Kc/ws/Ym+MF9Z3S2eqa14Y1fStKf/V/6Z5UUsOOvv9fYnNefm1VU8L/X/Pyl/n3+6x7fD2E+s45+ui2/5c1uvNF/Z6+mm8v82LVbu91rWLiV1ea+1C5km2IMySXFxL5vr756dec9q/MT9554xjve3l3Z7Tpf7NXxJ1LwjdeLn097OG1Tzk02a3/0i4t/KM3mxeVmD9z5PYjp04NBjPEqPlbyve/9f1Y+fXikikaKZPLmh+R4f+ef8uf8nIGaDpupXW/4f1sMoHa2lrW6HT+FvB3ibxldTWnhrS5tUmt4ZHm8lP8AVxxxdMgHtz+nPIYMnONH166fpd9+j+4w72zutOu7jT723e1vLX91cwzc/Z5P8OOOvp05UNKdT23Xby/4K7d/vKlAJWVv6/N/n9x6J8J9RudK+Ivg28sTN9qt/EmjzRJD/rP3d/Dk9R2Hoe2MYNXGVtHt+X4O/wB6+djKrC+vf8P/ACZX/wDJfnY/1PP2dfFV140+C/w68R3q7bjUfDllJKPeOHyc9z0i/qMZxX6vhZKeHi+1/wD05P8Az8/xvH+c69L2MuV9P8k+779/uue4VpF2in/W5iFUAUAFABQAUAFABQB//9D+/igAoAKACgAoAKACgAoAKACgAoAKAImHB+f73+z1x+Jxj6D8acLwUVLeN769/SLtp/i+QX9nJt9enou9337L5nIeNfBmkeOfDt94e1mFJrO7iZcY5ikZCkckfbjd049ugLcONwMMdZVY+7dtav8AuN6xnB7wW9vRfa68Ji6mCxCxFKTjq7r3ZXvCUNnCWvv/AMvXRWbcfwh/aM/Z5174U+JbiSGze50Vz5unX0aAxhP+WUU2O4z6j1552/znxTwzPI6l09ull2w63+sVf+fvn201cv6J4V4kWaUn1tZW7PmxF037KnquRf8ABuj8Pv2s/g9PZX3/AAn+iWrtazJs1WFI/wDV+X/y18rvkf5P3W8LCVuaC5t+/fWXRH10IylUcunXz923dW26J38j8pPjp8ILb4seHTDDM9vrGnpvsH8yXy5PL/e+V5X+pHnfj/RfoMBj40KqutNetvsz7U59/L53PNzTLqWMot03Z/8Ab389PvOP8r6S+X2vWf8Agk/8JPEWn638UtF11E0u+s7bUEh3/JHP5fk/6rBg/LJPbJ5avoMz4gjSorl6Xvu/tU+9F337L56Hx+X5DiVXfLqtOsF9ip3qf18z9jT8L9fQqqbGP7v/AJ5devYj6cHnuFzmvP8A9ZI/1/8AuD0JZJPTl+e361/6+43tM+FTK0cur3SRwqM7Hkii/D/lj+ffrgdF46/E8L6b+jXbq8O/y+46qOQSl136ff8A9Pf/AG7/ACL3iL4jfDr4X6ewu9Qs/MhT5baHyriSTy/+uQ/rj0zzt+YnXq4y8ZO21/h9ekY/y9Pw+19Fh8JCgrJfi9d+8pWtf/h9OX8//i/+0p4h8fLNpGgK+j+H/wB4nyf6y5j/ANV/rcRS5/n+q7YfCxp25t1fXXz6KXn/ADfqjrpWk7Wt89z5T8ZXtx4C8L6b458Uafeab4W1i8ks7TWLm3mjjuLiOWG1l7Z/13qO+MHJr1sPgaijd7/Lu/7z/Hm+R52LzBUavJ3/APkYv+R9+/3HZ+BfG2o+D9b0vxPoN1MsavG7p/q4Liz82Hzf3WBk+TD/AIY5C8lenGnNXWq6fJdbrv1T+R3e1Vekpf18Vuy7dvvP2i8D+KbPxz4W0nxDBs8vUraP7SvpJJ/yxx/+r9Mt4dam6deM46b67/YS2fr/AFYiolXi77K3l18krfD3fyPDvGmkjSNcmjjH7qYl0/7af59vxxhv03KMT9YoKDV7XtrvedV/yRt8PeXy+18Nm1CMZPl0+99KXdr8/v0OTr1zxySKKSd1iiXczfwe38u3pz6rgbgD79/ZL/Yx8WfGrxFZ6hqdo+l+E7OaKa/v5o/LMtv/AKryoov3GOkA/cZ989a9rKss+uSjP1/FVV/Ov5e33nhZ3nX9lR+rz1k9vl7KeypTT0qL7UfzR/St4E8DeH/h74b07wz4dtI7Kx063SFfLj+/II8SSdvvEn9Rzya/QaFFUaahGPfW76Ny6ylff/h7Ll/McRUlUqOtUej3WnTlhulF6tLTlfrZ8x2+QFyOn/1/cH+X5VcHeKd73vr8zNK7S/r81+f3n4C/8F8rHxP4u+APgbwJ4XmSObWPF0kWq87Nmny6PNznnrN27cDjGa+e4im44b8v/BlHyd9+6t53PseDUljtfK/yo4rta33fcfzM/C39m7wb8PEjvb+FNc17773U3Mccn/XGX9z+5/D9Mt8EfpM8S5ed/K1rf1/Vz6JKR7PK8tPJ2eT5MccUUfl/9cuYenuvtmgw55Slva/l2R+bX7U3wB/sqe4+IHhO1P2O4eSbVbOFP+Pf/pr5WP8Anj+Xv96g9PC4hy0at+vxdbO23b7j50+EXwW8T/FbVI4bK3e10eJ8XupTR+XHHH/qv3Rl8n1z+43enHWg3q1rKy3fz7dbL8vvsfrh8Ofhn4Y+Geiw6TodnC0gT/SLx44pJJP/ACCP1z6YPVQ8qrXc9vy9Pv2PFfj5+zlpfxEtLjxB4chhsPFFvDIzpDH5cd3/AMtf9VF+5P8Azw7evbDBph67p9b38tt/zufl9L4G8VReIn8KNo9z/bgm+zfZo45f/RuBiHv1P4YNB63tLLX7/wDgcv8A7d/kfpn+zh+zbp/gCWx8WeL40vvEHyTW1s3+rszz5X7rn+ePXNB5uIxNtb/h6H9xn/BOX4gv41/Z38PWsg+fwzHb6Z6Pifz5gP17kfjnK/peTVHLC2v8u37yr0tre3df/JfjHEFNUa0Wk7vR2etkqVuj/mfTXbSx+gDHBYeuP0/A/wAx+Nej/wAu/wCv5jxSWtACgAoAKACgAoAKAP/R/v4oAKACgAoAKACgAoAKACgAoAKACgAoAKAOG8c+BdC8faDd6Br9rFc2t1CUR/L8yS3zz5kfPXtnIznjBNceLy+njaEqE3a/KrtPS04yt/Fje/Iuum+u0uzLsdUy6rGtBJqKeia19ycftRqWspv9b2Tj+Iv7S/7ImseDINSkXTX1zw3feZvdE8z/AEeT/lldGOEGHyevTvnnGK/AOJOC6uW15VqUeZS5dbxW0KEV8WMq3/iPaK/G5+9cN8XYfMqapV5crV7q05byryWsMNTtpCL0tv5Ny/AP44fsq694TvrzXPBtq99o8kkjvY9ZLP8A65xRYmP1+X2xnLfMYaupLlxPuy9L/wAz+xpty/1c+/XLCNsO+Zf+A9f76n3l1/Q+VdJ17xT4G1Jp9Lub/QdQX7/+j/Z5JI/+eX73PUH1/E/xbuEU77x+a/8AbpN6/wBO/ukIqbu9X91v87pdf1PYbL9qL4s2kSwjWPO2p997n/7Qcfn9M4rJYOmoXW79e/m3+S+YknQXLFX8vx3bffsvmc7rv7QPxT15GgufElzbwyfwW0m/P/kHg/gfwp0sO76LX1/za/J/I0hCnU96tLXvZ69No7WsvX5HkGqasTfaeviXUvsd9rd5HZ6bNr0n9nx3FxP+6i8nzvIh8n8B74yK7qGErexVHDw+L+9HpNy+3N3+11Xz0OedfCYSk61epr19yqr+8o/YVX+aOyX5n278eP8Agmp+054A/Yz8TftOaLqnhWObS/D0niS20r/hJLX7PJo/+hy2t1ayfYmmmmm83Hkd+vPIX7TAcF1PqirYl2bv/K/+Xs4/8u8Uv7v2X8tWfn+P49pqq6eF3Vv5lvGD/wCXmCl/e/4N1y/mZe/tNfGL/gqPdfsw/sReFvBOj+GYfCPieR9efSry/P8AbEdndabLqkt19qsvKP8AyDZ5oPJx6cYBb63CpPBYXBxd4/v7v/uLKr1ae/n9+h8Fik44OOIkry1t/wCDYw6abf1ufpB+3b8GfBH7P/xp034R+BPJWx8I+Hryw1jyfKj/AOJhHDZy/vfKEv8Az29fyr884lwtPA4yrCLvJ8n83SlQfVtbTfX7tD9d4OxdTE5WnUXurzj/ANBGK/lhFvWK6R+Z9CfskT3Enwv2z72jj1LZDuP+ri8r2/P8a+CxS9m13d/n8Pk7b9vuufTw/dxf2b+d7Wfaz7918zrfisUOsW+M7/Ji/wBX/wBch/np+fFfb8MxtG73/LXEebv9y+dj4rO5c0t7/K3Sl/X/AA55cBkgf5/mP5/nX0zl0krJ+f8Akn+a+Z4EYxjrHW3SzX4ub/L7tD9Lv2Ev2WPDXxn1Y614s1iwisdLud/9lJcWz3l55fky+V9l5m8n8PwHSvospy2liHeT9V72v8W21SP8vS3zPm85zSth17ur6L3Ff+F3hJL4vP8AQ/o08I+ENC8E6LZ6D4d06307TrOGOGGGBBGP3cYizjg9B6cZ/iz833tKhGltd7Xtdq2vnLo35+u0fzOo4zlfVfjpt3T23/C1uY6wHIzj8M/1wP5fnWid21ta2u/4WX5v5WIfpfyEP3l/H+VAH4O/8FhriZk8L2Zk/wBHjSOYJ/008qbnvj8/bB+83yPEnw/13oH23CX8b+v5cSfgUBgY/wA/1/n+dfGn3QtAFe70621SxurG8tUurC6TybmF/wDVyRyds/p1b0oAoaHoOjeG7H+zNC0+HTbHfJN5NtF/z1/Hn8jnt/sh0J31Neg5xc4OV+X8M/1Hfn/DgqAYY8OeHxrP/CQDR7T+21SNPt/lj7R5cfoP9SPoPx7UG7lb+v1s7fd9xvK2H3nr6/8A6/8A6+fwyoYH74/8EjPiVcmbxN4GvJkhiv5Bf2Ft5nLx6fYEEiPAxiUnoec4yM7q+x4cqqCUW9He6tt/H6q/ft958RxPh29bX5Wn6X+rq/T+u+qP3hUFkXf97HPOP88Y/wAmvsJWu7bHwsbpWfz/AE/r/MfSGFABQAUAFABQAUAf/9L+/igAoAKACgAoAKACgAoAKACgAoAKACgAoAbv6H1z79P+AjP/AI7+NQ4TbvDfrov1kr9f5fmJtLf8r/1/XYy9V0vT9bsJ9N1G1iurS5QpLbzIHRuepyQDx/LqKmvQpYmPJWXMvWS7P7LT3j369bs0pVKmGlz0HytXtpHro9JX3Uv5Xb+7bmPy5/al/ZK0LRdB1Dxv4Qi/cW/yXOjnIj/f/wDPKKLMMMMMMPp+ea/JeLuB+aDxWF9yMbaWbvd4an/y8xba1Utoyv5WTP1LhbjepQrLC4m8pSv/ACx+GNeptDCvdSW8o/D10R+K/i74O+APEsjNrXh2zEsn/La2t4Y5P/Zu/wDs/l0X8gniHGo8M370bdNrx9p0jrdf3v8AI/a4xl7BYpO0ZX006T9n67nj9x+yb8MLiRZEW9t1b+DEX6fuvx/h/QihYidNXl020Xz2Ttuun3amlSoqNTlmrr8vdT6eqPXPg78BfgZ4I8baLq3ifwr/AMJNo8c0cN5YXkdrcR+XJLDF5vkyf88c46n8f4e/BZnFaPd/L+f/AKdO3z5vkebmtGrWpJ0Hbe/wv7VP+e19n9mPz3PnP/gvV8Q/+Ca978LNB8AeArzSvB/xz8N/Z7nwrZ+D7jS7C8iks5Z/Kjv4vKE3nG88j/UdMdT0r9zqvK62H9pgIar+9idbzUf+X1rbT/m/7dvHm/CqcM6pz9nmNS8X/cwq6N/8uJSe7h/wdeX8Vvgr+1F+3L+3gPhP+wG/xym8F+F9UfT/AA2lzf6rqlvJqGlvYfZYrW/8nzvOs/8AQ/P/AOPcZz2x8806+Lr4f2bekdlan1nzb2XWPVv5HViMNhMFH2qV2/Op0aj/ADS/n6fj9n9B/wBqT/glT43/AOCWfjv4G/GX4CfGbd4w2SzeJE/tC7/tDzLiws/tUsXlQwfubzzpu/8Ax7+ufl489qSyDC4apLST9trp/wA/KS2Ua62r9LHRkkFxBWjhou8Ffpa3uVanX2T3ov7f58p5z4x8XeMPjL8Qb7xR4lup9Y8Y+ML+3e8m/eyeY8kUNt5sXm+g7g8ejcbfyzHYmpi8XVxtR+6/Z9I6WpwpbRjFu7ivsq3ne5+3YfB08Dh4YCkveXNfVvecq28pS6Tf2n8rWP1p+FHhSL4ffD7SdKudkM1vZ29zee9x5Xfr/n0xmvnpf7RXivW3T7Hb/t3+rlYmpywaXz++P+Z5F4p1Rta1i4ui/wC7V/JTuf3f7rvjp17/AKbq/Tcrwyw9BOK3vrvb36neUr35v+H+z8JmVW8nd276XvpD+v8Ahjn69KyqRfKrfjfXz5bbfy/da8vKT9m1fz+X4O9791bzue7fBz4l+M/hPq9n4n8M6jNa+S8czwJJ+7lj4/dSn/nl+A+grfDYqth/hfy9zX4u8Zfzf8Ppy8+MwNLFR1V16y7x7Th/L3P6Sf2Uv2rvDHx48O29rPeWtl4ws4Y0vdN83ElwMRRxTRRYPExx3H481+g5bmH1xW7fj/E/uRt8PeXyv735hmeT1MBK99Ovw2WlPX+NP+ZLS/fS1j7OOWAYdR+PseTt/wDQfyxlvXtZvv11v/X9djxk7pP+vyX5feKfvL+P8qBn4L/8FhUkEnhmXb+78m3Tfn/plN/npz6rj5vkeJPh/rvQPtuEv439fy4k/BGvjT7oKAOk0hVktLiPnd/T+n5NnFA2raHPSAhmB/h/z/M/1oEMoAKALNpCs9zDE33Wfn/PHX6/lQBZ1K1S1uAqfc2R8enY/X8B+WBQB9nfsJfEtPhz8bvCuq3l59nt7ib+wVh/1fmf2xdQ2sXbHr0xjpgZG31snrONVJvv0/u1f8zx89pKdFye6tb/AMDoru7/ADSt53P677aVLiNZ4m3RzLvT8/x9fX881+kN3pJvdP77y/4D738re9+UOPLN3291NLfZa/d5depZqhBQAUAFABQAUAFAH//T/v4oAKACgAoAKACgAoAKAKp2ou3GFPbOenPXg9ff8gDQmociirfFfXbr1769HbrbaU3UPZqC35rq/wA95J93suvQ/Ov9pv8A4KA+DvgHqtzoOm6JL4t1zTZ4INStbS9toPshl55E0BIxFk/eX0OetfmfE3iJRyKdajF3nH2dvj05lQk98FWTuq3W9ulto/pPDPh5Xz6FWu04xqKnpem7uLxEXf8A2uhK6dHy67rQ7f8AZd/bU8HftEr/AGf9ibw14i8nzo9HurqO4lePnkNDBFEfbOenGMkV28M8cUc5apLWTvbSa29vL/oEorVUn1Xq2zh4r4Fr8O04VIpun719ae3Nh1t9aqt3lXtqttVbVH3CoBPJ/D1/wx+tfoDXK2usra9+X5va/f7rnw0o2kvLy7r/ABO3/k3yJqQBQAUAFAHCfEbTrPUfBHiy1vI/NiOhapMUz/zzsJc/Xjnr7c1xZlD2mArQS0Xs+vetCS7dVb7W/wBn7XXgJ+yxVGatZOa27wknpp0l9/fY/md8XxRx6xcQwf8AHvDNJCnH/LP+vUc4X6da/lDHw5HXpvR/uvP+SXdd+/3n9W4CpGeFoTW373p/08muu+xylcZ6A5TtOfTr7fz/AM8cZzQBl+Bf2d/2SfGvxy8P/E/9oTwGniCfRYz9lv5pLaPTreQXUN1DLqFrJaXhvYf3Pr/31ivs+EuIKeSVVQ/5c9d/5cTP/nzVk/eq9GrejPh+LsllWg1gNZefrhulautrT6/dePL+fP8AwVj+HX7Hvjv48fDn4l/skawngfx94Dv7NNYufB8l3oGn/Y9LsLy1tYYrDRotNhim86f/AF/H07N93n3EeBjSVbLH+91uuWtp71GC/wB4oqPwup0fyfKfK8OcI1Ju+NXK1bZp3uq/SlifKP2v/bkfM3jH4i/E34u6rpcnjTxFqvirVrWw0/SrNHuL+S38uztYbWL/AEWWWWHzvJh/fzk+wx96vzrHYpVXzJ2Xpv8AAuqXbt95+p4HK6eCi9d+vvd5/wDTx/z/AN3/ALe+z9xfs5/s8t4ZEPjPxjBu1aaLfptg/H2OOT/yD+58n3/DINeNicTZWS2/G/L+R1uVpP5fl3s7fd9x718R/E4gh/sWzb95N/rtn7vy/wDpl6+mchs4r6DIMsdL3tvO/wD1/X8779vuPnc0xyqRfT8etP8AuQ7djwyvt0rK39fm/wA/uPj5O7bCmSbmlap9kZYZfmt242f07dfouO2P4gD1Hwh438Q/DjXNP8YeEdWmsbixmjm/cySxx+vlSxRH99D/ANMf05ArroYn+zZLk63+ej7xqWt7R77+VjKdH2lJ0e9vwlzd127/AHn9Fv7Iv7Yfh347aFa6Rq1xBpvjSxgSKe2d40+2+WP9dEOIf9V2z35wcGvusszWONivaO299HrrVtpGlDblXU/Ms1yOWBquq1pLdX7RhG9lVqXd59o3+XvfeKtwSq9s5z/9b+n4dq9pR9xQ6dPnL5dfu87pHhcqjK22qvbt6a209fmfjn/wV38J/wBofDTwfrEFu8lxHr5t5nX/AJZ26WOTzj3xyPw7V81xFB/VdF872v8AvKPS7/P7j6rhOryY3sv/ALjiell37v5H83TrsZkznYdv5fn/AJ54zivhT9FG0AbGjzxwzMJG2qybPp7+/X29T0wwBQuihuZCn3d/f/P+fzoAvvpyjTluV/1v/wCv68dP5ZPDMAY9AEkUnlSxuP4XHXj/AD+n49KAN/WlWSK3uF5Oznt/yy/H/PbqWAJ/BuuHw54j0fWR97Tb+zvIf+ulvJDJEPb07/hyauhNrEJ9Xfy+w+ln+a+dwkv9knC2/Lp/3Evv+J/Zd+zL4/g+I/wX8C+IlmSa6uNB0/8AtL/pndyRf6r/ACe/Tgbv1HBzVWgknqr30/vyfl0XR/cfjePpSo4md/tOOul9KdO23m+q+4+gK7DjCgAoAKACgAoAKAP/1P7+KACgAoAKACgAoAKACgDP1A4sLvB+7a3GTj/pmxA/E8fr2NRT/cxjCT97X9e2m0l93qUnGn70tFFrz0afa99bf8Dc/j//AGvZJJ/jn44aWR5G/tL5/nP/ADyh78dc54HsM9a/ijjdVKvEmLhUfufuNLL/AKAMI+mu6R/bfAbpUuH8LWgrOp7e75pO/LjcXHZxVtG/5fnY9k/4JvTyn9onRY/MfattH/y06f6VDz3zgdvwOM5r2vDGVShnUKTd173Rf9AmPl09TwfFSVGXDybXvu+t5f8AQdl3RabH9UcQ3KcdQ2MfgO+R/I/hX9gSlepHS6Tfle8V91vXr0P4+hCVPWavza206adP6/Es0FBQAUAFAGD4iiE2ia1Dt3eZpd8mPraSgfT/ACKHD2kJxeqly6bWs77/AC/q4pzdKMJrpz/ovO2nl95/NZ8XbNLPxt4kgVUj8nVbhNif45YdB6D8P4f5S4hp+zzGvSWy9l0v/wAuKEv5vP8Am/Kx/VGQVHPJ6E7/APPzp/1FVl+h5RXiH0IUAYfiTSZNd8PaxoyTfZ5NQs7i2hmT/lnJJF5Xp+B/HO3q2lKdCm17T4Ve0vf136RTe7S1a76k0pxcVb3l93V9z8zYP2TPiVdeILqweOzt9Ne8lf8AtJ9Qikk8uT/rqvP/AH16+hFd6xNCov8AZZXkulprfzqQS2Uuj+WgoVaSk+fyvrJ9H2jH8Pwt732h8Lf2e/CHw2jjvnhTWNd2fPeXMefLk9IvKxD/AJ75C1xTqNQbvftpvqvyIqRqcyj69I9k9ub/ANu/yPate1SPSNIubyRtrKmxESP+OSLMXqDj8+3GcV0Zfhvrsnpe9rdL6VP78LfD3OXF1vq8b3/Dzj/i7+fyPlW9vJr+5murh90kz7/b/wCt17Fvr0r9WwtGFNXj082/5u/r/Vkfn9SvKfX8NtvJfm/kVavmvJp7/np6K33v5XOcKYBQBOLmZYfJVv3f9zoP8/gMfjuafZvea1fn/l8i5Plk32/yOz8DePfEXgDW7HWtB1C50+7s7mKaF4ZNn+r/AOWeMH6/0NaxxMqWtJ2ffR/+lR839n8rmeJwsMzgoNa+r7xfSUP+ff8AM/lsf0kfsZ/tn6B8c9CtfDXie9ttN8e6bAiSCZxHHquyLzJZYpJfKhMwzDD9nhznPTPFff5dmjr00r3vfXb7U+nsl23uvSR+YZ1kc8DWbitrO2mnu0r2/ezbvz69+y1Ox/b58Fv4w/Z28YTW0H2q+8P6bearZokef3kcXle//wBbPbrXXnFL2uEemz796lJ932/4fVy5smr/AFbFq+9vT/l3VW3vW37y+Vj+RfVrKewvrm3ul8uZX+ZMf6v19Afx/Ank1+ZH6yJFp7S2huFb/V4/mf8APf16cqAZtABQB01iPP0ySPp5f8Hvn6Hv7H324+YA5mgAoAlaV3VUZvlHT2/n/Ie/XNAEanaysP4en+efT/8AV1pSXJLmW6/G6t/M7b/3vlcL39y97/Z/Hf8AE/pH/wCCSvxV/tz4fa54BunMl7ptz9vtt3/LOzjhii8nt656c44xyX+94fr+0ik3ovl1rNbea/q5+e8VYVUmpp2av0vfTDp3959G+q7LdH7IV9IfIhQAUAFABQAUAFAH/9X+/igAoAKACgAoAKAOL8TeMPCngmz+2eKdf0zQtPbGyTUpxbx8ct83LfeJPXg8c5rixeLwWXYVQxVTkSv9mrLmvUi/+XcarVnOPa/yaNMLhKmMjHC4TC+0tfavGG7dTVVJR/lltPp5rm8Ouf2ufgNb3MkEnxA0N2ifYJEvrXyxkYOMFQc+449vvN40+K+Ho2SxNrXuvZY79cOvzfyPonwlm1WdOUME5ShzX/2nDr4lbXmxST0TtZf5Rp3X7X3wGktp4U8e6IN9vcJGDf23/PLnncSc59PYE4+aYcX8O0vq7p4jma9pZexx8eXXXWVCfNza+lrW1uFLhPOEoKWB7/8AMThbuz20xFlpbv8APWR/ML+07r+keJfi/wCL9W0S9S80+5v99tNH5X7yPyoe0WMfm34Zr+SOLMRSx3EOY1qHw1Pqdvi+xgcND7cYveD+yvnuf1xwXSq4XIYUauDs1zae3j/0GYqW8ZzW0l1Pev8Agm7/AMnGaP8A9e0f/pZBXv8Ahn/yUL+X/qDjz5/xO/5Jz+v+g/Lz+quD7h/3j/IV/XlPr8v1P5BJq0AKACgAoAyNW/5Bd/8A9eF5/wCk81TTVqcV5y/P1f5/cDV41F5Q/wDSmfzdfHX/AJKL4s/7C0/9K/lriqN84xXn7Dz2wuH6XX5/fY/qHhVNZDhb/wDT/rf/AJjMR/X/AAx4nXzx9OFABQA8u7DBb5f7nJ/zj8PTsCwAyin/AA38v/SmDfLQs9Px+3/wTzL4qu6aXZqP9W3l7/f97/k45/DHzfVcMpKo09+n/gNe/V/i/uPm8+/3T+v+ftE8Er74+LCgAoAKALVnClxcxxSN5at/nn6/T6ZoAv6lpMlidyHzIW6P+I/wxyT+vygG14H8a6z4E8Qabr+h3k1lqGmzRzQXMEnlyZjl83yurfueOefzz8u1Gawc1Vhvr1v0cdnGXSb/AOD9l18NGVGVKOt7d1tNS6yV/wDyX53R/SD+zN+054b/AGnfhtffD/xDdW0PjC40f+zby2uZM/2pH+5i8z/ptNNjtgdsDGW+7yvNI5rH2dTp6661JfZp0/8An2vs/fufl2ZZXVyys6qWmn8v8kI/8/J7up0S9Wfzd/tD+BL3wB8TfFWg6g3+lQ6xqEyJ/cs5L6b7L5XT/ll7LjsGr4vH0vqUlTe/39IPbml/P/M/lax+h5djFiMK6fT1/wCnlSW/JD+XseVaIxeK5hPzfJ7/APPL33fj0+o4C8Kp+zXtO/Xtb3drve9t/uO6atR5H/Xv336GBKnlyMnof8/54/qzER0AWIrqWEMIm2q3br/j275/PFAFegDdtraCXTZHVf3y9R9B+fr3/LigDC/lQAUU/wCG/l/6UxSV6fMtU/l9q3d3+5fO5+lP/BND4lXfgr45aTp5vPsum+Ivs+jzb5PLjxJLD689/Tn24r3OHaqo1m+i2+ca3Wzvv2+4+e4noSxGC91emv8A09od+Xt2+/7X9U8T71Uhtyv88brjHln/AFfG30+vvjGW/Q07q/8AX5L8vvPzJq2hYpiCgAoAKACgAoA//9b+/igAoAKACgAoAr3Ehggmm/hhikk6f3IyR39Qf738jQB/Kx+3b+0L488bfG3x14Um1aaHQfC+tyabpVhbebHb/ZxFDL+9i80QzTf/AKwTnFfyDx5xLjsxzOWFpztFcunJR1vh8JU60YWs6b+1r8rH9heHXDmAyvh6nmWIlzznzLmarK3Jjcdh72hXmndVI/YVt9buR8IHV9QJz9of9P8A638h+PVvz2nKtSpznWq6rl09nH+Zr7PN3X2vv2j+iKhTpctWPw1L/wA32fd3bbWr/l+7Rh/a9/8A892pRlVp2ftdv7kevlZ9/wCb7ti5+xrNRh7r66yduu7S7Pp95RkkaV2d/mZv8+2e/wDgcYpckoN1nK7nvpa/L7vTbcTq4uC9nSnZf4aT/vfav3f2pfK1j77/AOCbv/Jxmj/9e0f/AKWQV+heGf8AyUL+X/qDjz818Tv+Sc/r/oPy8/qrg+4f94/yFf15T6/L9T+QSatACgAoAKAOf8SzpbaHrVxK2xIdI1GVj6BLOUn8uOze46VjOVqK9Xr296PT1ffrfU0hG6l8l99/1X9XP5qvizqUWpeNPEV1byeZBcarcOjn/lp798/p6c1/LXEc75xjFt/u/n/zC0P7sbf1tb3v6h4ZVsiwi/6//wDqZX83+f3HlleEfRhQAUAFABVRVqXn11v9r+v6RMveoxv1v5faOP8AH2mNqWgSMo3Nb+W8ff8Adx+3H+e5IBr1sgr8lXTR/f8AZreS79vvPIzijzYRafj/ANPKR8zAEDB6j/Pev1A+AFoA6vTotNvrb7Of3dwqf5+vB9B9BmgDDv7CWwm2H7v8L/5wcfT0xzkGgCirFDuX+H7nrx6/5HPXg5YA6zS9TjnT7FeA7dnyP/Xv/Jv0oAwtStY7S5eOJsj/AA9v8/pST9j+7nrzfK1td0nvdbL7rle/Gak38rLtbdN/kvnqdz8MfiRr/wANfE+m+ItB1CaxurGaOaOZJPLj/d5/1sUXkedD38jj0JOcLvGtPB/vKbs/RenVT6Sf2f8AMWLo0cwgoSW17O8+ri+ko/yf8NrzfQP7XXjHQPjXZaP8VNHs7bTdWn03T9K8SW3lxf8AMHsIbX7f+6zDD9sm/f8A8XTvyF9HHy+tv2nbzt/Iuy/l7ffc8TLKH1euqfa/4wqPz/m7/efnrBcS2rbonCn7g5/x7fz7kYw3lc3NH2dr26bbvm7O+3dfO57l1OvybLqt/sX3/r8CF2Lszt95jk/54zx7flUkjaAHKjudqLubsP8AP+T+FADpYZIG2Sx+W3p6/wCT9P6sAa2mX6W6TRTf6tk/X8vT8vVs/KAZMhXexThT7/n+H4L9KANyxtYZbC4bH75f8/55/OpbUV+S/wCDZ9+33Fcv+zOX9fxLd1b7nfysdr8IPEh8I+O/Duvm4e3Gj6lb3/yP5fmfZ/8Alj1/+t2wcnb04ar7C7/T1/xW38/kY4miq+G1+T/7iRvpddur+8/s/wDhd4itfFPgHwjrtrJ50d9oOlu59JfsEPmZ7e+MDHqa/VoPddj8Zqx1emiX520/Xrv84+iVZiFABQAUAFABQB//1/7+KACgAoAKAGn7y/j/ACoAqal/yD77/r0uP/RT1nU6fP8AQun8cfU/jb/aq/5OK+Lv/Y0y/wDpBDX8P8T/APJQ5n/3J/8AqDhz+5+Fv+Scyv8A7nf/AFPxB4BXg/Zq/wDbn5n0H2qX/b/5BVEhQB97f8E6by00/wDaG0Ga8mht47jy7aHf+7/efaYf3X/6j/wLJ3V954cyis7hRb/mto/+gTHS6Nfn9+p+ceJtCUuHXTitV5r/AKDsBLq1e+vX1vof1ZRkBMg5Lc9P88du36Zb+w5e7KMb99O+lz+PrvZqzj0una+u67/11LFMAoAKACgDyf4weJLTwn8O/FWqXQ3R/wBl3tj/AMCvLK4SM45zkkj8e2cV52a1VhMtrOb0ShFaPT/aKUdbRlf4u9ru9kduVUZV8XSwkbuzn2WqhUqp62/lae1+nLdI/my8TXcN5qUlxCuxZvn2fz/Wv5RxL5pV1b4vZdeyj/dX/tvzP6uwVH2GHoU7be1173nOXd9+/wBxzlcx2hQAUAFABQJKyt/X5v8AP7hskcc0UkEi/LNH5Tgf5/qPoc1pGSSs9LfP9Fb738rGdVXSXr+nmvz+8+XfFGjPourXERX91J80L4/5Z+vPXg99v17V+o5TjYYjCOknfys1b97Vlu4Le3f79D8/zDCvDy1W/ntpT/vSvfm/4f7PN16MY+xpuNvnff3r/wAsu/8Aw/2fMvzpX/y/H5f1clikMTCRW2sv+fbj/POcVQHSz6ha3unMLj/j4X7n8+eTz69fwxigDlaAFDEHI+U/nj8s/wCfTpQAMSTluvv/AIkD+X50AJQBZlluriymszNP9nk/gz+7/kBn3/MnOKmMbfP+t7u/3L5gvd26fM82ubd7aTym/hJ2+vpn/P1yei0Nu7v/AF+S/L7yvQIKAJreUxTRsP7w/wA9/wCX54oGnZ3/AK/J/l9xva7GrCG4X+L/APV7Y/Xj0yaCpSv8v62srfe/kc3QQFAHRaJKu24hb5VZP/aXcE4znj264PG0NPaeX4//AHMpWrQx6iu/5oVm+f3j6e4HtkZPfOKA9p5fj/8Acz+sf/gnZ8Rf+Fgfs9aMzf6zSL+/0xM85trL7JbWvcY9PunGOvOa/S8nrRnTtHpq911qdGnfRd189D8jz7DezrJu6ctF11Uaf96Pft6W15vvrqx/2fb1HrkfyP4V6tt33PHHUAFABQAUAFAH/9D+/igAoAKACgBp+8v4/wAqAKmpf8g++/69Lj/0U9Z1Onz/AELp/HH1P43P2qv+Tjfi9/2Nkv8A6QQV/D/E/wDyUOZ/9yf/AKg4c/ufhb/knMr/AO53/wBT8QfP9eD9mr/25+Z9B9ql/wBv/kFUSFAHefDXxde+CPF+h+IbGby5tLv7e/tekebiP6n8zz7AV35XmTyvM6eLj157Pb/mHqU9nSq/8/P5fzucOaZfHOMHiKMtVH2VnqrXq05PRVaX/Pru/wAWf1/fs+fFDTPix8MPDfinT7iK4drG3tL/AGSeZsvbS2ijuh2xib+fOeDX9qcOZh/amXU8ZKVr8/TZRrVqXSFO9/Z2+FfO95fw/n+AWXY2vBfCuRr1nTpza0lJ6c/q/NuUo+7V7p4oUAFABQB+df7dXxQGi+GrPwLpt0kd9qXl39wrv5afZ7GXM0XOeTDNyM++T0r848Qczlh8qXK7czldWW6xOC7wlf4u8fnpy/o3h7lMcdi5YyST9nbl1aaU6eMpvarDdwva3Q/FO5lWeeSRV2qz52dfw6e/+z+hFfz/ABk6k43V3K/l8K8k+3dfM/oCL5sLKdvgt1/mqW/lfb+98ivSKCgAoAKACgAoBq+h578R9JjvNH+3hU+0Wf4/u44u3TPT1b8MmvpOHsU6eMVJvV+XalXl0T7918z57PKMKnT01f8A06v+XX5HzzX6NN89RRbvfdW/u3Pi6kPZadvL/gu+/ZfMKkgKACgByqWKqP4unf8AH9P69qALlzp9zZorSqdrfXj6+v1/xNAFGgDpdEurZh9juIkPmcb/AH+v+OP6NUY81/Lyv/7dH+u1veDn/EegqjMFXhvnhf8Azx6Dv+uVhuyv/X5P8vuKirtI87jQxXKxyr9x/nT/ACP89z1NMk1dYtoo1hmiXarJs/dj/wCyb/PY5yoBhA4OfT/Pv/L86AbtqadxqJns47Yxr+7/AAz/AJ+jfTmgaV3b+vzX5/eQafHDJcxxyriP8/8AD16jb6ckk0CH6jai1uNir8r/AHP55/n3/Dj5gCirFTkf5/z+H6YYAQEg8fT/AD1/z6daAP6Bf+CQnxAW9bxt4K87yrfTdK0+9trT/lmbi8vsSyxdMecIf/19a+x4Zq88Xrvt99f8rHwfFlJKpFro2/8AyXDq34/1qfucpwceoH6L9D/MfjX2D3fqz4skpAFABQAUAFAH/9H+/igAoAKACgBp+8v4/wAqAKmpf8g++/69Lj/0U9Z1Onz/AELp/HH1P43P2qv+Tjfi9/2Nkv8A6QQV/D/E/wDyUOZ/9yf/AKg4c/uXg/8A5J7LP+53/wBTsUfP9eD9mr/25+Z9BH+JD/t7/wBJCqAKAE3bSuPX6f0Pr/8Ar6MONqtHz9p/6T3u7/cvmZ1UqeGm+nu/+nF5vv2XzP1R/YC/a1/4U74jXwp4tvBH4P1w21tumk2W2lyPL5sl1/0x879xD/x7/TbjdX9U8GZhHC0aXNtL2mnpPFdVTl1lfZfM/lzjnLXmOKdtWrWf/cLCr/n5T2UH117r7X9Imha1p3iLTLTV9IuobvT7yGOa3uYjmORHTI67vXke/fCmv1SlOdSPvNtvpZd329P6ufkE6cKb0X4vytq/J2tott7XNsnAz/n+R/l+VJe49dn19PL3u/8AN567RSV9CLGABjYD153dKcYKP8D/ALe/T4277vZK3ncT9lCPvO66K0l17rmfXz+Wp5r8Uvid4b+F3hq713xBdwwBIpPsds8myS7mxkRRHnJwevy4984rz8yzOGXU4zqS953+y1tKEelOa0U/L56HpZdluKx0rYSCfK11p78snp7ScFqoye7ttpdH8+nxu+K1/wDFHxhf63cs7RyTSeSjj/j3jxD+5tef3MP7n2+hwa/mPPc7qZjUV99b/D2o9fYxS+Dpft5y/pbh7I4ZZTs9LbaN9a3/AFET/wCfneX4e74lXjqC9lqtfX+8fQOf7zT8v7vayt97v5WCkAUAFABQAUAFAGF4qUN4d1INwvkPjjPbtgjnP1PqMV6WVK2YRXr/AOmKp5mZO+Dt2/WrT8l+b+R8qnncB/fkx+eeePTnp+Hav1JRs4+d/wCr3d/uXzPgJu0W/T8x0e0Ou/7u+Pf/ANcv859cdO4C6GSj0S28zrrjTba8slmsV+ZU/wD19v69+/8ACA5dW9vI5Bl2swbll+T/AD93t/s857dWBCKdhUj+Hp+H54/zyOtAHa6dcLq1lJZzqWnjT5Ov8/8A9X58sExjy38/K3/t0v67393kLmFoJpIW/wCWeE/z2/D/AAFBRCrFGVl+Vl/yR3+n+Gc0AbN7q32y1ht3j+aP+Pr/AIfy57YoA4jVrQn/AEmFR5i/5x+Hbp19iWBpX0M641FJrOOEr+8j9evv2OMH3b2zn5QGraGLQIUAnpQA5HMbKw+Xb/nnr/njjOKAOh1TZPZ29xzuVPf8/wD6w9M5XO1gDnFGSB/9fp+I/n+dAF65sJLaOOVvuyfTP1Hp+Ofw6UAfph/wS18Wf2H8fdE0UTJbnxNKlmyD5PtqWwml8rrz5Ocgd/8AZzmvf4dnyYqML2vfW3/Tus9tbb/zSv5WsfN8Twc8HKa3S+795h189v5V89z+pkDHFffv41LvfpbZW7v8l87n5mlbQKoAoAKACgAoA//S/v4oAKACgAoAafvL+P8AKgCpqP8Ax4XoH/Ppcfh+6OP5+v54rOp0+f6GlP4k/wC8vxv/AJdvuP43/wBq5Sn7R/xgVl2/8VbJ8nb/AI8LLp09+Md+2K/h/if/AJKHM/8AuT/9QcOf3Jwf/wAk9ln/AHO/+p2KPnyvB+zV/wC3PzPoI/xIf9vf+khVAFADduXX/PT8vUd/yxVU17TE0V39p5bU3/kYYt3wc5bW5fPerFf3f/Sfu3l01vO9uY5Im2tHxj+fqB29MfiBX9JYCj7HDUZLS/tPP/l5Nd137P5H894+opYycW7pcuu29KD6J327r53P0B/Zk/bq+Ivwaks/D17ff2t4ZZ40azuY/Ml/65RSy+d5I6/6jHt6t9BDiHF4BN1ndaX0p+dvgoz/AJ10Pmq/DOExyUaK1+y/3j7X0niafSDXTfytL9jvDf7d/g/UrOK61TQ5NLWWLKvJexyeZjphYojjr0AAPpW1PxGy9Nxrx1TvfmrrV3f2MF6Lf5rQ8uXhzmLbdGV07fZw+21vexkdN9391/e5Txr+3zpOnWs0WheH5FmkUrbX8l5bSxxk/wCqlNsYWJ/AgZx1428GO8TMFRj7LCq1R6J3rOyTjJ6VMvcXeMpLX71sdmA8M8TzKWMd0tFpTX8//PrH30fLbTTVa3ly/mh8W/jn4x+KuoLc65qLzJC8nkww/wCjWfl/9e0X7nj1zk9wv8X5bnXEGZY6TqVZ3hpb3cOulKL0jRg94LofqmRZBhsqSVKGv+Op/wBPv5qtVP8AiP8Alt5393w8nJz/AJ/kP5fnXhPk6K77a/qfQtTjotl6fqJWK9+8V5f57WVtu7+RcV7O0vx79Nru1r9/uCqAKACgAoAKACgDmvGUqxeG9QONu5JF7D/ll9DnH4fXmvVypWxyfe/4Uanm/wAl8zyszdsHJ+n/AKdpny5X6pFJyV/Prbp/X9M/Pp/wX8v/AEoKQlLqnv5GtpeotYzfN/qW++n0/E/y+gPC0A49Gt/MNVmtZ599t91vv/X17+np+eaBGTQBNbzyWz+ZE21v88+2MfjQauHb8/1urfc7+VhssrzOZH6t/nj/ACcep60GQwAnpQAlABhTw33fp/8AXH8/rnNBcFd37frfzX5P5HGarZ/Zrksv+rk+7/0z/p7c/X1oCas79/0t5v8AJfMyqCDc0PyjOyPHu3LjP9B6cfyxQBmXkflXMif7XHf/AD0/zigCuXO3aSdv8v8ADt39uKAEoA6e5/f6RG4+Zok7f15/XP8AwE5+UA98/Y78UzeEvj38PdXg+Wa31iPYP+ukU0Xcj+X1zgCvRyuXJmEbab6b3/c1Ov8AX4Hl5xBTwEpenW//AC+pLsu3b77H9kWm3H2qw0+fvNaWsx/7aQxtnt1PPT8q/UX0l3v0+Xd9+yt5n5J0fqv1NOpEFABQAUAFAH//0/7+KACgAoAKACgCOSNZI2Rh95Np/L8e/fP55oA/CD9t3/gn14r1zxf4l+Kfw1s7XVD4m1H+1dWtnuIre4tJPK8oxWtr+986ERQ4PB9+gNfz5x14cSvGplS5m79lZ2waa/2jHJf8/d100veJ/Qnh94kUsqwayzEuzflLpUxmIb/d4Gr1rRX8T5LY/NB/2Q/jjG2w+C9XJXn5NPv/AP5Dyfyz/u1+WvgfiOMFGtTtHXXnwLvrfaOMWzt189T9Pp8d8Pyj7KtP3n5Y3u5bwwavol0+8Z/wyP8AG/8A6ErWf/AC9/8AkSnLgbiCnRVOng7qW/8AtGC1tK/XF6bspcd8PKDpQqa6fYxvfm64T1OF8d/Av4kfDuzj1DxN4b1LS7OT7lzc2d1Hb/8APKKLzZYooT2/yN1eZm3D+ZZRhOfGYOz7fWKD/wCXlJb0qs1tVj9lfPVnqZRxFl2ezeEp1Lp215K/RVavWhR/58v7S+e0vH4xmaNccD8fb26Y9fyxmuTKIwlXpUL+8vaaa6XhVnvZLbzfyOzNZyweDk3ony2e9rVad+j35uq+46Agrx071/Q9NypUqTX2faX26yff1/rQ/BKyVTFyrS20/wDTSh09BQ+xlf8Au/vP+/Z/nx6cehx827j7Oi6Pe3S+0ubuu/f77HPF+yrJ379P7n+KXf8A4f7P074J17+2NEt8yf6RZp5M3f8AoM/p9Gr80zjBzwNV1bWT63T+zSjtzyf2+0fn9n9Ay7FRrU1FvTXTv7030gu3f7zrN5wOZOf7/wDhxg/55614x6UIW6Wt03/VW+5/Kwyg0CgAoAKACgAoAKACgAoA87+Jl2INCjg+T9+/Y9f3XPY/57Gvo+HKLc01tr18q/369jws3qcsWr9um2tL77nz0Og+gr9HqJ8kY9r6fNPc+GT99y7289lbyv8A+Ax+e4tSSFABQBPb20l1KsUX3j/n1H9f1xQAXNtLaymGVdrL/n0GPzPpxigCCgDZ0a5ht7hlmXKzfJ/1z/PPbnp+ZIpp2d/6/J/l9w07ak2t2AtZFnhXEMn3Cmf3Xt/9YZ/DOFG7u/8AX5L8vvK9ra1/6+Vlb738jBHzFU/vP/nt2x6/lj5pSsrf1+b/AD+4yULa7/h/7dK/9b392/r2ghdPWRf3isn3/wDnn+n1/PGe9M1U7ab/AIf+2yv/AFvf3fPbrTPs9uko7fT/ABz+ZJ+tBBWsLj7PdRufu8J0x6/Tt6E/TmgB+pSwzXTSQfdP+fb+X0xQBQAJ4H+f8/560AOeJ4jhl2/5/wA+n44zQBKLqZYPs4b92O3qP6/n+VAHefCzVZNE8deHdUi37rXVbN02Z/56iL0/H+H9MV1YGSWISelr+f2J+St97+Vjmx0L4WWl9tO/7yHmrW9H8rn9uPhOUy+G9AkPSTQtIc8d5LKLt/8AX/Ov1Nf7vDvr93P/AMN0+4/G6sWq9Tzb09PPW+n+HtrudHVkBQAUAFABQB//1P7+KACgAoAKACgAoAhMahgxPrxjrxjsxxj/AIF+GaV4u7UbyXW7X4bbEcj9qqvN8uXf3eX/AII8fKFH1+X1/Htjr79O1E5Rs+fZ27rbySfl1XzuW7t3v66b/wCVhCdx2jofb8eny46f3ufbGGmylFcr9303182uq7/eCb3i7Po7fozw349/BnQPjf8ADzWPBeuQpI88PnafMY8mC8gilktTxxjzSD+OBtwQ3j51k+CzbDKni52jq1Plq62nSk9KdSk7fu4rXV22erPYyPN8fktf61Sqa680VGlq+WpT3lTqp29q/sJ9r3P5Ofjd8FfE3wX+IGpeFtds3Q2tzJFDN5f7u8t0/dfa7XnmHHv9Cea/lClw9PAcTex+zH00vl7l/wA/m95/zfdsf1yuIIZ5w/PELb3WmryvfG8v/Pmj/wA+uz8rHldftKVqNmr8nn/NP0X5v5H49GftozXbl6W6/wDA/q4VatOXNa69bW0t/X/BBR51e23S/fzsu3b7zq/CXiB/D2oxyH/j1m/dzJ0z/wBNT/k/U5wvjZtgY49ctr+f/gp7c8P5O56WXYx0Xa9rfO1+f+4779l8z6agngu4I7q2k82GZPk/zzj/AD06V+Z1VZpev6eb/P7j9AhUvu/+Bv5O9/VfOw+sU7q/9fkvy+82CmAUAFACkEdf8/j3oASgAoAKACgDw74p3vmXtnZI3yxJG7x9f6D+g54ZcEV95wzRThf9fPEfefF5/UcZpLz/ACo+S/N/I8or696zcfTp5X7q/wB/3nzktIqXr187dnb7vuCoEFABQBYtriS1lWWNtu32/wDr4/DB9+nygHXXccesaf8AaU2LNCn+fX1/wIxmgDiaAAcdP04pN2V/6/J/l9wG7NrBn09bR1zIv8eP8/Xr37UJ3V/6/Jfl94+Tms7X+ZggYGO/P+f4v6/0pg3fU7TSLmG+sprK4+8qe3P685z6/ieKaV3b+vzX5/eJq+hwmrW/7m4h+95R/Py/x56eo/DNIDz+gAoAfGSskbD++B/n8x/nFAG/roHlW8v+x6YHfjr7dh6DnINAHO0Adr8PJfJ8XeH2/uarafrLDjPp+be9bYR2xKfr/wCm5GOL/wB2fy/9OQP7f/CQH/CL+Gm9dC0n/wBIrX8+nXC+mK/VKbf1eK6Jf+3f1/SPxqu37ep6y/RefR/8NsdJWxkFABQAUAFAH//V/v4oAKACgAoAKACgAoAKACgBCMjH+f6fz/KgD40/as/ZP8L/ALQnhuSUQQWXjCxgzpepiPG+SP8A1UM/lxEyxD6AD6jFfP5rkqxeq6dNt/Z/9PYLTl7eh7+TZ5Wy58lGyoy30jbRVWtZ0aj+Ob2+9pH82Pxo+BPjX4PeIrjRfEmlzW8kb7IX8sxpcR/89IvSGbyfr2HJr4jF4GtgXZL8Y6/D3lUtbn/4Y/SsLmOFxMfaYZ/vnu7VOjlFfxIQj8EZdPxPCiCDg8H/AD/n9O1cukV5L5m8aclf/O39f13EoXJPd7eT6+ko9v8Ahtea+WWitottf6/E7zwl40utAkWKf/SNPY/OvaP9fw6+vPOa+fzbKsLioe5DX/HUXWl3qr+Xs/kevl+PoUJK/wCU30qdoy7/APD2933rTdc0rV41ksrhG3Jnye8f+fx9fZfgsRgY4KbtSutPt+S71Z/zdj6+lj8LVS1t20qab3+wr7dn8jX8pvf/AL4/+2VzxhQox/2b3L/45bP/AKeN95dFv1Ounyz/AIT/AAf/ALc12fX7za0jw5qWsSRxWdq8jzP5KbI9/wC8/wCefRvp0/P+HShSqV5L2kfaefNGHR/ytfyrd9OtzCvVwVPTFT1/w1vL/n2n3j1Xz94+5fhn+xB4/wDFdpb396bbw9Z3iIY21GzlkKY/5aD7NOR5R9Pzx1r9Dyzw6qYi3tVyrvo9/afy42L+yu/kna0vzzMvETLcNrgqfM1rZTrpv4NF7bBJLeer072SUh3xW/Yh8c+DNNk1SwuLbxDa2aSPdNptpJblU/56nzJf+WOe4b680Zp4eTw38Pp106+z/mxj/mfX7hZb4iZZidcbDlfZzrtx/iLX2OCae0f0vaTPgS8tJLGdoJF2svb/AD/n8hX524ywi5Zad+vn0b/mXX7j9JoyjUXNHp1163WzS7d38tCpWNN+9zPRP57Jrsvy+83Wr5f0+fdX+/7wq4NRT+Vl9/Wz79vuEOBCK0h+6ib/APv3jv8ATtj8Wz8udP3pPzt57J/4f0+ZlNWd+/6W83+S+Z8reK9QOoa/fTA/LG7oo/6Z/kev6Y4zwtfrGT0PqsHdWvbT0dX+9L+b/h/s/nuPqqVtfXTf4Dnq9NJSqcz6+faNt9L/APgMbed7nnBQ1bQAqfaSjbSy6a3/AEXfq38rFWj/AD/gFMkKALEVzNCjxxybVb7+z/8AX/8AW/3jwoBXoAcqM33Vz9OP54/n+VA07O/9fk/y+4bQDd3f+vyX5feFAhySPEMozK3bYMD+Y/8AZfXJ4FJxv/X6XV/v+8tTsrW/H/7R/n9xBOGeNwM7vz/wxx9ce/RWQefurI7K33lPP9PpxQAohk2eYF/dr19/1z29s+3BYAYuFZW/u/8A6v8APH4r/EAbWp3kU8FvHDs3RJ3+o7Y5/P6E5ywBiUAdf4F/5GzQf+wrY/8AoyGqo/FQ/wC4v5MxxH+5T/7d/wDTsT+4Hwl/yKfhn/sA6R/6brWv1qPw0f8AC/zZ+MVv94q/45/+2nUVoQFABQAUAFAH/9b+/igAoAKACgAoAKACgAoAKACgBm3IAI9e/T+Wc/X8qXM4vV3vbpb4dtv6+8F7qtHRffa2q3vt5r77HknxS+CngH4vaNNo/jHQ7a/jZMRXPl+XcRnjpLH++P8AP06CsMXhaWKS5o69dZa/DbVOFrKPRep1YDF1cvnzUne/lHtNfahP+d7I/HP42f8ABLXxHBfX2rfDfUIdYgkEkyWd15Vn9jjT/llD5nmeeecdF5PXgbfk8Vw7KMbx1vvqv7ttHWdtH2+/Rn2uG4pVSVpe7d2s7PVc2mmGSvp/N9/wn51eIP2WvjB4du7qHUPCOpKtr997azuryMbP+eXlRHn64+pyTXgVMsqQdk9t9F1tb/l7Lv0i/lufS0c4jUV+r2W3fr7J9uq+65wa/B/xqX8seG/EO7+4dDvz/wC0hnr6EfoK51RxNP4qej/vw6ejXfv95sq+G3X5VPyO28Pfs3/GPVHhl0XwvrarI+z99Z3Vn5X4yRDPrjH4jPy6LKni3rR1/wAf+VWNvh/4b7TlntDC7PRdLT6+fsJfzdL/ACPvz4Sf8E8/jbrv9n3vizUI/DmlXBjm3rLa3dxHHH0i+yn1+v064XfD8AYau1LE+4tdP3krbreGNjvyx+/pZ83l4rj58v8AsvXd6d49KuDf95br56H6v/Bz9lL4f/CVIbsRDW9cATztSuo/3csg6yi2z5Wc/wCy2B9BX1uV8MZVlrtRh7V9PexMLfxP5sRVT0m3rt57HxGP4lx+N5nVm7PRtRpX1UVdclCm18Cs09PLc+oliSJMIioP7iYixk+seR/46Qfbgr9EpwatBL8Wnv3jH+u20vn5P+WOvZytf562t6ffYjubaC7t5ILiNJIZkMTxsgKFJMRkZwvYnjBx2oai/jV0td392jju9PLfS1pC818r/r5+n3H4V/to/CaDwV8QZLjSLEJaa1HPrERjj8uKzgSTyjGDz17ZyO3Oa/njj/JoZfWXIrR1tq5fZwferJ/b6/j9n+gOA85lmVJe0fNJJJ2Sj7yeL5tFTja7he13bbvzfC9fANclC+3n39/td97b/cfpT9yptv59o/4Zd/8Ah/slIkxfEt+umaDeXAbazJ5Ken7yP/Pbj3r0MDh1N66Lov8AwPt5nm4qtyvRbbr/AMB8l37fefKTMZHMjfebr0/Dpn+f581+rqy0XT9fPqfnVZuU7dH5X2S6+7+nzDgH5jtHuP8AP9f5lcK2I9jrtb59v7rtv/e+VjphT91a9+nn/wBfBQyP91o2+mR7dsfyH44JbKOOU99WttLb/wDbse3X8L+9pLCPpt1/r/IbXZCcX0u3stv0d/m187nJOlNWt59E+3eUf67WXMUyAoAKACgDe0CeJJ2gkXBuPkTv/gPX/A4xVRV2kNqzt/X5v8/uINXsTaXO0f6t/uH/ADj+f5ZzRJWbQJXdv6/Nfn95kjGRnp/n6f59elSI624sba70pbi0Uq0B+f8A+vx/n0biqUb/ANfpdX+/7wbtqckRg49P8+/8/wA6kDj9Yt/Ln8wfL5g34PH8+fx/LruUAuWnOkTZX8ef17f56DqwBzVABQBv6baxNZ3E00e75PkA6/8AsvoeP1XAVgDX+H6RnxfoXmNtjXVbP/0bDn/H3PORjDVR+Kh/3F/JmOI/3Kf/AG7/AOnYn9vXhMj/AIRbw2o6LoWkjv0/s+39z/nIOcAt+tQXu0bbtSX3ab3f5K3mfjNe7xFRdqmnzi/JW6dWdRWhmFABQAUAFAH/1/7+KACgAoAKACgAoAKACgAoAKACgAoAQgHrQBXeBXDK6pIrfwOPz/vf57jGKAMM+E/D7TfaDoth5x/j2dvw/HoF+vG2gDaitYoY1jhjSGNeAiRj/wCsTn9PQ5IoAshQAv8As9OP/r9u3B/CgB1ABQAUAfnX+37oslz4J0fUbSF/tX9oWlg8yR5zbyzTfuu3Pcdceg5NfnPH+FdXLF/dv0tviMHbap2X9XP0Tw5xXscY4y76LsvY419FK2+1/vv7v4qXcH2e4mhx/q32D1/d/l/L8Bn5f59i7VE9uW+vrHtZfm/kf0Eleup2te/nf3Lf3bf+A/da8q1EX7KLhe1/ns7/AKlN21PIfipqmBa6QjfNs3v7fvB+Pb1J7Y6FfsuFsLJz5mtH1vvZYhd3+KXzPlc8qqa5Vpb8b+yf4WPFGbYm4/dT8f8AD+f5Zr63EVI4HLpTk7bdG/8Al/FdIy/n/lfys2fNYPDOrbALrfT0562/Ou38337GVdx3gzNLDNHC33H8sRx9+v5jv+C4+b8EzzM6mYOajqvd/lX/AD57wg94dv0P3PI8roYPArDzdm720k/+X1ae6qz6SXQpDPWN8D/P8vevBpVfqs4zw/S9/ua+2n/NLp9x7M4N/uazun12/vfYTvrbqvncvQXrqdsg3f5x7/5/u5yv32T8ZfVYqGIV7Xtr51X9jCS/mj9r79o/FZ1wdTqfvcJrKXT3tbeyjvVxSS0Uun36Gmjq43Kcj/P+f/1iv1jA4qjio82ElzU+vuyVtZpa1IxfxRl9lfP3WflmNwNfLXyOGn+KD/kfSc761O46uyKhWk4w+NWvu91fd8q2T+z91ry4nCPLzv8ArW3QKACgB6MY2VlyCv8AT8+3qPzxQB0d/qVpeadGpU/aI/r7e4/p7HgFgDmaSjb+v0u7ff8AcB1Ph25jCzWkjDa3+Tg8df8AOcYq1K39frZ2+77gOeu1CXMyr0DnB/mO3Q+3PtipAwtYg821yFP7s/5zwfyyPfOKAMsXUKaX5Y/1zJs+n+T6AYPHOQaSjb+v0u7ff9wGLDDJO+yNct7/AP6z/T6UwEkieF9jjay/54/w4/qwB0LzRw6PGqsm5v4PfHryOnr9RjpQB1nwb0f+3/iL4V0g4/0zVbNNn/LP93L5v/tGuzLIXrRe2/n9ip/ejb+tre9xY+ahlsovpb/1Ig9tbb/zS+Wx/bR4Yh8jw/ocf/PHRdKh/wC/djCM9vU+vXORjFfqULRpRvo9W+v2pJfn3++5+Pzd5Pzt+Ct/X/AN+qICgAoAKACgD//Q/v4oAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKAPlz9rPT4rz4P61I+wS2H+mQvsz+8ghmMQxyODwOnr2xXzPFVFVsBWT0t7N29a2Hb6rt3+8+m4VrewzSnFdVL8MNiHtZ3tffmXp0P569SE32hpJhtkn/AH2cdN4/DOT9OnGfvN/L0YcyrS25fZ69r6bdT+mlP93CV7/Fr/29YzS4hUysPljTf+cPXFNLnrqHr1/uX7K23d/I0nL925enn9q3Zfl958seKNUbVtbvLv8A5Z+d+4zwPL8rn+I8fgPYda/VMuorB0FJKz187e/UX80r/F/w/wBn88zCvz1XHvbpv7sH8rHH6i5SLb/e/Q/59/bivkuOMyng6ToJ2T8lp72En1pTv8Xc+q4Sy76/X+trW3y3hiaX/PyN/g/kXzvzH1P4e0jTNV8JafFe2cMysmzfJH+8/wBVD7DnnoCfwr4bC4ejHCe3mrt9Pe6VJQ3Un3X2Y/8Ab28fpsyqVqeI5YaJf4XvCm+qfft9x5v4q+E7RK194fbdtG97b/WSRx+3+Tnp2yvDjMs5P4H5/wCD+epruz1sFnPJ+7xjvJ9LW255b0qLWzj1+7U8UlgmtpWt7mF4Zo/ldHP+RXgukqbtiFa3W/f/AAeqPeoues6Xwv8Awra63lzPe/2fvveLYpmgPB+Xj5Ov6jHT8R+WK9zJc8xmTV40lO9PW/u0lb3Kslr7Ku/iq9F/9r5GbZLQzKg6yhd6a80/56cetSn/AM+/5fv3N1H3qrBSpb+vp1x/k8ZxX7tl2Nhi6Cq4Z/vHe+j6TqR/5eRjH4Yy+yvm9T8RzLBThXlRj05e3WFOfWb7/wA33aIWvSPPCgAoAdsYDOCBQbqNv6/S7t9/3DaDAUEqcq23/c6HI9+v6fphgCe1h8+aOJm27n+//kD1z39uuaAJdY042TNbltyyJ19f/QeDyf14+6wB5dMuyWRP7p/n/n1/Bf4gDb0SMbpp/wCGNP8APTg8/wC0vv60nK39frZ2+77gMm7mMtxI3Rf8+/8ALPrkfxMCvk/dz8ufT9f/AK340AfYX7Dng/8A4TL9of4d6Q0f7u51jZv/AOeXl2s3X2/cevX0r1Mnp/7RFetn/wBuVel3+fnrsePxBL2eBetlu3btVova779/uP7BbO3+y2VtbDpb29tCP+2cQj/oPX+q/pc9Kdtle3feSf5vz/SP5RJqyk9NbN99rafOxoUxBQAUAFABQB//0f7+KACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgDzX4q6JbeIPAHinTbiPzPO0e9EQ7iTyjjH16Hg/h0by80pueU1odf3d1fb/aab/E78umqWKoybv/E5u/8ADqJbJd10XfXXm/my8boIte1C1Vf+PGaSz+slvL5Xt/I/Xiv5ZzOk6eIqU+3L1/uU33dt+/3H9U4OoqmGoTW69r0/6eSW3Xb5fM8g8b6r/ZWhzBGXzLj5EH07Yzg8e+OevQ12ZJQcqy6rW/T7FXzfXs/uObM6qhg5U29dLO3/AE9pyfV9+r+4+Za/TZK1KK9f/Sj4RNuDivL5637K33v5XMS/cl2UfdVNn+e/6kfTALfhPGOK+tYmNn/Nptf93hf7sbW5f+G+1+08HYaWHwclJdrPTT97iuzffv8AdqfYXg//AJFfTvr/AO0Yq3wS/wBkin59f+ns+p5+JlbGT/7d/wDTUetnb7vuLOu69Y+HrGS9vJE+X7if89PT2/T8eu3WtVp4ajzJ2fo9PfS6p783b7icDhnipKPe+vym9uaP8v8AMu+ux8oeI9em8U6obwWqW/8AcRI44/8A0UDz26Y+ma+Xw+Hr5xX5YQ09YfyN9Z0nvSe7+8+nUqGSR53L8JvrbpCr/wA/e33WKUFnFH8z5Zv8/Ufnn/gXIr9UyLg2GWyUlvr3XSst3i6n/Pz+X7r3PzfOOK5Y2LX2X6dHS6/V01rDt95cx2HH4dPw5/z6da+9dGMIqK8/zvs2r79/vPiJWrSc35flb9AqiAoAKAOzhSHUdJZAqK0P9zn+oH17fTGVAONZSpwetKKskjSb2XYSmQnbUlhJjlhK87Xj/wA9euf97+tJKyt/X5v8/uHFe7JLy6+fc6rxCgltbOZf7kf6/wAvqWP4421T9b+ZnFe9JLy6+Xc8Z1SMx3cg/hb/AD/T9OOppFDbW/ktYZIkX5W9P/1H6ds+vSgCh/OgAoA/W/8A4JM/D+58TfF2bxRHHth8Hpb37s/P7uSWe09s5Pt6cD+H6bhmn7q/L54jrzf+2+XmfKcUVl9V9l1d/V+/h5admf0z7cbfbPt19sn+f5Zr7q2re17adred3f7l8z85Ssrf1+b/AD+4dQMKACgAoAKAP//S/v4oAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKAMPWdPXVtJ1HTGO37day2xf08xD/AD/Dp6DDFSnz0XTto0v+3veUu91Z9m/ndCVRxp05X1tLp8nptqvv6H83Hxm0CLw9448SaWPk+y+IdQTL/wDPOOWc+b9PxP4dW/lXiWmoZvOHfltpfbDYd78y7/3fmf1VkNV1cmoVOv7y/l/tVaPZX27ffY+GviPrS6jq32WE/ubX+5/np/nnOF+k4ewicea2q8+7rLuvyfyPEzrFyWK9itn8/wDl3SlvyL8H99jzYnAz/n+v8vzr3sVLlfL26X3+F78rta/96/lY8zDw5q3J38/7je5zs77vOb8ev587R39jj9K/mzHV5V60W9b3tstoQ7RX8v8Ad+ep/QWXUvYYdpf5/bqdLvv3+6x9j+DnMXhSylnXy41Tf9I/KiGen+P0GPm+nwlT9z/Wvvy/uu1v+3r+R8djYp4mXfTX/uHDpdfn9584ePPEk/iLWZI1ZxZ2r7IUx/ief0+p/h+frzqVcTDDt6S5ui6U1Pp6H02HoQo0JVo7q193vOUerd9+y+ehhwQLCn3fmZP8jr9ev5d6/aeHcioZdho4iUbt82vNPpUrw2Vap/P2fy+z+RcQ5ticfiHRi9FbpDrChLrTp/yfzffsT19So1H/AFH8rq/3/efOSjB7br1/NtW+5/IKp3j8W630/RN9+/3EW5b2Wva/9dwoGFABQB0egXkNu00UzbY5El/9FfTjj0Ofp/EAYVwE8+Qx/NHv+Tjr/np1/Kk3ZX/r8n+X3Fxjf5f1vdW+5/I19J063v1m3ttaJPkTt9OvP6e4PFNe9t1+RLVnb+vzf5/cY8qeTK6f3D26Y/yCP5damUuW3n52/wDbZf13v7usPhXz/M1LjVTPp8dmVxhPv8/49uey/gfuuMr6rdfP9Ff7vvM4fEvn+R59ryqHjYLt/g/T69OB2/LHzMk5+gCxbW73UqxR/eb/ADx1/l/QMGns/P8AD/7oWJbOWG7+z/eb/nmgP/6un1/DOFA9n5/h/wDdD+jn/gkd4EXTPhxrvjh4PszazNcaN5Pl7AP7Kvoj7Y/1vPX6gcV91w7SShp9/bWt0ur39fvPzni2o1jFSWi++/7rDS39X/VmfscG43f/AF/b0H8vzr6Y+RFoAKACgAoAKAP/0/7+KACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgCJlGNw6fT+pPr7D/4rP2a9n7G9+bbp8Mubz/P7xp2TXe34fJ/mvmfzp/tpQXPhj4h+ML++2RtJ5lzZp/0zkmm8vtn/ANB9exFfgPF+XznnCodHfXTphcLPb2l+n8//AMif0BwhjUsgnST192+n/Ubipfy/lL/I/Ka5na5uLids/vH8zp+HbPTP/wCrGK93Dw+r4JUbWbvdb7VXLu7fF3+6xxuXs6cFbbm0v3l3s7791bzuU7lwkLcbR6Dr/n+f4187xJWjhMtV5Wb6WvtiKHXll/N1/H7P0XD2FliMyjiPsq/Zb0K8Nrp7x7P5XMzT7VLu4jgk+7N8n9PX09uOnOQa/AFenRhh5brmuvWfPum+/fy0P3CEVGFOmndrm/F825+mvxE+FNn4O/ZY8M/ECwvPMutcm1DTXV/+Xb+z4rP/AFXr/rh2/PNfruaZHDDcKU689FU5+rd+TMqcOlV2+L+XXytc/Hcoz2eN4lxeVx1lH2HZb4CriOtFLaHWa8r35T8zLNN0zk/Mq/5A9vTofU44DfM8GZZ7erGta3LfrfeOKh/z8j2/l+615fX8YZh9UwkKL6819L/8vMLL+R/zd/usa9fuFR+1pKj2vfTvJS3+R+P7YuFZ9eb8KXL3Vvud/KwUjMKACgAoAKACgAoA3vDs3l36p/DJ8h/z27jp24xmgCvrUPk30n+1zn/IH+egFBKhbXf8P/bpX/re/u5NBaTe352/r+u5z+upmKNgvIfrjP4j059vyzQI5egDpdEiEaXFy4wqp8n+cfhnPPYdTUTja72a369vNW+5/KxVOV/n59r/AN1X/wDJfmWvDmm3uv8AiG3tbH5ry4mjS2T/AJ6SdIosc9fqRz2IzVKLqLRa+u33pdu33ibVJ8z2fW2/TZN2tfvr5WP7Ev2UvhzD8M/gp4P0JLVbee5s7fVbwJGI8XOoWtpLLxkn/W5/i/A8Cv1bL6XsaTT6fjdzdt359/lZo/G8dW9pUWt0rWW1m+VN9Xt/wLas+l66ElzyfXTr5djiCrAKACgAoAKAP//U/v4oAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKAI1yeM4x7etS2nCFRf3vnrbzt/4DL5XuG0pR7W6W3V+7/P7rn8+3/BVqMW3xG0+O1j8oSaJp7zbeI5DLFN22/Xpge4yRX55xRg4vMI4p6Xv3e1DD0+k1+X32Z+l8IY2Sws6XRcl+t/3mJl/Ira9pP5Wsfj5XjP8Aea722W2++vy/q59Qo+1c1bbl69/+3Y9v+G+1lX8oO2Mfw/l+GP8A636Yb8d47zSU19XjLbyWt/qc+tJf+lffoj9U4OwUVl88Q/i93v8A8/sVD+a2393/ADJtHyNQtM9fMH9fpn/PXrX57WarVMTJbQ9jZ/4opbNrqu/3n6HQT5lN7O+vya2P1i/aNvXs/wBi74H2ke/bf+J/Fav/ANc0sNOH4ZI9frjFftPGFSb4JyyMZfF9d1sumbYV9f6/A/CuDqcKXiBjqstUvqtt+uS4qPT1/rU/JywZVeRP09v1/wAO3GAa+c4CxSXud/L/ALDH2d/vXzPr+OsO8RRjUWy5vxlg1/PH+XtL5fa0K/XJfu7ytbz3v0/U/LKjvWhT6rmv1+yn5X/8Cj89goEFABQAUAFABQBIkUsp2xJub15468d/Q9s/XFADkaW3m3J8sqfp/L17fkelADp7mW5fzJW3MOn+ef64/wBrrQaOfb7/APgcv/t3n5GxZaVHdWM1wZP3i/c/zuB9OxHtQZt21OL1e3eeOGFB83nbP5/l9MHPqMUAcrd2j2kgjb5ucceg/Ef19hQBMuoSrafZRs2t7Af14HfJH4EAhqT5oXtt593/AIY/12+1b9ye23S/dd7Pv2+4+3f2BfhFL8Ufjd4ZjmsZptM0O/s9YvJE/dx/Zo5fKMXTH48fQ5+X1clw6rVNf692r/eV9v7tvO54WeYv6tC6+f30v7sv5v8Ah/s/1t2FpFZ2dtaQLshs7eKzhTt5dvH5Ufp2+v6k1+kOXs7JL+lZr+bvff794/lNRXlv+u6/7d2v/wAN8UrytnP4f5zgZ/L86YDqACgAoAKACgD/1f7+KACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgArP/l5/X8oH4m/8FavC7/2Z4P8RxQbmmvDYzT/APTOCxz6Z4PufwxXy/FCcqV0ur6950PT8vuPteD58lZp9FH/ANIxPr+enn9r8H5H8pWf+7n/AA9/5/nivzrH4qngsHU59Ix5LfE96sL7Qm95rp+p+n5VgPruKjQW2v8A6bqT/nh/J3OfzvZnIxu/p/8AqH0r+dcRiPbY2pmD+Jclum9KNB6qNtl/z6/NyP3vAYZUMNHCrSSv571J1N7vo+j+6xp6UwS/t2PyhXzj+nb+f5cVzVKftaVGlsoe0uu3NLm3ur7d/vOpPkprCv7F7/8Ab0vab62/8Cl8tj9eP2gNKkvP2H/hJeNG+7Ttd8Ty/wCr6GSx0+KLjPv1/DHev3fimlKvwDTrRV/Z8/ZX585w0OrX8vZ/K6PwPhSvGnxtjKEnZVFhuXd25MqxU3snvddV87M/HY7lO5fl+ft6/wAh+AOevHRvw3DyeDmq2Ed0r+W6lD/l5GX80vsv5e6z91qYaOKp+yqdemutpKW8WrW5V1+804L1X/dyZUr+H49P/ZT9RnLfrXD3F1PEQ9ljpcvL5N35nWl/y6w6/lh1fy1PzDiDhGWFqe2pe8n6LaNGP2sQ/wCZ9F8y7X6HB0J29i7720mr9/j7Wf8ATPgpUJYT93WVu+qf97aLn/Mvtf5BWt3C19vv/H1fX9DFJUffhu/n5bP1f9IKgAoAKACgDoPDzgXu35Pmj65/nwc/n27UAUtYjCX0yj16f/X4/l+XFAGZQB2WjAppd05+6f5+V+P+fTPygHFXMkcSmZudvH+fX8cevPC0G0/hfy/M4K5mM8rSHp9Mfrlv5/nn5QxGQQvPNHDGuWZ9mxP/ANn/AA68gcGmnLm9mlr2v5c27Lp0+Sk6rW1uveTj+p/Tr/wS8+AX/Cv/AIZHx9q9qIdY8TJG9hvj/ef2PPDDNEME5i/e88H6njNffZHgPqsFUtq79b31rR/mn/N2j+p+YcQY76zWdJa8tm3t9mjP+SL+z0cvldc36ugADA/z/P8An7c4r6E+bFoAKACgAoAKACgD/9b+/igAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKlr3ovvf8gPy/wD+Co+h3Or/AAg8KTwcQ6f4h1C5vPaD+y/K9s//AF++M189xJG9FL4nr5bzoN9/67bH1HCtRqvK2lrab6cmJtr6ev6R/mh1SXEskCY+/IO3f8vYc/mM7q/mbjnNal1l0Hecb8zsuv1SutHSS2vtUfnbSJ/TXBmV3j9btt593iqf86/9Jfy3MwDAA/z/ADP8/wAq/OuTmScfhhfm135tt9VZ3/qx+jWlze0/Ty5di1Z/8fEf1onP2VClW35/aa7fDPk25Zd/+Hv7o4uSxmI25Pq9l/i9w/pFk+HI+JH7AJ0qC1NxqltpbTaZ+7zJFITp4mwME58mDrkdO9f1ZDLI4zgOjQkv4jqd/sZxz7qUf5e8fnqj+SJZnPL+NvrMNHKK1tF7ZXOns4T6TaenZ9D+cPWbFtN1S+sCfmt5pIeR/wA8/wATz/L0bnd/KfI8PelT2fl/29s5Stu/tO/lax/WyUq656ennpp02lvszNpKlOh+9npf0f8Ad6c3dfZ+/eKk1iH7Orrbpqt/e3i1/Kuv33LEN20JCsN0Y/zjp3+v5/w/Z5HxPXwdS1aV/Llgvs1esaM/5l0Pjc74VjmUPa01a3TXq6UftYiH8j6GrHIsi7l6f5+v8/zr9gwGYrNaacdN+u3vT70oXv7LufleOwTy+bpT6Wv06Ql0nV/n6P7h9d554UAFABQBpaXcpaXccsg+X3/yff8A+tnNAC6tcRXV2zxfdCR/57Zyf8cHBFAGZQNK+hbjvriOBrZW/dv9/n9e/Xp29ecUA1bQ5XXZSiRxjld/p+Xfj8m9ec4oNZ/C/l+ZzBjZQu5ewx/j3/z1xwKDE+zf2L/gFqPxq+Kei2aWzyaXp9zHealMkfmW8dvZyxXUtrdD/ptD9ffoAvr5Jg1ipqq9Wul7bqrH+aP8v/DX97yM6zB4Sk6cdNrdftUpdaU/5u5/XT4Z8P6b4X0HS/D2kW6W2maTaR2dnDFH5SR28f8AqgIx049mI74Bw36NSVoKC6X36XbfXvf+rn5TVbnUlUe8rduiSs7aXVvLfyvLoKsgKACgAoAKACgAoA//1/7+KACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgBn3dvtu7f0yfX1/KoprmjF211tr5vyXbt94Xsn266X/r+ux8Rf8FAdHOp/s4eNL8MkbaHpl1fo7/wf6mPPT69fpnvXzXFWI9jkWKtv+4/9TMN5Pv2+6x9PwhBVc4wyen8f8MNib9vJWs/U/k2n8z7RMZfvb5Bz0wffPsPz/h6N/FtWrzXd/wANtulne9u6t53P7aw9Jxjt6a7asgrBO6v/AF+S/L7zVfFL5fkOjOxlP931+nvn+v41Vr1MOv8Ar7/6SU3bD3/r4z+wH9lvTbe7/Z48I6a0f+j32jCCZPe40u1ye/r79e+K/tThSC/snD6da3W//MRX6Xj+f3ac38P8US/4WsfJ6tLC+X/MLQXZ910+6x/OB+2j8G7n4SfF3xDpiW/k6VLeST2D+X/x+RXP72TyuhHkifPH6/xfy3xzkLyrOJqekI8vK998LhL6KrUe9RLX1VtT+qeAM4o5xkMKEZe9h1e1pf8AL/F4yp/z7hHal/NPya+18d18fBKrhZ1pP31y8qt3qcj1Ta2XVLyvqfcS92MaVrOrzW1v/DfN2f5r52Chw/du3lbX+93u7/credyIaNKW3Tr3vqtf68mPilaBtyr8uPuemf179s9O2c16eS51Uy+o2l27a+7V70qv8/ZHl5nk9PGrme/Xdf8APtbqrH+X+VfO9zbikWZS6n3x/Xqf5n8M/L+7ZZm1PN48y3Xr3qLrSpf8+uzPxPNMtqZXJQf36a6U30q1LW9p/wANcdXscvvcv6eV9ub/ANu/yPJSbjzW09fO3Zfl94VIBQAUAB459P8APv8Ay/OgDrLO1gXRZppI/mY/f/z7D1/PNW4Ppr+H/t0v67/ZmHwr5/mcnUFGVc2f2m5jlk/1MPp/kY+nP6E1GtJ+b/rzvv8A3bf3r+7vTsv3f3de8tvd/wDSvutaWhoPh/UfG/iLTfDugWL39xcXMdsiQx/89PJjx0/Ttnr2renRliNf19el1/L3+85sRUjl/wC9lpf1e1o9E7fH2+6zP6uP2Jv2arP9n/4a20N9aW3/AAleuw2d5rFz9n8uWCSOKaERY58r90R0xzjJOcV+jZRg/qdNrVbbPf3qr35pW+Ls7/I/Kc0x6xkkovRXvo10p94x6x/yte0vtoKNvB69/ofT5f5/n/F6m85N76eXTt/X4njJWSX9fm/z+4fVDCgAoAKACgAoAKAP/9D+/igAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAZ97b77u/9cD09PzqINQjHW29uvULXT7ddbf1/Xc+aP2utAHiP9nb4paa3STw5cn/AMjWnT8v84FeDxJhVickxUW9/Yad/wDbKPnG1uW++vl9r3uGMQ8Nm+Fs7fx1ffbC1/KW7n3++3u/yEeKbRbPXr63XKrE+z/v10znOfwC/jxX8PtJ7/nb+v67n9005WjZb/lq/J3+9fOxgUwp+9J+duvl3su3b7y3ZgMzEru8n94//XP/AMdwB9fxGPmuhG88P/3F/J9Lq/3/AHk1/doenn/fXWz79vuP7F/2WZYrj4G+Amh+5/Y2np9MaZZfXs2OnbvX9ucLxtlOHX/X57dsRiP7z/P5P7X8McSybznHf9yttf8AqGw6/l8/Ltra8fif/gpp8BG8ZeBrf4jaLabtU8O/6NdmP/lpb3kn72Uxf9MYYecn/vrmvgfFnh+OOyqGJgrVYc3O9X8WJy2EdHXpx+GD2Xre1z7/AMKc+qYTO3lrfu4jWO17UcJmFZ/8upN+9Pfnj/29tH+biaLyJZI/4V/H/P8A+rHU1/LcFL20Un7sb8y005oaa3T37J+dtD+qrqdSU3/zD2/8qxt/d7fy/dvJlWn7PRv5d/6uVU5Zt8vS3Vvfyah27/oFOap72+d5afIU4VFG693z0d9V3a/J/ImtZzBLj+Funfr+P1/+x4FfTcM5vVwNeFFy35ukekMRL/n1P+fufM8SZPDHUZVluuXv1nQj1qw/k7G1X7nTqc1CNV6qV9e9puO1lbbt95+JuPLXlR9Pn7nN2VrX7u/lYK2MQoA07HTpb8S7GC+Wn4/yH17/AF4FAGeyBZGRvurJs/w4+v1/DOKAOl1O/t/sENnbf8D4/Xqf0H1xlRVOTel/wJh8K+f5nLE4BP8An+R/l+VQ2lv+V/6/rsUY9tDqmt38el6fDNcNNNsSGFPMkl/65eV6jPZv1p019Yltfz+T6WXbu/kVKVourf8ADz5f5v8A23/M/oZ/4J7/ALEsXgfTtP8Aih8RNLT+3pk87RtNmj8z7Gkv/LWXrzNDNgcfuO2cV93lOWQ5E5PTvqutTtVd38126tn53nucyrydOL10totLqk72dNX+Hv8AN/CfsagVVAVdqjt2/M8/p9M4r6TmV7X1/p/1/wAFnyO35/8AD7Wtb/K+4qrtz7+2P/Zm/wA+uflG7K/9fk/y+4B1MAoAKACgAoAKACgD/9H+/igAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAYFxtOPXPP5VCdoX/AK39H+X3Aea/FvTF1v4ceL9JfZtvdGmh+bp80sRyenHYYP4jPy8eZRc8LdK17fK1Smvne3aJ2Zd+6rwd9I3W3eFTfr/X2dpfxl+O8/8ACX+Ik5/0fWNRtk2Y/wCXe5lj9v5fgOTX8KTp+zzCpG1vg63v+4T/AF/qx/eWEnz5bhX/ANf/AP1Il0srbd38jkKxpLk9o/8AB5d/8Vvx+R2faq/9ufkbnh+1F3dTQbd3mQ7MfqOef6e2eavDq2KwS/7Cf/TbOTFPlwMkvLz/AOX0fJ337r5n9h/7MVgNN+CngS2UbQuk6e+Dz/rLCz9/f/a/rX905UrYTBryxP8A6cq+b/P7j+Ec4bePm79ILtr7KPTzX5eZ6x4y8NWfi3wtr3h68ghuIdU0q/slScfu/MuLaWGKTHGPKMp5xjPPGfl66tCNajWw383s09LbSU/5u6X21tre/u8lCo6NajVv/CdSyt8PMuVrqneLa206Xsfx4/tE/C+9+FHxT8WeEbqMCPR9VuLOBx/q5I4/K/1R2gfp+ea/ifibKXlWa4ijJaT9j135cNQk/wDl5UtZ1OvL+No/3Bwvm1PPcow+MhK6pe1atzf8vMTiKfWlSv8Awb7P8UeFV4B9EFADWGRx17Hofz/z+tZN/V4Jfy3/ABfo/wCbuvmFOXsuan6affLez79vLQ17OXzIsH7y/wAufr39x9Oa/dOEMwhi8GqF9dej/wCfuKn/ACJfZ7/efivE+XSwWPli/sy5eq6UcPT29pJ7z/l+/eNuvsT5EKAOu0HZFZ3UjPtb/OPzxz0x34GGAOVlbdLI3+3/AIf56t9eaAJ4LGe4R5Io/lXv/k/19/lJ2s1onHvbr8+zv96+ZpUn7N+z2v13297ay7938rF7QvDWueK9Rh0XQdPudQ1C7fyUhtreWST/AJ5f6qLPOfp6YOAauhQlUd3v6279vT+rmVStHBr2j0T69unSMt+b+V/Lc/ej9h7/AIJ9ad4FTSfiR8TrGK68Q/urzR9HuI4pI9PkP7yG7lP7uaGYZMHkd+vy9W+zyrJ1Qd3tH9fa9qsu/b7/ALP5/m2dLEwcVvpbyu6d2v3UU/h63/SX7DQwpbRJFGipHGkaJGvARE6Dp68dD6819U4x5bK9tfK+q03la3r9/wBn5F6v1/pLp6bfcWaQgoAKACgAoAKACgAoAKAP/9L+/igAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoATIxnt9P6VDVoW/rcDk/GsBuPC2vQj+PTZI/8/n7465OcLFWKlhmm+u3f34Fxly693+X333/u/PY/i9+J2m/2V4v8QW38Q8T+IH6f9RSf88fT86/hnN4Klmc42tflt1v/ALPSfy3/AKsf3XlNRyy3CJ/9P/8A0/V8n+a+Z59XmN2hN/4fzPdmuX2jtr7l9fTyfft9x3nw5gjn8SWsbLuEjxps/wAcf4H2zgiujCK+Mwi/7CP/AE1LzX5/ecOYWjgZ9ly+f/L6B/ZX8KNPj0v4c+CbWH7o8MaHJ+L6ZaZ579uy+mOBX905aksJhVsrVr/+DKj89rrp8n9r+DswkqmOm9bLR/8AbtOKbWnpp736HopII2r+X69T+fb+jdbTp1Yy6O/N/wCA2X59DiaU4vtprt17XW9muvpqfz5f8FX/AIaR2fjnRfGFlAkVvfaRLLfzJH/rL17rkHjqIR6L7Zx8382+MuW06GLp42muXn5+rfw08rpdasr7v7Me7vdOP9I+DGY1HhKmXSlfm5dkle1XNK+6p6W85r53PxfByAf8/wAh/L86/FD94FoAKah9ZvZWatp2/FXvy9/vsD1h7R7/AHdeXf3v/SfvveM9m+2bb/C3yY9/68/X0HUlfpODcynhcc6F7JW00d70cVP/AJ9ye8v5vv2j8vxbgY4zBKVte93p++wy25qad1H/AIc2a/ez8TlFJXWlvn+qt9z+VgoMyVZZI02q21X/ALnbuR/9c5/DOKAIwMnH/wBfp+I/n+dBcY31e35/irfc/lc7eNTp+kqgXbJcdCP164wf/r8nGGqSs2iEvb/vH0/X3f8A20/bf/gmP+z5ZRaNdfFTxFpNtJNI8a6D9st/3n2e5tf+PqLP/PGaDGSBj8Pm+vyLBQqxcpK3zfesuko72X/A15vhuJMzlrRjdW62vb+BN3vTfS/2pfLY/ZxSFJ59uh/+JH8z/Wvr0ktF/X5/122Ph0mtW7/K39bdvuuSg55qXG/X5W2/8mj/AF2+0wqgCgAoAKACgAoAKACgAoA//9P+/igAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKAMTXVD6RqSFcr9jk+T+vHBz+mMmpn8L+X5gfxuftBRpH8Q/ESIu1f7f1f8A9KpvfPPbj8uN38O8Rf8AI2xP/cH/ANRqB/dXDX/Igwv/AHH/APU2ueG14cf4cP8At7/0o96X8Of/AG7/AOlHqfwXgFx8SvBsMkfmW9xr1vbTf9cz35Ix19T07fer1OH6Dr5jgKe7j9a0vtehWlvdXvbvp53PA4mqqhw3UjL+5fT/AKj6D3X+I/sw8HIsPhbw5An+rh8P6KqfT+z4P5DGff6Cv7kw65cJCH8sX1vvUv2X5v5WP4fxM1OrUfVyn+MlboraLu/kdWEwc/p/9fd/7L/jWkI/u1H18/tX7r8/vOY/HX/grpaQ/wDCr/Cl3924XxFp8O//AKZnzT5Z4/1RJ9ffjkV+O+L0L5QqfV3/AAxWWPfW2n9LY/ZvB6cv7Sl5W6d8NmT1XTfvqrO0b+9/O64wzD3/AM9z/P8AKv5lP6iG0AFS4p+vf/gXX5/eCu+mr6X/AFEztZWHXOPw9eh6cdxx9K0jLlv5+dv/AG2X9d7+7jVpOT/Nfd1u/wAl8zoImLxqx+99z/JyeufQY98V/ROX4lYjLYSjt73T/p/NbtL+Xt95/PeYYeWGxfvLV7q//TuHZz/m7C16sv8Al3/2+cT0rKXe/T+5bu7/AHL5hQIUHBz6f59/5fnQB9Nfs8/CXxN8bviB4f0DT7bdbpeRzTfusR/Y7byZbr/yDx/PrXXl2FnjayklvfS6X2ai6zh/J3/NHn5liI4Kk1fRW/8ASqb6xl/P/wAP9n+sDwB4L0j4f+ENE8I6JbxW+n6LYR2UIRNvEWeXx3ycckY4G09a/TcPS+rUklur/jJ+cu/f77Pl/JsXV+s1Zy3TstVfZRWyS35b23em1mo9rXQYBQAUAFABQAUAFABQAUAFABQB/9T+/igAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKAMfWzt0y/I720n+e/p6fnj5pn8L+X5gfxu/tDNu+I/iP/sO6r+tzN7D+Zr+HeIv+Rtif+4P/qNQP7q4a/5EGF/7j/8AqbXPCa8OP8OH/b3/AKUe9L+HP/t3/wBKPsP9iHwnF4w+O/gbTrhd0MGvWl1c4/59xL5WO56d9rD6da+x8PaCxHE+HpNbe0UdX9rL8a31Xbv9+h8J4h4j6vw/VstIpNL/ALnME+z79vuP63LO1jtLe2tYTlLe2gtox/sW8YjHP5/5Ff2ZZxjUh0jy/K7vv167X/WP8ZJufNJq+2vrZbabbdfwuaBOBn/639D/AC/LNDl76j6/PS/ZWt6u/lYaV9D8PP8AgrZ42017Xwz4EeRGm+zprOxP+Wc9vNNEP8OB+J+8v4N4x4xwoez3Xf8A7fyuX8j/APSl87WP3rwWwaqY+Un1aa/8EZotfejrpf8Ay+1+CeSeT1/z9P5e/Ga/ns/o0KACgApSV00Ntvf8rf1/Xc1LCTdBg9fr7/Tp/wDrzziv2fgrEyxGVwcv71tv+gjFdor+X+789T8a40w0cPj1FefX/pzhXs2/5u/3FyvvW/3sF25v/ST4ya99Pt/kFQI6Twx4b1HxPqtrpenW01xNcTRw+VbR+bJz2iii/Ht9CvO4A/p0/Yj/AGY7P4J+B7PVtWj83xZrUMc1xI8f/HnGYv3UUXPH7n/e9Pev0fKMujhE5PddL/8AXxf8/H/P0WnndI/L85zaeLlybp+S7Unp+7i7+55X/E+9hwAvf6fj6nH5/lXruSqOSXS39brt3+8+eSsrf1+b/P7h1UMKACgAoAKACgAoAKACgAoAKAP/1f7+KACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgCMDIX05zzj/P8An1rOn7tNX6X8/tMDmfGM/wBl8Na5MOPJsJX/AJfT+Z+nFTVfsqHM935X+2lvd9+y+ZpSi5TS9fyf9dfxvH+MT4saqNX8ZeILgfN/xUmuJs/65303v/j9Rj5v4Vz6tyY9RpfD1fb9zRf2td7n905HRWGyTA0krtfWbq/fF1Zb3lf4ujjbzv7vmlcUqdNzUp/r2t0a/P7z25uf1r2ltO91/wA++Xbfc/Zb/glF8KBrPjTVvH19Zu1no9hssLry8J/aFvLBx/T+H1xyQv7d4N5VOpi5ZpJaPl1vH/n3meH29r3SX8NfPc/BfGTNYU8HDK4yvL3tLPX95lmJ/wCfXa7/AInzjrGX9C6qASQMZxxx/Mf/AFv0Jb+jdpTm/tcvTsrbH85acqiul+t93fsvwb+VjjPHPi/SfAnhbV/E2rzpb2mlWdzOWkOxJJUt5poosnOPMMR4z7ckCuTHYqlleCqYitL3aaj9mTbc60IfZU+tRfZ/zOrLcHVxtanhqEU5VefkXNFX9mpzk/fatZRk/elG91y3tc/kZ/al+Neo/G/4q+IPFNxIW0+S/uP7Hhf/AJc7OQ8RRcf6on0OD3z/AA/xjxXn8+IMfWxE1b2fs+XVfbo4aD2o0f8Anyt4+l9ZS/tPgzh+GQZVRw8JaTU1idHp7PEYqVDetW39s/4cv8d9FH5rr5o+qCgAoAMcY7dKALVk4SVkP3fr+Pv+HPTnjO2vt+CsyhgZKm5Wb6crfTFS6Up/z9z4jjLAqthH9Up2grX96971MLb+JNNaqXV/K0TWr9qjepFVIys3f7O9ny9ZeT+z/mfjsnUwVB/V/dqdV7r+33mpx+Gcuv4nT+F/Cmr+LtVtdI0izmurq6fyUhhj/eSY/wCWUX3fXrj8sfMRhU5vZYdXi+t0r6c207bPm+1H56Iqc6dCPPifi6L3u9nrT5ls4/Z+/eP9B37EX7EOn/Dq1tfHvj3T4bnxBcQ276ZptzH/AMgvy8S/aoh+5mimmim8jk8e2SV+5ybKvZxVWas35+dWPSb6O+z+Wrj+d8QZz9alKlDbTX5UZLeir6x2T++6P1YSNY1WNRhVXaPp+vXr7e2cV9MfJD6ACgAoAKACgAoAKACgAoAKACgAoA//1v7+KACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgBGOATWf/Lv+v5gPKfjVrY8PfDDxrrIK/8AEv0SafPB6SQj2/vev5YFcmatxwcnqrW363q0/usvLXzud+Ahz1oJLfnb10doz89Lenlre5/Gr47BPi7xBMD8txquoXIRP+ni6ml9PT27Hg1/CkpqrVdae687bx5OkeyX2fzuf3fQoulQw9P7K9rddrzct7vq+j+46P4V/CrxR8UPFOk+HtB06a4n1CaMqUj3xiPzYv3vceTD+WPTrWuXZdUz7FqlS0S9OtKpLaVSne7ov7X37GOcZxTy/C4io917J6trT2lJPX2VVLSfZfgf1j/st/A/TvgR8L9I8MQoi6rLDHea2/l7P+Jh5Qil8rGP3PTsPxzhP7P4YyWnkOVxoxTTle+/TE4iavetVt/GfX16H8V8UZ3Uz7NJ1201Hls9PtUKEHa1KinrR6rpa6u+b6Pmmit43kkYRxxpud/7iDr656e3bGcV9LbmnGCfxc3zsr76W27fcfNtpRc39m3S+7t3t/6V+p+An/BRr9quXxRfP8LfAl5NPpGmsE1m4sJNn2u5UebGAf3H7mE/uOmTyT6V/NninxnVruOWYeVlDmu+WOt/7PxEXaeFjbaW1R/K1pf0l4XcG0qOHeaYmN3PleHXNK0WpY7D10uTEu6vy/xKa29ze5+MjaZqsjbms3+bv0/oePy+vNfiVWcKkFOOije+/wBppLf0/rQ/dIKeFw7jL7Vva6LS024bN3vzfZfrYb/ZOp/8+Un5rS549/wKD+ydT/58pPzWjnj3/AA/snU/+fKT81o549/wAP7J1P8A58pPzWjnj3/ACRNE1Vl837DMkcf8fl/6v27+3f65GaKaqu06Dtv0i7dPt2vf3vsx+drkzhVqYV+1p/utOb34u37zT4XCXxJbL10Pq34KfsifFz4u6hZxaLo15/Ztx8/9sPb4s444/wDnr+9im/THqOfl/UeF8Fn2aJU6U7p3t7uD/wCoiX2pw/59vd/oflnFWa8K4ChaTtWW7f8AaP8APhmtoSh8E/P79D99/wBl/wDYh8DfBCwh1TWYLbxB4wby5JLx482Vo+D/AKi0uosxH8PwJNf0plGUQyyDjXtOXTWS61X9ipJO6qR+163u1H+a87z2ecSvRbjF76J30pLTmo0paOk76bPTa596KqxqqKu1V+VEXpj9B78n34r27KLunZaaW/4L2b7I8D5a3/r799vuJKoAoAKACgAoAKACgAoAKACgAoAKACgD/9f+/igAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAjI+6ueme34/3v/Zv8KSjb+v0u7ff9wJW0OB+JfgDTfiV4K1/wTqs0kGmeILCSwuWiRiUikMR4EMtqTgxgAeaMD+8OF5cThI4l62X3+Wyum7uK6/dax04Ou8PU5lre1lps4yXSLTd3tb5s/PWb/glb8Ebu4a6utSuZJH4kzp93+8Ttk/8JFx9dp+gxlvyyPg7wpRkp0Y+8v72Za3Vvt5lbRN/0z9T/wCIv59Si4UPdTSen1KV9b/by6/V/aXq9j65+C37Lfwm+BNoqeC9AijvNmx7+5BuJf8AVeV+682WZocg5wJOORkkhl+8yfh3K8ogo0YPT+9X71X9utVt/Fa3+6x8LnPEuZ8Qz5sdUtdL3XDD6O1JXvRpUbq1CD0j995c30iqhfr9Mf8Aszf59c/L9EfOmdqum2+r6fdadch/s95D5M2zMf7vOeDyP0PTtnFAHxne/wDBP79nbULma7vfDl1cT3E0k0kkmo30j75O4/fDtzyv4jGa+O/1F4e/6BX/AOD8b/8ANZ9auNuIP+guy/68YN/nhP6+RW/4d3fs1f8AQqTf+Btz/wDH6X+ouQf9Av8A5cY3/wCazZcd8QLbF2/7l8F/8yB/w7u/Zq/6FSb/AMDbn/4/R/qLkH/QL/5cY3/5rF/r1n//AEFf+W+C/wDmQP8Ah3d+zV/0Kk3/AIG3P/x+j/UXIP8AoF/8uMb/APNYf69Z/wD9BX/lvgv/AJkD/h3d+zV/0Kk3/gbc/wDx+j/UXIP+gX/y4xv/AM1h/r1n/wD0Ff8Alvgv/mQP+Hd37NX/AEKk3/gbc/8Ax+j/AFFyD/oF/wDLjG//ADWH+vWf/wDQV/5b4L/5kO28IfsX/AHwdPHc6X4QgeaP7gunlukHtsuHmH6H8CK6MJwvw/hmpUMM1vb99jP7yf8AErP+aW69LaHDi+KMwxOjcY+TjSb+z1VL+6vs/lc+ldJ8P6LoNtDaaRptlp1vEhREtLeOEYzz/qsde/HoOOi/R0sNToK1L3V/28+/8zb6vrL/ALdPAqYitWk5TlutVyw7WWyiul9tettebcAA6f4/56f5xW5kLQAUAFABQAUAFABQAUAFABQAUAFABQAUAf/Z"
    icon20 = ""
    gicon = "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"

    g.iconphoto(True, tk.PhotoImage(data=b64decode(icon)))

    fr_main = tk.Frame(g, bg="white")
    fr_main.pack(side=tk.TOP, fill='both', expand=True)
    
    fr = tk.Frame(fr_main, bg='white')
    fr.grid(row=0, column=0)
    fr_info = tk.Frame(fr,bg='white')
    fr_info.pack(side=tk.TOP)
    fr_tool = tk.Frame(fr_info,bg='white',width=25)
    fr_tool.pack(fill='x')
    l_path = tk.Text(fr_info, wrap='word', font=("Arial", size(12), "bold"), bg="white", fg="black", state='disabled',height=3,width=25)
    l_path.pack(fill='x')
    # info = tk.Label(fr_main,text='                                   \n\n\n\n\n\n\n\n\n\n\n\n\n', font=("Arial", size(14), "bold"), bg="white", fg="black",padx = 30,pady=30)
    xscroll = tk.Scrollbar(fr_info, orient='horizontal')
    xscroll.pack(side='bottom', fill='x')
    yscroll = tk.Scrollbar(fr_info, orient='vertical')
    yscroll.pack(side='right', fill='y')
    info = tk.Text(fr_info, wrap='none', font=("Arial", size(14), "bold"), bg="white", fg="black", state='disabled',
                height=10, width=25, xscrollcommand=xscroll.set, yscrollcommand=yscroll.set)
    info.pack()
    xscroll.config(command=info.xview)
    yscroll.config(command=info.yview)
    fr_mod = tk.Frame(fr,bg='white')
    fr_mod.pack(side=tk.TOP)
    b_name = tk.Button(fr_mod, text='Modify Name', font=('Arial', size(10), 'bold'),command=cname)
    b_name.grid(row=0,column=0)
    b_excitation = tk.Button(fr_mod, text='Modify Excitation Energy', font=('Arial', size(10), 'bold'),command=cexcitation)
    b_excitation.grid(row=0,column=1)
    b_desc = tk.Button(fr_mod, text='Modify Description', font=('Arial', size(10), 'bold'),command=desc)
    b_desc.grid(row=0,column=2)  
    
    
    # lfit = tk.Frame(step, bg='white')
    # lfit.grid(row=3, column=1)
    # lmfit = tk.Button(lfit, text='Load MDC fitted File', font=(
    #     "Arial", size(12), "bold"), width=16, height='1', command=loadmfit, bd=5, fg='blue')
    # lmfit.grid(row=0, column=0)
    # lefit = tk.Button(lfit, text='Load EDC fitted File', font=(
    #     "Arial", size(12), "bold"), width=16, height='1', command=loadefit, bd=5, fg='black')
    # lefit.grid(row=0, column=1)

    # cfit = tk.Frame(step, bg='white')
    # cfit.grid(row=4, column=1)
    # b_cmfit = tk.Button(cfit, text='Clear MDC fitted File', font=(
    #     "Arial", size(12), "bold"), width=16, height='1', command=clmfit, bd=5, fg='blue')
    # b_cmfit.grid(row=0, column=0)
    # b_cefit = tk.Button(cfit, text='Clear EDC fitted File', font=(
    #     "Arial", size(12), "bold"), width=16, height='1', command=clefit, bd=5, fg='black')
    # b_cefit.grid(row=0, column=1)


    # lbb = tk.Button(step, text='Load Bare Band File', font=(
    #     "Arial", size(12), "bold"), width=16, height='1', command=bareband, bd=5, fg='blue')
    # lbb.grid(row=5, column=1)
    

    plots = tk.Frame(fr, bg='white')
    plots.pack(side=tk.TOP)
    
    cmf = tk.Frame(plots, bg='white')
    cmf.grid(row=0, column=1)

    cmbf = tk.Frame(cmf, bg='white')
    cmbf.grid(row=0, column=0)
    
    bchcmp = tk.Button(cmbf, text='Change cmap', font=(
        "Arial", size(12), "bold"), height='1', command=Chcmp, border=2)
    bchcmp.pack(side='left', padx=2, pady=2)
    bdefcmp = tk.Button(cmbf, text='User Defined cmap', font=(
        "Arial", size(12), "bold"), height='1', command=def_cmap, border=2)
    bdefcmp.pack(side='left', padx=2, pady=2)

    cmlf = tk.Frame(cmf, bg='white')
    cmlf.grid(row=1, column=0)
    if pr_cmap is not None:
        optionList3 = ['prevac_cmap', colormap_name, 'terrain', 'custom_cmap1', 'custom_cmap2', 'custom_cmap3', 'custom_cmap4', 'viridis', 'turbo', 'inferno', 'plasma', 'copper', 'grey', 'bwr']
    else:
        optionList3 = ['prevac_cmap', 'terrain', 'custom_cmap1', 'custom_cmap2', 'custom_cmap3', 'custom_cmap4', 'viridis', 'turbo', 'inferno', 'plasma', 'copper', 'grey', 'bwr']
    setcmap = tk.OptionMenu(cmlf, value3, *optionList3)
    setcmap.grid(row=0, column=1)
    cmp = plt.colormaps()
    cm = tk.OptionMenu(cmlf, value3, *cmp)
    cm.grid(row=1, column=1)

    c1 = tk.Label(cmlf, text='Commonly Used:', font=(
        "Arial", size(12)), bg="white", height='1')
    c1.grid(row=0, column=0)
    c2 = tk.Label(cmlf, text='All:', font=("Arial", size(12)), bg="white", height='1')
    c2.grid(row=1, column=0)
    
    frraw = tk.Frame(fr, bg='white')
    frraw.pack(side=tk.TOP)

    optionList = ['Raw Data', 'E-k Diagram', 'MDC Normalized',
                'First Derivative', 'Second Derivative', 'MDC Curves', 'E-k with MDC Curves']   # 選項
    value = tk.StringVar()                                        # 取值
    value.set('---Plot1---')
    # 第二個參數是取值，第三個開始是選項，使用星號展開
    menu1 = tk.OptionMenu(frraw, value, *optionList)
    menu1.grid(row=0, column=1)
    value.trace_add('write', plot1)

    b_spec = tk.Button(frraw, text='Spectrogram', fg='red', font=("Arial", size(12), "bold"),width=10, height='1', command=trans_plot, bd=5)
    # b_spec.grid(row=0, column=1)


    frfit = tk.Frame(plots, bg='white')
    # frfit.grid(row=2, column=1)
    optionList1 = ['MDC fitted Data', 'EDC fitted Data',
                'Real Part', 'Imaginary Part']   # 選項
    value1 = tk.StringVar()                                        # 取值
    value1.set('---Plot2---')
    # 第二個參數是取值，第三個開始是選項，使用星號展開
    menu2 = tk.OptionMenu(frraw, value1, *optionList1)
    menu2.grid(row=1, column=1)
    value1.trace_add('write', plot2)
    
    ##### Base and FWHM not packing to frfit #####
    l_fit = tk.Label(frfit, text='Base counts:', font=(
        "Arial", size(10), "bold"), bg="white", height='1', bd=5)
    # l_fit.grid(row=0, column=1)
    base = tk.StringVar()
    base.set('0')
    base.trace_add('write', fbase)
    in_fit = tk.Entry(frfit, font=("Arial", size(10)), width=5, textvariable=base, bd=5)
    # in_fit.grid(row=0, column=2)
    b_fit = tk.Button(frfit, text='Fit FWHM', font=(
        "Arial", size(10), "bold"), bg="white", height='1', bd=5, command=fitgl)
    # b_fit.grid(row=0, column=3)
    ##### Base and FWHM not packing to frfit #####

    optionList2 = ['Real & Imaginary', 'KK Transform Real & Imaginary', 'KK Transform Real Part', 'KK Transform Imaginary Part', 'KK Transform Real Part 2nd Derivative', 'KK Transform Imaginary Part 1st Derivative', 'Data Plot with Pos', 'Data Plot with Pos and Bare Band']   # 選項
    value2 = tk.StringVar()                                        # 取值
    value2.set('---Plot3---')
    # 第二個參數是取值，第三個開始是選項，使用星號展開
    menu3 = tk.OptionMenu(frraw, value2, *optionList2)
    menu3.grid(row=2, column=1)
    value2.trace_add('write', plot3)


    m1 = tk.Label(frraw, text='Raw', font=(
        "Arial", size(12), "bold"), bg="white", fg='red')
    m1.grid(row=0, column=0)
    m2 = tk.Label(frraw, text='Fit', font=(
        "Arial", size(12), "bold"), bg="white", fg='blue')
    m2.grid(row=1, column=0)
    m3 = tk.Label(frraw, text='Transform', font=(
        "Arial", size(12), "bold"), bg="white", fg="blue")
    m3.grid(row=2, column=0)

    
    fr_state = tk.Frame(fr_main, bg='white')
    fr_state.grid(row=0, column=2)

    st = queue.Queue(maxsize=0)
    state = tk.Label(fr_state, text=f"Version: {__version__}", font=(
        "Arial", size(14), "bold"), bg="white", fg="black", wraplength=250, justify='center')
    state.grid(row=0, column=0)

    Icon = [icon1, icon2, icon3, icon4, icon5, icon6, icon7, icon8, icon9, icon10, icon11, icon12, icon13, icon14, icon15, icon16, icon17, icon18, icon19, icon20]
    img = []
    tdata = []
    for _ in Icon:
        if _:
            tdata.append(io.BytesIO(b64decode(_)))
            timg = Image.open(io.BytesIO(b64decode(_))).resize([250, 250])
            tk_img = ImageTk.PhotoImage(timg)
            img.append(tk_img)
    trd = np.random.randint(len(img))
    timg = ImageTk.PhotoImage(Image.open(tdata[trd]).resize([250, 250]))
    tdata = tdata[trd]
    limg = tk.Label(fr_state, image=timg, width='250', height='250', bg='white')
    limg.grid(row=1, column=0)

    
    exf = tk.Frame(fr_state, bg='white')
    exf.grid(row=2, column=0)

    clim = tk.Frame(exf, bg='white')
    clim.grid(row=0, column=0)
    lcmax = tk.Label(clim, text='Maximum', font=(
        "Arial", size(12)), bg='white', fg='white')
    lcmax.grid(row=0, column=0)
    lcmin = tk.Label(clim, text='Minimum', font=(
        "Arial", size(12)), bg='white', fg='white')
    lcmin.grid(row=1, column=0)
    cmax = tk.Frame(clim, bg='white', width=15, bd=5)
    cmax.grid(row=0, column=1)
    cmin = tk.Frame(clim, bg='white', width=15, bd=5)
    cmin.grid(row=1, column=1)


    cM = tk.DoubleVar()
    cm = tk.DoubleVar()
    cM.set(10000)
    cm.set(-10000)
    vcmax = tk.DoubleVar()
    vcmax.set(10000)
    vcmax.trace_add('write', cmaxrange)
    Cmax = tk.Scale(cmax, from_=cm.get(), to=cM.get(), orient='horizontal',
                    variable=vcmax, state='disabled', bg='white', fg='white')
    Cmax.pack()
    vcmin = tk.DoubleVar()
    vcmin.set(-10000)
    vcmin.trace_add('write', cminrange)
    Cmin = tk.Scale(cmin, from_=cm.get(), to=cM.get(), orient='horizontal',
                    variable=vcmin, state='disabled', bg='white', fg='white')
    Cmin.pack()
    
    step = tk.Frame(fr_state, bg='white')
    step.grid(row=3, column=0)

    # l1 = tk.Label(step, text='Step 1', font=(
    #     "Arial", size(12), "bold"), bg="white", fg='red')
    # l1.grid(row=0, column=0)
    # l2 = tk.Label(step, text='Step 2', font=(
    #     "Arial", size(12), "bold"), bg="white", fg='blue')
    # l2.grid(row=1, column=0)
    l3 = tk.Label(step, text='k offset (deg)', font=(
        "Arial", size(12), "bold"), bg="white", fg="black")
    l3.grid(row=2, column=0)
    # l4 = tk.Label(step, text='Step 3', font=(
    #     "Arial", size(12), "bold"), bg="white", fg='blue')
    # l4.grid(row=3, column=0)
    # l5 = tk.Label(step, text='Step 4', font=("Arial", size(12), "bold"),
    #             bg="white", fg="blue", height=1)
    # l5.grid(row=5, column=0)

    fremfit = tk.Frame(master=step)
    fremfit.grid(row=0, column=1)
    # lf = tk.Button(fremfit, text='Load Raw Data', font=(
    #     "Arial", size(12), "bold"), fg='red', width=15, height='1', command=load, bd=9)
    # lf.grid(row=0, column=0)
    # bmfit = tk.Button(fremfit, text='MDC Fit', font=(
    #     "Arial", size(12), "bold"), fg='red', width=8, height='1', command=cmfit, bd=9)
    # bmfit.grid(row=0, column=1)
    # befit = tk.Button(fremfit, text='EDC Fit', font=(
    #     "Arial", size(12), "bold"), fg='red', width=8, height='1', command=cefit, bd=9)
    # befit.grid(row=0, column=2)


    cut = tk.Frame(step, bg='white')
    # cut.grid(row=1, column=1)
    # mdccut = tk.Button(cut, text='MDC cut', font=(
    #     "Arial", size(12), "bold"), width=8, height='1', command=ecut, bd=5, fg='blue')
    # mdccut.grid(row=0, column=0)
    # edccut = tk.Button(cut, text='EDC cut', font=(
    #     "Arial", size(12), "bold"), width=8, height='1', command=angcut, bd=5, fg='black')
    # edccut.grid(row=0, column=1)
    l_lowlim = tk.Label(cut, text='Lower Limit', font=(
        "Arial", size(10), "bold"), bg="white", fg="black", height=1)
    l_lowlim.grid(row=0, column=2)
    lowlim = tk.StringVar()
    lowlim.set('0')
    lowlim.trace_add('write', flowlim)
    in_lowlim = tk.Entry(cut, font=("Arial", size(10), "bold"),
                        width=7, textvariable=lowlim, bd=5)
    in_lowlim.grid(row=0, column=3)


    k_offset = tk.StringVar()
    try:
        k_offset.set(ko)
    except:
        k_offset.set('0')
    k_offset.trace_add('write', reload)
    koffset = tk.Entry(step, font=("Arial", size(12), "bold"),
                    width=12, textvariable=k_offset, bd=9)
    koffset.grid(row=2, column=1)
    
    bb_offset = tk.StringVar()
    try:
        bb_offset.set(bbo)
    except:
        bb_offset.set('0')
    bb_offset.trace_add('write', fbb_offset)
    bboffset = tk.Entry(step, font=("Arial", size(12), "bold"),
                        width=12, textvariable=bb_offset, bd=9)
    bboffset.grid(row=3, column=1)
    bbk_offset = tk.StringVar()
    try:
        bbk_offset.set(bbk)
    except:
        bbk_offset.set('1')
    bbk_offset.trace_add('write', fbbk_offset)
    bbkoffset = tk.Entry(step, font=("Arial", size(12), "bold"),
                        width=12, textvariable=bbk_offset, bd=9)
    bbkoffset.grid(row=4, column=1)
    l6 = tk.Label(step, text='Bare band E offset (meV)', font=(
        "Arial", size(12), "bold"), bg="white", fg="black", height=1)
    l6.grid(row=3, column=0)
    l7 = tk.Label(step, text='Bare band k ratio', font=(
        "Arial", size(12), "bold"), bg="white", fg="black", height=1)
    l7.grid(row=4, column=0)

    figfr = tk.Frame(fr_main, bg='white')
    figfr.grid(row=0, column=1, sticky='nsew')
    global figy
    figy = 8.5 if osf<=100 else 8.25 if osf<=150 else 8
    figx = 11.5 if osf<=100 else 11.25 if osf<=150 else 11
    fig = Figure(figsize=(figx*scale, figy*scale), layout='constrained')
    out = FigureCanvasTkAgg(fig, master=figfr)
    out.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=True)
    ao = None
    out.mpl_connect('motion_notify_event', move)
    out.mpl_connect('button_press_event', press)
    out.mpl_connect('button_release_event', release)
    ax= fig.subplots()
    tim = np.array(Image.open(tdata))
    ax.imshow(tim, aspect='equal', alpha=0.4)
    fontdict = {
    'fontsize': size(40),
    'fontweight': 'bold',
    'fontname': 'Arial'
}
    ax.text(tim.shape[0]/2, tim.shape[1]/2, f"Version: {__version__}\n\nRelease Date: {__release_date__}", fontdict=fontdict, color='black', ha='center', va='center')
    ax.axis('off')
    out.draw()

    xydata = tk.Frame(figfr, bg='white')
    xydata.pack(side=tk.TOP, fill=tk.BOTH, expand=True)

    xdata = tk.Label(xydata, text='xdata:', font=(
        "Arial", size(16), "bold"), width='15', height='1', bd=9, bg='white')
    xdata.grid(row=0, column=0)
    ydata = tk.Label(xydata, text='ydata:', font=(
        "Arial", size(16), "bold"), width='15', height='1', bd=9, bg='white')
    ydata.grid(row=0, column=1)
    b_emode = tk.Button(xydata, text='K.E.', fg='blue', font=("Arial", size(16), "bold"), width=5, height='1', command=emode, bd=9)
    b_emode.grid(row=0, column=2)
    b_copyimg = tk.Button(xydata, fg='red', text='Copy Image to Clipboard', font=('Arial', size(16), 'bold'), command=f_copy_to_clipboard, bd=9)
    b_copyimg.grid(row=0, column=3)
    
    
    dl=0
    b_sw = tk.Button(xydata, text='dot', font=('Arial', size(16), 'bold'), command=dl_sw, bd=9)

    lcmp = tk.Frame(plots, bg='white')
    lcmp.grid(row=0, column=0)

    lcmpd = Figure(figsize=(0.75*scale, 1*scale), layout='constrained')
    cmpg = FigureCanvasTkAgg(lcmpd, master=lcmp)
    cmpg.get_tk_widget().grid(row=0, column=1)
    lsetcmap = tk.Label(lcmp, text='Colormap:', font=(
        "Arial", size(12), "bold"), bg="white", height='1', bd=9)
    lsetcmap.grid(row=0, column=0)
    chcmp()

    # expf = tk.Frame(exf, bg='white')
    # expf.grid(row=1,column=0)
    # ex = tk.Button(expf, fg='red', text='Export Graph', font=(
    #     "Arial", size(12), "bold"), height='1', command=exp, bd=9)
    # ex.grid(row=0, column=0)
    # exo = tk.Button(expf, fg='blue', text='Export to Origin', font=(
    #     "Arial", size(12), "bold"), height='1', command=gui_exp_origin, bd=9)
    # exo.grid(row=0, column=1)
    # extm = tk.Button(exf, text='Export MDC Fitted Data (k offset)', font=(
    #     "Arial", size(12), "bold"), height='1', command=exptm, bd=9)
    # extm.grid(row=2, column=0)
    # exte = tk.Button(exf, text='Export EDC Fitted Data (k offset)', font=(
    #     "Arial", size(12), "bold"), height='1', command=expte, bd=9)
    # exte.grid(row=3, column=0)
    
    
    tt = threading.Thread(target=tstate)
    tt.daemon = True
    tt.start()
    try:
        info.config(state='normal')
        pr_load(data)
        if len(lfs.name) > 1:
            if len(lfs.n)>0:lfs.sort='no'
            b_tools = tk.Button(fr_tool, text='Batch Master', command=tools, width=12, height=1, font=('Arial', size(12), "bold"), bg='white')
            b_tools.grid(row=0, column=0)
            nlist = lfs.name
            namevar = tk.StringVar(value=nlist[0])
            l_name = tk.OptionMenu(fr_tool, namevar, *nlist, command=change_file)
            if len(namevar.get()) >20:
                l_name.config(font=('Arial', size(12), "bold"))
            else:
                l_name.config(font=('Arial', size(14), "bold"))
            l_name.grid(row=0, column=1)
        if lfs.f_npz[0]:
            npzf = True
            koffset.config(state='normal')
            k_offset.set('0')
            koffset.config(state='disabled')
    except:
        pass
    print(f"Version: {__version__}")
    print(f"Release Date: {__release_date__}\n")
    ###### hotkey ######
    g.bind('<Return>', plot)
    g.bind('<Up>', cf_up)
    g.bind('<Down>', cf_down)
    g.bind('<MouseWheel>', scroll)
    g.bind('<MouseWheel>', scroll)
    g.bind("<Control-o>", load)
    g.bind("<F1>", loadmfit)
    g.bind("<F2>", loadefit)
    g.bind("<F3>", bareband)
    g.bind("<F4>", trans_plot)
    g.bind("<F5>", cmfit)
    g.bind("<F6>", cefit)
    g.bind("<F7>", ecut)
    g.bind("<F8>", angcut)
    g.bind("<F9>", calculator)
    g.bind("<F10>", exp)
    g.bind("<F11>", gui_exp_origin)
    g.bind("<F12>", view_3d)
    g.update()
    screen_width = g.winfo_reqwidth()
    screen_height = g.winfo_reqheight()
    # print(f"Screen Width: {screen_width}, Screen Height: {screen_height}")
    g.geometry(f"{screen_width}x{screen_height}+0+{sc_y}")
    # g.protocol("WM_DELETE_WINDOW", quit)
    g.update()
    if cec is not None: # CEC loaded old data to show the cutting rectangle
        cec.tlg.focus_force()
    g_mem = (g_mem - psutil.virtual_memory().available)/1024**3   # Main GUI memory in GB
    # print(f"Main GUI memory usage: {g_mem:.2f} GB")
    g.mainloop()
